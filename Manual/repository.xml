<?xml version="1.0"?>
<!DOCTYPE texinfo PUBLIC "-//GNU//DTD TexinfoML V4.8//EN" "http://www.gnu.org/software/texinfo/dtd/4.8/texinfo.dtd">
<texinfo xml:lang="en">
  <setfilename>repository.xml</setfilename>
  <settitle>CentOS Artwork Repository</settitle>
<!--  Summary Description and Copyright - -->
  <para>This manuals documents relevant information regarding the deployment, organization, and administration of CentOS Artwork Repository.</para>
  <para>Copyright &copyright; 2009, 2010, 2011 The CentOS Project</para>
  <para>Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.2 or any later version published by the Free Software Foundation; with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A copy of the license is included in the section entitled GNU Free Documentation License. 
<!--  Titlepage, Contents, Copyright - --></para>
  <titlepage>
    <booktitle>CentOS Artwork Repository</booktitle>
    <booksubtitle>Manual</booksubtitle>
    <author>Alain Reguera Delgado</author>
    <para>This manuals documents relevant information regarding the deployment, organization, and administration of CentOS Artwork Repository.</para>
    <para>Copyright &copyright; 2009, 2010, 2011 The CentOS Project</para>
    <para>Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.2 or any later version published by the Free Software Foundation; with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A copy of the license is included in the section entitled GNU Free Documentation License.</para>
  </titlepage>
  <contents></contents>
<!--  `Top' Node and Master Menu - -->
  <node>
    <nodename>Top</nodename>
    <nodeup>(dir)</nodeup>
    <unnumbered>
      <title>CentOS Artwork Repository</title>
      <para>This manuals documents relevant information regarding the deployment, organization, and administration of CentOS Artwork Repository.</para>
      <para>Copyright &copyright; 2009, 2010, 2011 The CentOS Project</para>
      <para>Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.2 or any later version published by the Free Software Foundation; with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A copy of the license is included in the section entitled GNU Free Documentation License.</para>
      <menu>
        <menuentry>
          <menunode>Introduction</menunode>
          <menutitle>Introduction</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Directories</menunode>
          <menutitle>Directories</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Index</menunode>
          <menutitle>Index</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>List of Figures</menunode>
          <menutitle>List of Figures</menutitle>
          <menucomment></menucomment>
        </menuentry>
      </menu>
<!--  The Body of the Document - -->
    </unnumbered>
  </node>
  <node>
    <nodename>Introduction</nodename>
    <nodenext>Directories</nodenext>
    <nodeprev>Top</nodeprev>
    <nodeup>Top</nodeup>
    <chapter>
      <title>Introduction</title>
      <para><indexterm index="cp">Introduction</indexterm>Welcome to CentOS Artwork Repository Manual.</para>
      <para>The CentOS Artwork Repository Manual describes how The CentOS Project Corporate Visual Identity is organized and produced inside the CentOS Artwork Repository (<uref><urefurl>https://projects.centos.org/svn/artwork/</urefurl></uref>). If you are looking for a comprehensive, task-oriented guide for understanding how The CentOS Project Corporate Visual Identity is produced, this is the manual for you.</para>
      <para>This manual discusses the following intermedite topics:</para>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>The CentOS Brand</para>
        </item>
        <item>
          <para>The CentOS Corporate Visual Structure</para>
        </item>
        <item>
          <para>The CentOS Corporate Visual Style</para>
        </item>
      </itemize>
      <para>This guide assumes you have a basic understanding of your CentOS system. If you need help with CentOS, refer to the help page on the CentOS Wiki (<uref><urefurl>http://wiki.centos.org/Help</urefurl></uref>) for a list of different places you can find help.</para>
      <menu>
        <menuentry>
          <menunode>History</menunode>
          <menutitle>History</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Authors</menunode>
          <menutitle>Authors</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Copying Conditions</menunode>
          <menutitle>Copying Conditions</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Document Convenctions</menunode>
          <menutitle>Document Convenctions</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Repository Convenctions</menunode>
          <menutitle>Repository Convenctions</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Feedback</menunode>
          <menutitle>Feedback</menutitle>
          <menucomment></menucomment>
        </menuentry>
      </menu>
    </chapter>
  </node>
  <node>
    <nodename>History</nodename>
    <nodenext>Authors</nodenext>
    <nodeup>Introduction</nodeup>
    <section>
      <title>History</title>
      <para><indexterm index="cp">History</indexterm>This section records noteworthy changes of CentOS Artwork Repository through years.</para>
      <subheading>2008</subheading>
      <para>The CentOS Artwork Repository started at CentOS Developers mailing list (<email><emailaddress>centos-devel@centos.org</emailaddress></email>) during a discussion about how to automate the slide images of Anaconda. In such discussion, Ralph Angenendt rose up his hand to ask: Do you have something to show?</para>
      <para>To answer the question, Alain Reguera Delgado posted a bash script to produce slide images in different languages &mdash;together with the proposition of creating a Subversion centralized repository where translations and image production could be distributed inside The CentOS Community&mdash;.</para>
      <para>Karanbirn Sighn considered the idea intresting and provides the infrastructure necessary to support the effort. This way the CentOS Artwork SIG and the CentOS Artwork Repository are officially created and made available in the following urls:</para>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para><uref><urefurl>https://projects.centos.org/trac/artwork/</urefurl></uref></para>
        </item>
        <item>
          <para><uref><urefurl>https://projects.centos.org/svn/artwork/</urefurl></uref></para>
        </item>
      </itemize>
      <para>Once the CentOS Artwork Repository was available, Alain Reguera Delagdo uploaded the bash script for rendering Anaconda slides; Ralph Angenendt documented it very well and The CentOS Translators started to download working copies of CentOS Artwork Repository to produce slide images in their own languages.</para>
      <subheading>2009</subheading>
      <para>The rendition script is at a very rustic state where only slide images can be produced.</para>
      <para>The rendition script is improved to produce not only slide images, but PNG images using one SVG file as input. In this configuration one translated SVG instance was created from the SVG provided as input in order to produce one translated PNG image as output.  The translation of SVG files is made through SED replacement commands and the rendition of PNG images is realized through Inkscape command line internface.</para>
      <para>The rendition script is named <command>render.sh</command>. The directory structures are prepared to receive the rendition script so images could be produced inside them. Each directory structure has design templates (.svg), translation files (.sed), and translated images (.png).</para>
      <para>The rendition script is unified in a common place and linked from different directory structures. There is no need to have the same code in different directory structures if it can be in just one place and then be linked from different locations.</para>
      <para>The concepts of corporate identity started to be considered. As referece, it is used Wikipedia (<uref><urefurl>http://en.wikipedia.org/Corporate_identity</urefurl></uref>) and the book <emph>Corporate Identity</emph> by Wally Olins (1989).</para>
      <para>The rendition script main's goal becomes to: automate production of a monolithic corporate visual identity structure based on The CentOS Mission and The CentOS Release Schema.</para>
      <para>The documentation of CentOS Artwork Repository starts to take form in &latex; format.</para>
      <subheading>2010</subheading>
      <para>The rendition script <command>render.sh</command> is no longer a rendition script, but a collection of functionalities grouped into the <command>centos-art.sh</command> script where rendition is one functionality among others.  The <command>centos-art.sh</command> is created to automate most frequent tasks inside the repository.  There is no need to have links all around the repository if a command-line interface can be created and called anywhere inside the repository as it is usually done with regular commands.</para>
      <para>Inside <command>centos-art.sh</command>, functionalities started to get identified and separated one another. For example, when images are rendered, there is no need to load functionalities related to documentation manual. There is now common functionalities and specific functionalities. Common functionalities are loaded when the script is initiated and are available to specific functionalities.</para>
      <para>The <command>centos-art.sh</command> script is updated to handle options trough <command>getopt</command> option parser.</para>
      <para>The repository directory structure is updated to improve the implementation of corporate visual identity concepts.</para>
      <subheading>2011</subheading>
      <para>The <command>centos-art.sh</command> script is updated to translate SVG and other XML-based files (e.g., XHTML and Docbook) through <command>xml2po</command> program and shell scripts files through <command>xgettext</command> command.  In this configuration there is no need to use `.sed' translation files as they previously were used.</para>
      <para>The <command>centos-art.sh</command> script is updated to improve option parsing through <command>getopt</command> program. All arguments are parsed by <command>getopt</command> now. Once all option arguments have been parsed, only non-option arguments remain for processing.</para>
      <para>The <command>centos-art.sh</command> script is updated to organize functionalities in two groups: &ldquo;the administrative functionalities&rdquo; and &ldquo;the productive functionalities&rdquo;.  The administrative functionalities cover actions like: copying, deleting and renaming directory structures inside the repository. Also, preparing your workstation for using <command>centos-art.sh</command> script, making backups of the distribution theme currently installed,  installing themes created inside repository and restoring themes from backup.  On the other hand, the productive functionalities cover actions like: content rendition, content localization, content documentation and content maintainance.</para>
    </section>
  </node>
  <node>
    <nodename>Authors</nodename>
    <nodenext>Copying Conditions</nodenext>
    <nodeprev>History</nodeprev>
    <nodeup>Introduction</nodeup>
    <section>
      <title>Authors</title>
      <para><indexterm index="cp">Authors</indexterm>This section records authoring information of CentOS Artwork Repository along the years:</para>
      <subheading>Graphic Design</subheading>
      <para>Work line: <xref><xrefnodename>Directories trunk Identity</xrefnodename></xref></para>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>Guideon de Kok</para>
        </item>
        <item>
          <para><email><emailaddress>alain.reguera@gmail.com</emailaddress><emailname>Alain Reguera Delgado</emailname></email></para>
        </item>
        <item>
          <para><email><emailaddress>marcus@moeller.org</emailaddress><emailname>Marcus Moeller</emailname></email></para>
        </item>
      </itemize>
      <subheading>Documentation</subheading>
      <para>Work line: <xref><xrefnodename>Directories trunk Manual</xrefnodename></xref></para>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para><email><emailaddress>alain.reguera@gmail.com</emailaddress><emailname>Alain Reguera Delgado</emailname></email></para>
        </item>
        <item>
          <para><email><emailaddress>ralph@centos.org</emailaddress><emailname>Ralph Angenendt</emailname></email></para>
        </item>
      </itemize>
      <subheading>Localization</subheading>
      <para>Work line: <xref><xrefnodename>Directories trunk Locales</xrefnodename></xref></para>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para><email><emailaddress>alain.reguera@gmail.com</emailaddress><emailname>Alain Reguera Delgado</emailname></email> (Spanish)</para>
        </item>
      </itemize>
      <subheading>Automation</subheading>
      <para>Work line: <xref><xrefnodename>Directories trunk Scripts</xrefnodename></xref></para>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para><email><emailaddress>alain.reguera@gmail.com</emailaddress><emailname>Alain Reguera Delgado</emailname></email></para>
        </item>
      </itemize>
      <subheading>Infrastructure</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para><email><emailaddress>karan@centos.org</emailaddress><emailname>Karanbirn Singh</emailname></email></para>
        </item>
        <item>
          <para><email><emailaddress>ralph@centos.org</emailaddress><emailname>Ralph Angenendt</emailname></email></para>
        </item>
      </itemize>
      <subheading>Packaging</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para><email><emailaddress>karan@centos.org</emailaddress><emailname>Karanbirn Singh</emailname></email></para>
        </item>
        <item>
          <para><email><emailaddress>ralph@centos.org</emailaddress><emailname>Ralph Angenendt</emailname></email></para>
        </item>
      </itemize>
    </section>
  </node>
  <node>
    <nodename>Copying Conditions</nodename>
    <nodenext>Document Convenctions</nodenext>
    <nodeprev>Authors</nodeprev>
    <nodeup>Introduction</nodeup>
    <section>
      <title>Copying Conditions</title>
      <para><indexterm index="cp">Copying conditions</indexterm>Inside the CentOS Artwork Repository you can find content branded by The CentOS Project and content not branded at all. Contents branded by The CentOS Project contain either The CentOS Trademark, The CentOS Logo or The CentOS Symbol.  Content branded by The CentOS Project cannot be redistributed without previous conversation with The CentOS Project.  However, you can study and modify both content branded by The CentOS Project and content not branded at all in the sake of proposing improvements to The CentOS Project corporate visual identity.</para>
      <para>If you are using the CentOS Artwork Repository for producing your own corporate visual identity, you should remove all The CentOS Trademarks from your contents and rename the repository to something different from CentOS Artwork Repository.</para>
      <para>The CentOS Artwork Repository organizes files in a very specific way to implement The CentOS Project corporate visual identity. This very specific organization of files is part of <command>centos-art.sh</command> script, a bash script that automates most of the frequent tasks inside the repository.</para>
      <subheading>The <command>centos-art.sh</command> script</subheading>
      <para>The <command>centos-art.sh</command> script and the organization of files it needs to work are not in the public domain; they are copyrighted and there are restrictions on their distribution, but these restrictions are designed to permit everything that a good cooperating citizen would want to do.  What is not allowed is to try to prevent others from further sharing any version of this program that they might get from you.</para>
      <para>Specifically, we want to make sure that you have the right to give away copies of <command>centos-art.sh</command> script, that you receive source code or else can get it if you want it, that you can change this program or use pieces of it in new free programs, and that you know you can do these things.</para>
      <para>To make sure that everyone has such rights, we have to forbid you to deprive anyone else of these rights.  For example, if you distribute copies of the <command>centos-art.sh</command> script, you must give the recipients all the rights that you have.  You must make sure that they, too, receive or can get the source code.  And you must tell them their rights.</para>
      <para>Also, for our own protection, we must make certain that everyone finds out that there is no warranty for the <command>centos-art.sh</command> script. If this program is modified by someone else and passed on, we want their recipients to know that what they have is not what we distributed, so that any problems introduced by others will not reflect on our reputation.</para>
      <para>The precise conditions of the license for the <command>centos-art.sh</command> script are found in the General Public Licenses that accompany it (see file <uref><urefurl>file:///home/centos/artwork/trunk/Scripts/COPYING</urefurl><urefdesc>trunk/Scripts/COPYING</urefdesc></uref>). This manual specifically is covered by the GNU Free Documentation License.</para>
    </section>
  </node>
  <node>
    <nodename>Document Convenctions</nodename>
    <nodenext>Repository Convenctions</nodenext>
    <nodeprev>Copying Conditions</nodeprev>
    <nodeup>Introduction</nodeup>
    <section>
      <title>Document Convenctions</title>
      <para><indexterm index="cp">Document convenctions</indexterm>In this manual the personal pronoun <emph>we</emph> is used to repesent <emph>The CentOS Artwork SIG</emph>. This is, the group of persons building the CentOS Artwork Repository.</para>
      <para>In this manual, certain words are represented in different fonts, typefaces, sizes, and weights. This highlighting is systematic; different words are represented in the same style to indicate their inclusion in a specific category. The types of words that are represented this way include the following:</para>
      <table>
        <tableitem>
          <tableterm><command>command</command></tableterm>
          <item>
            <para>Linux commands (and other operating system commands, when used) are represented this way. This style should indicate to you that you can type the word or phrase on the command line and press Enter to invoke a command. Sometimes a command contains words that would be displayed in a different style on their own (such as file names). In these cases, they are considered to be part of the command, so the entire phrase is displayed as a command. For example:</para>
            <para>Use the <command>centos-art identity --render='path/to/dir'</command> command to produce contents inside the <file>trunk/Identity</file> directory structure.</para>
          </item>
        </tableitem>
      </table>
      <table>
        <tableitem>
          <tableterm><file>file name</file></tableterm>
          <item>
            <para>File names, directory names, paths, and RPM package names are represented this way. This style indicates that a particular file or directory exists with that name on your system. Examples:</para>
            <para>The <file>init.sh</file> file in <file>trunk/Scripts/Bash/Cli/</file> directory is the initialization script, written in Bash, used to automate most of tasks in the repository.</para>
            <para>The <command>centos-art</command> command uses the <file>ImageMagick</file> RPM package to convert images from PNG format to other formats.</para>
          </item>
        </tableitem>
      </table>
      <table>
        <tableitem>
          <tableterm><key><key>key</key></key></tableterm>
          <item>
            <para>A key on the keyboard is shown in this style. For example:</para>
            <para>To use <key>TAB</key> completion to list particular files in a directory, type <command>ls</command>, then a character, and finally the Tab key. Your terminal displays the list of files in the working directory that begin with that character.</para>
          </item>
        </tableitem>
      </table>
      <table>
        <tableitem>
          <tableterm><key><key>key-combination</key></key></tableterm>
          <item>
            <para>A combination of keystrokes is represented in this way. For example:</para>
            <para>The <key>Ctrl-Alt-Backspace</key> key combination exits your graphical session and returns you to the graphical login screen or the console.</para>
          </item>
        </tableitem>
      </table>
      <table>
        <tableitem>
          <tableterm><code><code>computer output</code></code></tableterm>
          <item>
            <para>Text in this style indicates text displayed to a shell prompt such as error messages and responses to commands. For example:</para>
            <para>The <command>ls</command> command displays the contents of a directory. For example:</para>
            <verbatim xml:space="preserve"><![CDATA[
Config                           manual_renameEntry.sh
manual_copyEntry.sh              manual_restoreCrossReferences.sh
manual_deleteCrossReferences.sh  manual_searchIndex.sh
]]></verbatim>
            <para>The output returned in response to the command (in this case, the contents of the directory) is shown in this style.</para>
          </item>
        </tableitem>
      </table>
      <para>Additionally, we use several different strategies to draw your attention to certain pieces of information. In order of urgency, these items are marked as a note, tip, important, caution, or warning. For example:</para>
      <quotation>
        <para><strong>Note</strong> Remember that Linux is case sensitive. In other words, a rose is not a ROSE is not a rOsE.</para>
      </quotation>
      <quotation>
        <para><strong>Tip</strong> The directory <file>/usr/share/doc/</file> contains additional documentation for packages installed on your system.</para>
      </quotation>
      <quotation>
        <para><strong>Important</strong> If you modify the DHCP configuration file, the changes do not take effect until you restart the DHCP daemon.</para>
      </quotation>
      <quotation>
        <para><strong>Caution</strong> Do not perform routine tasks as root &mdash; use a regular user account unless you need to use the root account for system administration tasks.</para>
      </quotation>
      <quotation>
        <para><strong>Warning</strong> Be careful to remove only the necessary partitions. Removing other partitions could result in data loss or a corrupted system environment.</para>
      </quotation>
    </section>
  </node>
  <node>
    <nodename>Repository Convenctions</nodename>
    <nodenext>Feedback</nodenext>
    <nodeprev>Document Convenctions</nodeprev>
    <nodeup>Introduction</nodeup>
    <section>
      <title>Repository Convenctions</title>
      <para><indexterm index="cp">Repository convenctions</indexterm>The CentOS Artwork Repository is supported by Subversion (<uref><urefurl>http://subversion.tigris.org/</urefurl></uref>), a version control system which allows you to keep old versions of files and directories (usually source code), keep a log of who, when, and why changes occurred, etc., like CVS, RCS or SCCS.</para>
      <para>When using Subversion there is one <emph>source repository</emph> and many <emph>working copies</emph> of that source repository. The working copies are independent one another, can be distributed all around the world and provide a local place for designers, documentors, translators and programmers to perform their works in a descentralized way.  The source repository, on the other hand, provides a central place for all independent working copies to interchange data and provides the information required to permit extracting previous versions of files at any time.</para>

      <subsection>
        <title>Repository policy</title>
        <para><indexterm index="cp">Repository policy</indexterm> The CentOS Artwork Repository is a collaborative tool that anyone can have access to. However, changing that tool in any form is something that should be requested in <email><emailaddress>centos-devel@centos.org</emailaddress></email> mailing list.  Generally, people download working copies from CentOS Artwork Repository, study the repository organization, make some changes in their working copies, make some tests to verify such changes do work the way expected and finally request access to commit them up to the CentOS Artwork Repository (i.e., the source repository) for others to benefit from them.</para>
        <para>Once you've received access to commit your changes, there is no need for you to request permission again to commit other changes from your working copy to CentOS Artwork Repository as long as you behave as a <emph>good community citizen</emph>.</para>
        <para>As a good community citizen one understand of a person who respects the work already done for others and share ideas with authors before changing relevant parts of their work, specially in situations when the access required to realize the changes has been granted already. Of course, there is a time when conversation has taken place, the paths has been traced and changing the work is so obvious that there is no need for you to talk about it; that's because you already did, you already built the trust to keep going. Anyway, the mailing list mentioned above is available for sharing ideas in a way that good relationship between community citizens could be constantly balanced.</para>
        <para>The relationship between community citizens is monitored by repository administrators. Repository administrators are responsible of granting everything goes the way it needs to go in order for the CentOS Artwork Repository to comply its mission which is: to provide a colaborative tool for The CentOS Community where The CentOS Project Corporate Identity is built and maintained from The CentOS Community itself.</para>
        <para>It is also important to remember that all source files inside CentOS Artwork Repository should comply the terms of GNU General Public License in order for them to remain inside the repository. See file <uref><urefurl>file:///home/centos/artwork/trunk/Scripts/COPYING</urefurl><urefdesc>trunk/Scripts/COPYING</urefdesc></uref>, for a complete license description.</para>
      </subsection>

      <subsection>
        <title>Repository organization</title>
        <para><indexterm index="cp">Repository organization</indexterm> The CentOS Artwork Repository uses a <file>trunk</file>, <file>branches</file>, and <file>tags</file> organization.</para>
        <table>
          <tableitem>
            <tableterm><file>trunk</file></tableterm>
            <item>
              <para>The <file>trunk</file> directory organizes the main development line of CentOS Artwork Repository. See <xref><xrefnodename>Directories trunk</xrefnodename></xref>, for more information.</para>
            </item>
          </tableitem>
          <tableitem>
            <tableterm><file>branches</file></tableterm>
            <item>
              <para>The <file>branches</file> directory oranizes intermediate development lines taken from the main development line.  See <xref><xrefnodename>Directories branches</xrefnodename></xref>, for more information.</para>
            </item>
          </tableitem>
          <tableitem>
            <tableterm><file>tags</file></tableterm>
            <item>
              <para>The <file>tags</file> directory organizes frozen development lines taken either from the main or the intermediate lines of development. See <xref><xrefnodename>Directories tags</xrefnodename></xref>, for more information.</para>
            </item>
          </tableitem>
        </table>
      </subsection>

      <subsection>
        <title>Repository file names</title>
        <para><indexterm index="cp">Repository file names</indexterm> Inside the CentOS Artwork Repository, file names are all written in lowercase (e.g., <samp>01-welcome.png</samp>, <samp>splash.png</samp>, <samp>anaconda_header.png</samp>, etc.) and directory names are all written capitalized (e.g., <samp>Identity</samp>, <samp>Themes</samp>, <samp>Motifs</samp>, <samp>TreeFlower</samp>, etc.).</para>
      </subsection>

      <subsection>
        <title>Repository work lines</title>
        <para>Inside CentOS Artwork Repository there are four major work lines of production which are: <emph>graphic design</emph>, <emph>documentation</emph>, <emph>localization</emph> and <emph>automation</emph>.  These work lines describe different areas of content production. Content production inside these specific areas may vary as much as persons be working on them. Producing content in too many different ways may result innapropriate in a collaborative environment like CentOS Artwork Repository where content produced in one area depends somehow from content produced in another different area. So, a <emph>content production standard</emph> is required for each available work line.</para>

        <subsubsection>
          <title>Graphic design</title>
          <para><indexterm index="cp">Graphic design work line</indexterm> The graphic design work line exists to cover brand design, typography design and themes design mainly. Additionally, some auxiliar areas like icon design, illustration design, brushes design, patterns designs and palettes of colors are also included here for completeness.</para>
          <para>Inside CentOS Artwork Repository graphic design is performed through Inkscape (<uref><urefurl>http://www.inkscape.org/</urefurl></uref>) and GIMP (<uref><urefurl>http://www.gimp.org/</urefurl></uref>).  The Inkscape tool is used to create and manipulate scalable vector graphics and export them to PNG format; it also provides a command-line interface that we use to perform massive exportation from SVG files to PNG files in automation scripts. On the other hand, GIMP is used to create and manipulate rastered images, create brushes, patterns and palettes of colors.</para>
          <quotation>
            <para><strong>Tip</strong> Combine both Inkscape and GIMP specific functionalities and possibilities to produce very beautiful images.</para>
          </quotation>
          <para>The CentOS Project Corporate Visual Identity is made of different visual manifestations (e.g., Distributions, Web sites, Stationery, etc.).  Visual manifestations implement the corporate identity concepts by mean of images.  To produce these images, we decompose image production in <emph>design models</emph> and <emph>artistic motifs</emph>.</para>
          <para>Design models provide the structural information of images (i.e., dimension, position of common elements in the visible area, translation markers, etc.) and they are generally produced as scalable vector graphics to take advantage of SVG standard, an XML-based standard.</para>
          <para>Artistic motifs provide the visual style (i.e., the background information, the look and feel) some design models need to complete the final image produced by automation scripts. Artistic motifs are generally produced as rastered images.</para>
          <para>The result produced from combining one design model with one artistic motif is what we know as a <emph>theme</emph>. Inside themes directory structure (see <xref><xrefnodename>Directories trunk Identity Themes</xrefnodename></xref>), you can find several design models and several artistic motifs independently one another that can be albitrarily combined through <emph>theme rendition</emph>, a flexible way to produce images for different visual manifestations in very specific visual styles. Inside themes directory structure, theme rendition is performed in <file>trunk/Identity/Themes/Motifs</file> directory structure, the required design models are taken from <file>trunk/Identity/Themes/Models</file> directory structure and the action itself is controlled by the <code>render</code> functionality of <command>centos-art.sh</command> script.</para>
          <para>In addition to theme rendition you can find <emph>direct rendition</emph>, too. Direct rendition is another way of image production where there is no artistic motif at all but design models only. Direct rendition is very useful to produce simple content that doesn't need specific background information. Some of these contents are brands, icons and illustrations.  Direct rendition is performed in <file>trunk/Identity/Images</file>, the required design models are taken from <file>trunk/Identity/Models</file> directory structure and the action itself is controlled by the <code>render</code> functionality of <command>centos-art.sh</command> script.</para>
          <para>See <xref><xrefnodename>Directories trunk Identity</xrefnodename></xref>, for more information about The CentOS Corporate Identity and how graphic design fits on it.</para>
        </subsubsection>

        <subsubsection>
          <title>Documentation</title>
          <para><indexterm index="cp">Documentation work line</indexterm> The documentation work line exists to describe what each directory inside the CentOS Artwork Repository is for, the conceptual ideas behind them and, if possible, how automation scripts make use of them.</para>
          <para>The CentOS Artwork Repository documentation is supported by Texinfo, a documentation system that uses a single source file to produce both online information and printed output.</para>
          <para>The repository documentation is organized under <file>trunk/Manual</file> directory structure and uses the repository directories as reference. Each directory structure in the repository has a documentation entry associated in the documentation manual.  Documentation entries are stored under <file>trunk/Manual/Directories</file> directory structure and the action itself is controlled by the <code>help</code> functionality of <command>centos-art.sh</command> script.</para>
          <para>The <code>help</code> functionality let you create, edit and delete documentation entries in a way that you don't need to take care of updating menus, nodes and cross reference information inside the manual structure; the functionality takes care of it for you. However, if you need to write repository documentation that have nothing to do with repository directories (e.g., Preface, Introduction and similar) you need to do it manually, there is no functionality to automate such process yet.</para>
          <para>See <xref><xrefnodename>Directories trunk Manual</xrefnodename></xref>, for more information on documentation.</para>
        </subsubsection>

        <subsubsection>
          <title>Localization</title>
          <para><indexterm index="cp">Localization work line</indexterm> The localization work line exists to provide the translation messages required to produce content in different languages. Translation messages inside the repository are stored as portable objects (e.g., .po, .pot) and machine objects (.mo) under <file>trunk/Locales</file> directory structure.</para>
          <para>The procedure used to localize content is taken from <command>gettext</command> standard specification.  Basically, translatable strings are retrived from source files in order to create portable objects and machine objects for them.  These portable objects are editable files that contain the information used by translators to localize the translatable strings retrived from source files. On the other hand, machine objects are produced to be machine-redable only, as its name implies, and are produced from portable objects.</para>
          <para>Since <command>gettext</command> needs to extract translatable strings form source files in order to let translators to localize them, we are limitted to use source files supported by <command>gettext</command> program. This is not a limitation at all since <command>gettext</command> supports most popular programming laguages (e.g., C, C++, Java, Bash, Python, Perl, PHP and GNU Awk just to mention a few ones). Nevertheless, formats like SVG, XHTML and Docbook don't figure as supported formats in the list of <command>gettext</command> supported source files.</para>
          <para>To translate XML based source files like SVG, XHTML and Docbook we use the <command>xml2po</command> program instead. The <command>xml2po</command> comes with the <file>gnome-doc-utils</file> package and retrives translatable strings from one XML file to produce portable objects for them.</para>
          <quotation>
            <para><strong>Note</strong> Portable objects produced by <command>xml2po</command> have the same format that portable objects produced by <command>gettext</command>. This make the localization process quite consistent from translators' point of view. No matter what the source file be, the translator will always face the same translation file format (i.e., the portable object format).</para>
          </quotation>
          <para>With the portable object in place, the <command>xml2po</command> program is used again to create the final translated XML, just with the same definition of the source file where translatable strings were taken from (e.g., if we extract translatable strings from a SVG file, as result we get the same SVG file but with translatable strings already localized &mdash;obviously, for this to happen translators need to localize translatable strings inside the portable object first, localization won't appear as art of magic&mdash;).  When using <command>xml2po</command>, the machine object is used as temporal file to produce the final translated XML file.</para>
          <quotation>
            <para><strong>Tip</strong> If you want to have your content localized inside CentOS Artwork Repository be sure to use source files supported either by <command>gettext</command> or <command>xml2po</command> programs.</para>
          </quotation>
          <para>See <xref><xrefnodename>Directories trunk Locales</xrefnodename></xref>, for more information.</para>
        </subsubsection>

        <subsubsection>
          <title>Automation</title>
          <para><indexterm index="cp">Automation work line</indexterm> The automation work line exists to standardize content production in CentOS Artwork Repository. There is no need to type several tasks, time after time, if they can be programmed into just one executable script.</para>
          <para>The automation work line takes place under <file>trunk/Scripts</file> directory structure. Here is developed the <command>centos-art.sh</command> script, a bash script specially designed to automate most frequent tasks (e.g., rendition, documentation and localization) inside the repository.  Basically, the <command>centos-art.sh</command> script is divided in several functionalities independent one another that perform specific tasks and relay on repository organization to work as expected.</para>
          <quotation>
            <para><strong>Tip</strong> If you need to improve the way content is produced, look inside automation scripts and make your improvement there for everyone to benefit.</para>
          </quotation>
          <para>See <xref><xrefnodename>Directories trunk Scripts</xrefnodename></xref>, for more information on automation.</para>
        </subsubsection>
      </subsection>

      <subsection>
        <title>Connection between directories</title>
        <para><indexterm index="cp">Connection between directories</indexterm><indexterm index="cp">Master paths</indexterm><indexterm index="cp">Auxiliar paths</indexterm> In order to produce content in CentOS Artwork Repository, it is required that all work lines be connected somehow.  This is the way automation scripts can know where to retrive the information they need to work with (e.g., design model, translation messages, output location, etc.).  We build this kind of connection using two path constructions named <emph>master paths</emph> and <emph>auxiliar paths</emph>.</para>
        <para>The master path points only to directories that contain the source files (e.g., SVG files) required to produce base content (e.g., PNG files) through automation scripts.  Each master path inside the repository may have several auxiliar paths associated, but auxiliar paths can only have one master path associated.</para>
        <para>The auxiliar paths can point either to directories or files. When an auxiliar path points to a directory, that directory contains information that modifies somehow the content produced from master paths (e.g., translation messages) or provides the output information required to know where to store the content produced from master path. When an auxiliar path points to a file, that file has no other purpose but to document the master path it refers to.</para>
        <para>The relation between auxiliar paths and master paths is realized combining two path informations which are: the master path itself and one second level directory structure from the repository.  Generally, the master path is considered the path identifier and the second level directory structure taken from the repository is considered the common part of the path where the identifier is appended.</para>
        <float name="Path construction">
          <floattype>Figure</floattype>
          <floatpos></floatpos>
          <verbatim xml:space="preserve"><![CDATA[
-----+---------------+----------------------------+------+-----------
Path | Suffix        | Identifier                 |Prefix| Type 
-----+---------------+----------------------------+------+-----------
  A  |               |trunk/Identity/Models/Brands|      | Directory 
-----+---------------+----------------------------+------+-----------
  B  |  trunk/Manual/|trunk/Identity/Models/Brands|.texi | File      
-----+---------------+----------------------------+------+-----------
  C  | trunk/Locales/|trunk/Identity/Models/Brands|      | Directory 
-----+---------------+----------------------------+------+-----------
  D  |               |trunk/Identity/Images/Brands|      | Directory 
-----+---------------+----------------------------+------+-----------
  E  | trunk/Locales/|trunk/Identity/Images/Brands|.texi | File      
-----+---------------+----------------------------+------+-----------

  A = Master path.
  B = Auxiliar path to documentation entry.
  C = Auxiliar path to translation messages.
  D = Auxiliar path to final content output.
  E = Auxiliar path to documentation entry.
]]></verbatim>
          <caption>Path construction.</caption>
        </float>
        <para>The path information described above (see <xref><xrefnodename>Path construction</xrefnodename></xref>) is used by direct rendition and can be taken as reference to add other components that are equally produced in the repository.  To add new components that make use of direct rendition inside the repository, change just the component name used above (e.g., <file>Brands</file>) to that one you want to add, without changing the path structure around it.</para>
        <para>The file organization used by theme rendition extends direct rendition by separating design models information from backgrounds information. To better understand this configuration, you can consider it as two independent lists, one of design models and one of artistic motifs, which are arbitrary combined between themselves in order to render images in specific ways. The possibilities of this configuration are endless and let us describe visual manifestations very well.  For example, consider the organization used to produce <file>Anaconda</file> images; for CentOS distribution major release 5; using <file>Default</file> design models and version <file>3</file> of <file>Flame</file> artistic motif:</para>
        <float name="Path construction extended">
          <floattype>Figure</floattype>
          <floatpos></floatpos>
          <verbatim xml:space="preserve"><![CDATA[
-----+---------------+------------------------------------------------------+------+-----------
Path | Suffix        | Identifier                                           |Prefix| Type 
-----+---------------+------------------------------------------------------+------+-----------
  A  |               |trunk/Identity/Themes/Models/Default/Distro/5/Anaconda|      | Directory 
-----+---------------+------------------------------------------------------+------+-----------
  B  |  trunk/Manual/|trunk/Identity/Themes/Models/Default/Distro/5/Anaconda|.texi | File      
-----+---------------+------------------------------------------------------+------+-----------
  C  | trunk/Locales/|trunk/Identity/Themes/Models/Default/Distro/5/Anaconda|      | Directory 
-----+---------------+------------------------------------------------------+------+-----------
  D  |               |trunk/Identity/Themes/Motifs/Flame/3/Distro/5/Anaconda|      | Directory 
-----+---------------+------------------------------------------------------+------+-----------
  E  | trunk/Locales/|trunk/Identity/Themes/Motifs/Flame/3/Distro/5/Anaconda|.texi | File      
-----+---------------+------------------------------------------------------+------+-----------

  A = Master path.
  B = Auxiliar path to documentation entry.
  C = Auxiliar path to translation messages.
  D = Auxiliar path to final content output.
  E = Auxiliar path to documentation entry.
]]></verbatim>
          <caption>Path construction extended.</caption>
        </float>
        <para>The path information described above (see <xref><xrefnodename>Path construction extended</xrefnodename></xref>) is used by theme rendition and can be taken as reference to add other components that are equally produced in the repository.</para>
        <para>In this configuration we can change both design model name (e.g., <file>Default</file>) and artistic motif name (e.g., <file>Flame/3</file>) to something else in order to achieve a different result. The only limitations impossed are the storage space provided in the server machine and your own creativeness as graphic designer.</para>
        <quotation>
          <para><strong>Note</strong> A theme ready for implementation may consume from 100 MB to 400 MB of storage space. The exact space consumed by a theme depends on the amount of screen resolutions the theme supports. The more screen resolutions the theme supports, the more storage space demanded for it.</para>
        </quotation>
        <para>In this configuration we saw how to build the path information for <file>Anaconda</file> component as part of CentOS Distribution visual manifestation, but that is not the only component we have inside CentOS Distribution visual manifestation.  There are other components like Syslinux, Grub, Rhgb, Gdm, Kdm, Gsplash and Ksplash that share a similar file organization to that described above for <file>Anaconda</file> component.</para>
      </subsection>

      <subsection>
        <title>Syncronizing path information</title>
        <para><indexterm index="cp">Syncronizing path information</indexterm> Syncronizing path information is the action that keeps all path information up to date in the repository. This action implies both <emph>file movement</emph> and <emph>file content replacement</emph> in this very specific order. File movement is related to duplicate, delete and rename files and directories in the repository.  File content replacement is related to replace information, path information in this case, inside files in the repository.</para>
        <para>The order followed to syncronize path information is relevant because the versioned nature of the files we are working with. We don't perform file content replacement first because that would imply a repository change which will immediatly demmand a commit in order for actions like duplicate, delete or rename to take place. However, if we perform file movement first, it is possible to commit both file moved and file content replacements as if they were just one change. In this case the file content replacement takes palce in the target location that have been duplicated or renamed, not the one use as source location. This configuration is specially useful when files are renamed (i.e., one file is copied from a source location to a target location and then the source location of it is removed from repository).</para>
        <quotation>
          <para><strong>Warning</strong> There is no support for URLs actions inside <command>centos-art.sh</command> script.  The <command>centos-art.sh</command> script is designed to work with local files inside the working copy only. If you need to perform URL actions directly, use Subversion commands instead.</para>
        </quotation>
        <para>When one master path is changed it is required that all related auxiliar paths be changed, too. This is required in order for master paths to retain their relation with auxiliar paths.  This way, automation scripts are able to know where to retrive translation messages from, where to store final output images to and where to look for documentation. If relation between master paths and auxiliar paths is lost, there is no way for automation scripts to know where to retrive the information they need.</para>
        <para>The auxiliar paths should never be modified under any reason but to satisfy the relationship with the master path.  Liberal change of auxiliar paths may suppress the conceptual idea they were initially created for; and certainly, automation scripts may stop working as expected. The update direction to rename path information must be from master path to auxiliar path and never the opposite.</para>
        <para>The relation between master and auxiliar paths is useful to keep repository organized but introduce some complications when we work with files that use master path information as reference to build structural information.  This is the case of repository documentation manual source files where inclusions, menus, nodes and cross references are built using master path information as reference.  Now, to see what kind of complication we are talking about, consider what would happen to a structural definitions (i.e., inlusions, menus, nodes and cross refereces) already set in the manual from one master path that is suddenly renamed to something different.  If the path information is not syncronized, at this point, we lose connection between the master path and the auxiliar path created to store the related documentation entry, as well as the related structural definitions that end up pointing to a master path that no longer exist.</para>
        <para>The syncronization of path information is aimed to solve these kind of issues.</para>
      </subsection>

      <subsection>
        <title>Extending repository organization</title>
        <para><indexterm index="cp">Extending repository organization</indexterm> Occasionly, you may find that new components of The CentOS Project Corporate Identity need to be added to the repository in order to work them out. If that is the case, the first question we need to ask ourselves, before start to create directories blindly all over, is: <emph>What is the right place to store it?</emph></para>
        <para>The best place to find answers is in The CentOS Community (see page <uref><urefurl>http://wiki.centos.org/GettingHelp</urefurl></uref>), but going there with hands empty is not good idea. It may give the impression you don't really care about. Instead, consider the following suggestions to find your own comprehension in order to make your own propositions based on it.</para>
        <para>When extending respository structure it is very useful to bear in mind The CentOS Project Corporate Identity Structure (see <xref><xrefnodename>Directories trunk Identity</xrefnodename></xref>) The CentOS Mission and The CentOS Release Schema. The rest is just matter of choosing appropriate names. It is also worth to know that each directory in the repository responds to a conceptual idea that justifies its existence.</para>
        <para>To build a directory structure, you need to define the conceptual idea first and later create the directory. There are some locations inside the repository that already define some concepts you probably want to reuse. For example, <file>trunk/Identity/Themes/Motifs</file> to store theme artistic motifs, <file>trunk/Identity/Themes/Models</file> to store theme design models, <file>trunk/Manual</file> to store documentation files, <file>trunk/Locales</file> to store translation messages, <file>trunk/Scripts</file> to store automation scripts and so on.</para>
        <para>To illustrate this desition process let's consider the <file>trunk/Identity/Themes/Motifs/TreeFlower/3</file> directory structure as example.  This directory can be read as: the theme development line of version <file>3</file> of <file>TreeFlower</file> artistic motif. Additional, we can identify that artistic motifs are part of themes as well as themes are part of The CentOS Project Corporate Identity. These concepts are better described independently in each documentation entry related to the directory structure as it is respectively shown in the list of commands bellow.</para>
        <verbatim xml:space="preserve"><![CDATA[
centos-art help --read turnk
centos-art help --read turnk/Identity
centos-art help --read turnk/Identity/Themes
centos-art help --read turnk/Identity/Themes/Motifs
centos-art help --read turnk/Identity/Themes/Motifs/TreeFlower
centos-art help --read turnk/Identity/Themes/Motifs/TreeFlower/3
]]></verbatim>
        <para>The concepts behind other location can be found in the same way described above, just change the path information used above to the one you are trying to know concepts for.</para>
      </subsection>
    </section>
  </node>
  <node>
    <nodename>Feedback</nodename>
    <nodeprev>Repository Convenctions</nodeprev>
    <nodeup>Introduction</nodeup>
    <section>
      <title>Send in Your Feedback</title>
      <para><indexterm index="cp">Feedback</indexterm>If you find an error in the <emph>CentOS Artwork Repository Manual</emph>, or if you have thought of a way to make this manual better, we would like to hear from you! Create a new ticket in The CentOS Artwork SIG web site (<uref><urefurl>https://projects.centos.org/trac/artwork/</urefurl></uref>).</para>
      <para>If you have a suggestion for improving the documentation, try to be as specific as possible. If you have found an error, include the section number and some of the surrounding text so we can find it easily.</para>
    </section>
  </node>
  <node>
    <nodename>Directories</nodename>
    <nodenext>Index</nodenext>
    <nodeprev>Introduction</nodeprev>
    <nodeup>Top</nodeup>
    <chapter>
      <title>The Repository Directories</title>
      <para><indexterm index="cp">Repository directories</indexterm>The CentOS Artwork Repository uses directories to organize files and describe conceptual idea about corporate identity. Such conceptual ideas are explained in each directory related documentation entry.</para>
      <para>In this chapter you'll learn what each directory inside The CentOS Artwork Repository is for and so, how you can make use of them. For that purpose, the following list of directories is available for you to explore:</para>
      <menu>
        <menuentry>
          <menunode>Directories branches</menunode>
          <menutitle>Directories branches</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Directories tags</menunode>
          <menutitle>Directories tags</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Directories trunk</menunode>
          <menutitle>Directories trunk</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Directories trunk Identity</menunode>
          <menutitle>Directories trunk Identity</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Directories trunk Identity Brushes</menunode>
          <menutitle>Directories trunk Identity Brushes</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Directories trunk Identity Fonts</menunode>
          <menutitle>Directories trunk Identity Fonts</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Directories trunk Identity Images</menunode>
          <menutitle>Directories trunk Identity Images</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Directories trunk Identity Models</menunode>
          <menutitle>Directories trunk Identity Models</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Directories trunk Identity Models Brands</menunode>
          <menutitle>Directories trunk Identity Models Brands</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Directories trunk Identity Palettes</menunode>
          <menutitle>Directories trunk Identity Palettes</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Directories trunk Identity Patterns</menunode>
          <menutitle>Directories trunk Identity Patterns</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Directories trunk Identity Themes</menunode>
          <menutitle>Directories trunk Identity Themes</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Directories trunk Identity Themes Models</menunode>
          <menutitle>Directories trunk Identity Themes Models</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Directories trunk Identity Themes Models Default</menunode>
          <menutitle>Directories trunk Identity Themes Models Default</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Directories trunk Identity Themes Models Default Concept</menunode>
          <menutitle>Directories trunk Identity Themes Models Default Concept</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Directories trunk Identity Themes Models Default Distro</menunode>
          <menutitle>Directories trunk Identity Themes Models Default Distro</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Directories trunk Identity Themes Models Default Distro 5</menunode>
          <menutitle>Directories trunk Identity Themes Models Default Distro 5</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Directories trunk Identity Themes Models Default Distro 5 Anaconda</menunode>
          <menutitle>Directories trunk Identity Themes Models Default Distro 5 Anaconda</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Directories trunk Identity Themes Models Default Distro 5 Firstboot</menunode>
          <menutitle>Directories trunk Identity Themes Models Default Distro 5 Firstboot</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Directories trunk Identity Themes Models Default Distro 5 Gdm</menunode>
          <menutitle>Directories trunk Identity Themes Models Default Distro 5 Gdm</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Directories trunk Identity Themes Models Default Distro 5 Grub</menunode>
          <menutitle>Directories trunk Identity Themes Models Default Distro 5 Grub</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Directories trunk Identity Themes Models Default Distro 5 Gsplash</menunode>
          <menutitle>Directories trunk Identity Themes Models Default Distro 5 Gsplash</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Directories trunk Identity Themes Models Default Distro 5 Kdm</menunode>
          <menutitle>Directories trunk Identity Themes Models Default Distro 5 Kdm</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Directories trunk Identity Themes Models Default Distro 5 Ksplash</menunode>
          <menutitle>Directories trunk Identity Themes Models Default Distro 5 Ksplash</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Directories trunk Identity Themes Models Default Distro 5 Rhgb</menunode>
          <menutitle>Directories trunk Identity Themes Models Default Distro 5 Rhgb</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Directories trunk Identity Themes Models Default Distro 5 Syslinux</menunode>
          <menutitle>Directories trunk Identity Themes Models Default Distro 5 Syslinux</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Directories trunk Identity Themes Models Default Posters</menunode>
          <menutitle>Directories trunk Identity Themes Models Default Posters</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Directories trunk Identity Themes Motifs</menunode>
          <menutitle>Directories trunk Identity Themes Motifs</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Directories trunk Identity Themes Motifs Flame</menunode>
          <menutitle>Directories trunk Identity Themes Motifs Flame</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Directories trunk Identity Themes Motifs Modern</menunode>
          <menutitle>Directories trunk Identity Themes Motifs Modern</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Directories trunk Identity Themes Motifs Pipes</menunode>
          <menutitle>Directories trunk Identity Themes Motifs Pipes</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Directories trunk Identity Themes Motifs TreeFlower</menunode>
          <menutitle>Directories trunk Identity Themes Motifs TreeFlower</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Directories trunk Identity Webenv</menunode>
          <menutitle>Directories trunk Identity Webenv</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Directories trunk Locales</menunode>
          <menutitle>Directories trunk Locales</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Directories trunk Manual</menunode>
          <menutitle>Directories trunk Manual</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Directories trunk Scripts</menunode>
          <menutitle>Directories trunk Scripts</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Directories trunk Scripts Functions</menunode>
          <menutitle>Directories trunk Scripts Functions</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Directories trunk Scripts Functions Help</menunode>
          <menutitle>Directories trunk Scripts Functions Help</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Directories trunk Scripts Functions Locale</menunode>
          <menutitle>Directories trunk Scripts Functions Locale</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Directories trunk Scripts Functions Path</menunode>
          <menutitle>Directories trunk Scripts Functions Path</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Directories trunk Scripts Functions Prepare</menunode>
          <menutitle>Directories trunk Scripts Functions Prepare</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Directories trunk Scripts Functions Render</menunode>
          <menutitle>Directories trunk Scripts Functions Render</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Directories trunk Scripts Functions Render Config</menunode>
          <menutitle>Directories trunk Scripts Functions Render Config</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Directories trunk Scripts Functions Tuneup</menunode>
          <menutitle>Directories trunk Scripts Functions Tuneup</menutitle>
          <menucomment></menucomment>
        </menuentry>
      </menu>
    </chapter>
  </node>
  <node>
    <nodename>Directories branches</nodename>
    <nodenext>Directories tags</nodenext>
    <nodeup>Directories</nodeup>
    <section>
      <title>The <file>branches</file> Directory</title>
      <para><indexterm index="cp">Directories branches</indexterm></para>
      <subheading>Goals</subheading>
      <para>This directory implements the Subversion's branches concept in a trunk, branches, tags repository structure.</para>
      <subheading>Description</subheading>
      <para>The <file>branches/</file> directory structure provides the intermediate space for creating several instances of <file>trunk/</file> directory structure for parallel development and later merging changes back to <file>trunk/</file> in the same parallel basis.</para>
      <subheading>Usage</subheading>
      <para>The <file>branches/</file> directory structure is unused, so far.</para>
      <subheading>See also</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para><xref><xrefnodename>Directories tags</xrefnodename></xref>.</para>
        </item>
        <item>
          <para><xref><xrefnodename>Directories trunk</xrefnodename></xref>.</para>
        </item>
        <item>
          <para>The Subversion book (<uref><urefurl>http://svnbook.red-bean.com/</urefurl></uref>).</para>
        </item>
      </itemize>
    </section>
  </node>
  <node>
    <nodename>Directories tags</nodename>
    <nodenext>Directories trunk</nodenext>
    <nodeprev>Directories branches</nodeprev>
    <nodeup>Directories</nodeup>
    <section>
      <title>The <file>tags</file> Directory</title>
      <para><indexterm index="cp">Directories tags</indexterm></para>
      <subheading>Goals</subheading>
      <para>This directory implements the Subversion's tags concept in a trunk, branches, tags repository structure.</para>
      <subheading>Description</subheading>
      <para>The <file>tags/</file> directory structure provides frozen branches. Generally, we use frozen branches to make check-points in time for development lines under <file>branches/</file> or <file>trunk/</file> directory structure.</para>
      <subheading>Usage</subheading>
      <para>The <file>tags/</file> directory structure is unused, so far.</para>
      <subheading>See also</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para><xref><xrefnodename>Directories branches</xrefnodename></xref>.</para>
        </item>
        <item>
          <para><xref><xrefnodename>Directories trunk</xrefnodename></xref>.</para>
        </item>
        <item>
          <para>The subversion book (<uref><urefurl>http://svnbook.red-bean.com/</urefurl></uref>).</para>
        </item>
      </itemize>
    </section>
  </node>
  <node>
    <nodename>Directories trunk</nodename>
    <nodenext>Directories trunk Identity</nodenext>
    <nodeprev>Directories tags</nodeprev>
    <nodeup>Directories</nodeup>
    <section>
      <title>The <file>trunk</file> Directory</title>
      <para><indexterm index="cp">Directories trunk</indexterm></para>
      <subheading>Goals</subheading>
      <para>The <file>trunk/</file> directory structure implements the Subversion's trunk concept in a trunk, branches, tags repository structure.</para>
      <subheading>Description</subheading>
      <para>The <file>trunk/</file> directory structure provides the main development line inside the CentOS Artwork Repository.</para>
      <subheading>Usage</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>See <xref><xrefnodename>Directories trunk Identity</xrefnodename></xref>.</para>
        </item>
        <item>
          <para>See <xref><xrefnodename>Directories trunk Manual</xrefnodename></xref>.</para>
        </item>
        <item>
          <para>See <xref><xrefnodename>Directories trunk Locales</xrefnodename></xref>.</para>
        </item>
        <item>
          <para>See <xref><xrefnodename>Directories trunk Scripts</xrefnodename></xref>.</para>
        </item>
      </itemize>
      <subheading>See also</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para><xref><xrefnodename>Directories branches</xrefnodename></xref>.</para>
        </item>
        <item>
          <para><xref><xrefnodename>Directories tags</xrefnodename></xref>.</para>
        </item>
        <item>
          <para>The Subversion book (<uref><urefurl>http://svnbook.red-bean.com/</urefurl></uref>).</para>
        </item>
      </itemize>
    </section>
  </node>
  <node>
    <nodename>Directories trunk Identity</nodename>
    <nodenext>Directories trunk Identity Brushes</nodenext>
    <nodeprev>Directories trunk</nodeprev>
    <nodeup>Directories</nodeup>
    <section>
      <title>The <file>trunk/Identity</file> Directory</title>
      <para><indexterm index="cp">Directories trunk Identity</indexterm></para>
      <subheading>Goals</subheading>
      <para>The <file>trunk/Identity</file> describes what The CentOS Project Corporate Identity is and the components it is made of.</para>
      <subheading>Description</subheading>
      <para>The CentOS Project Corporate Identity is the &ldquo;persona&rdquo; of the organization known as The CentOS Project.  The CentOS Project Corporate Identity plays a significant role in the way The CentOS Project, as organization, presents itself to both internal and external stakeholders. In general terms, The CentOS Project Corporate Identity expresses the values and ambitions of The CentOS Project organization, its business, and its characteristics.</para>
      <para>The CentOS Project Corporate Identity provides visibility, recognizability, reputation, structure and identification to The CentOS Project organization by means of <emph>Corporate Design</emph>, <emph>Corporate Communication</emph>, and <emph>Corporate Behaviour</emph>.</para>
      <float name="The CentOS Project Corporate Identity">
        <floattype>Figure</floattype>
        <floatpos></floatpos>
        <image width="450pt" height="" name="trunk/Identity/Images/Manual/Corporate/monolithic" extension="jpg"><alttext></alttext></image>
        <caption>The CentOS Project Corporate Identity.</caption>
      </float>
      <subsubheading>Corporate Mission</subsubheading>
      <para>The CentOS Project exists to provide The CentOS Distribution. Additionally, The CentOS Project provides The CentOS Web and The CentOS Showroom to support and promote the existence of The CentOS Distribution, respectively.</para>
      <subsubheading>Corporate Design</subsubheading>
      <para>Corporate design is focused on the effective communication of corporate visual messages. Corporate visual messages are all the information emitted by a corporation that can be perceived by the people through their visual sence (i.e., the human eye).  In order for such visual communication to happen, it is required to put the visual message on medium available for people to see.  These kind of media are know as corporate visual manifestations, since the corporate manifests its existence through them using corporate design.</para>
      <para>The amount of visual manifestations a corporation uses to communicate its existence is very specific to each corporation itself. Inside The CentOS Project Corporate Identity, considering <emph>The CentOS Project Corporate Structure</emph>, <emph>The CentOS Project Corporate Mission</emph> and <emph>The CentOS Project Release Schema</emph>, the following visual manifestations were defined:</para>
      <table>
        <tableitem>
          <tableterm><strong>The CentOS Distribution</strong></tableterm>
          <item>
            <para>The CentOS Distribution visual manifestation exists to cover all actions related to artwork production and rebranding required by the The CentOS Distribution (see <xref><xrefnodename>Directories trunk Identity Themes Models Default Distro</xrefnodename></xref>) in order to comply with its upstream redistribution guidelines.</para>
            <para>The CentOS Distribution is made of software packages. Inside the distribution there are packages that make a remarkable use of images and there are packages that don't use images at all. The CentOS Distribution visual manifestation gets focused on software packages that do use images in a remarkable way (e.g., <file>anaconda</file>, <file>grub</file>, <file>syslinux</file>, <file>gdm</file>, <file>kdm</file>) and that way, through images, implements the corporate design in The CentOS Distribution (i.e., the operating system).</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><strong>The CentOS Web</strong></tableterm>
          <item>
            <para>The CentOS Web visual manifestation exists to support The CentOS Distribution.</para>
            <para>The CentOS Web covers web applications which let The CentOS Project to manifest its existence on the Internet. Through these web applications The CentOS Project provides Corporate Communication.  These web applications are free software and come from different providers which distribute their work with predefined visual styles.  Frequently, these predefined visual styles have no visual relation among themselves and introduce some visual contraditions when they all are put together.  These visual contraditions need to be removed in order to comply with The CentOS Project Corporate Structure guidelines.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><strong>The CentOS Showroom</strong></tableterm>
          <item>
            <para>The CentOS Showroom visual manifestation exists to promote The CentOS Distribution.</para>
            <para>The CentOS Showroom covers industrial production of objects branded by The CentOS Project (e.g., clothes, stationery and installation media). These branded objects are for distribution on social events and/or shops. They provide a way of promotion and a route for commercialization that may help to aliviate The CentOS Project expenses (e.g., electrical power, hosting, servers, full-time-developers, etc.), in a similar way as donations may do.</para>
          </item>
        </tableitem>
      </table>
      <para>The visual manifestations above seem to cover all the media required by The CentOS Project, as organization, to show its existence. However, other visual manifestations could be added in the future, if needed, to cover different areas like building, offices, road transportation and whaterver visual manifestation The CentOS Project thouches to show its existence.</para>
      <subsubheading>Corporate Communication</subsubheading>
      <para>The CentOS Project Corporate Communication is based on <emph>Community Communication</emph> and takes place through the following avenues:</para>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>The CentOS Chat (<code>#centos</code>, <code>#centos-social</code>, <code>#centos-devel</code> on irc.freenode.net)</para>
        </item>
        <item>
          <para>The CentOS Mailing Lists (<uref><urefurl>http://lists.centos.org/</urefurl></uref>).</para>
        </item>
        <item>
          <para>The CentOS Forums (<uref><urefurl>http://forums.centos.org/</urefurl></uref>).</para>
        </item>
        <item>
          <para>The CentOS Wiki (<uref><urefurl>http://wiki.centos.org/</urefurl></uref>).</para>
        </item>
        <item>
          <para>Social events, interviews, conferences, etc.</para>
        </item>
      </itemize>
      <subsubheading>Corporate Behaviour</subsubheading>
      <para>The CentOS Project Corporate Behaviour is based on <emph>Community Behaviour</emph> which take place on <emph>Corporate Communication</emph>.</para>
      <subsubheading>Corporate Structure</subsubheading>
      <para>The CentOS Project Corporate Structure is based on a <emph>Monolithic Corporate Visual Identity Structure</emph>. In this configuration, one unique name and one unique visual style is used in all visual manifestation of The CentOS Project.</para>
      <para>In a monolithic corporate visual identity structure, internal and external stakeholders use to feel a strong sensation of uniformity, orientation, and identification with the organization. No matter if you are visiting web sites, using the distribution, or acting on social events, the one unique name and one unique visual style connects them all to say: <emph>Hey! we are all part of The CentOS Project</emph>.</para>
      <para>Other corporate structures for The CentOS Project have been considered as well. Such is the case of producing one different visual style for each major release of The CentOS Distribution. This structure isn't inconvenient at all, but some visual contradictions could be introduced if it isn't applied correctly and we need to be aware of it. To apply it correctly, we need to know what The CentOS Project is made of.</para>
      <para>The CentOS Project, as organization, is mainly made of (but not limited to) three visual manifestions: Distribution, Web and Showroom. Inside the Distribution visual manifestations, The CentOS Project maintains near to four different major releases of CentOS Distribution, parallely in time.  However, inside The CentOS Web visual manifestations, the content is produced for no specific release information (e.g., there is no a complete web site for each major release of The CentOS Distribution individually, but one web site to cover them all). Likewise, the content produced in The CentOS Showroom is created for no release-specific at all, but for The CentOS Project in general.</para>
      <para>In order to produce the correct corporate structure for The CentOS Project we need to concider all the visual manifestations The CentOS Project is made of, not just one of them.  If one different visual style is used for each major release of The CentOS Distribution, which one of those different visual styles would be used to cover the remaining visual manifestations The CentOS Project is made of (e.g., The CentOS Web and The CentOS Showroom)?</para>
      <para>Probably you are thinking, that's right, but The CentOS Brand connects them all already, why would we need to join them up into the same visual style too, isn't it more work to do, and harder to maintain?</para>
      <para>Harder to maintain, more work to do, probably. Specially when you consider that The CentOS Project has proven stability and consistency through time and, that, certainly, didn't come through swinging magical wands or something but hardly working out to automate tasks and providing maintainance through time. Said that, we consider that The CentOS Project Corporate Structure must be consequent with such stability and consistency tradition. It is true that The CentOS Brand does connect all the visual manifestations it is present on, but that connection would be stronger if one unique visual style backups it. In fact, whatever thing you do to strength the visual connection among The CentOS Project visual manifestations would be very good in favor of The CentOS Project recognition.</para>
      <para>Obviously, having just one visual style in all visual manifestations for eternity would be a very boring thing and would give the idea of a visually dead project. So, there is no problem on creating a brand new visual style for each new major release of The CentOS Distribution, in order to refresh The CentOS Distribution visual style; the problem itself is in not propagating the brand new visual style created for the new release of The CentOS Distribution to all other visual manifestations The CentOS Project is made of, in a way The CentOS Project could be recognized no matter what visual manifestation be in front of us. Such lack of uniformity is what introduces the visual contradition we are precisely trying to solve by mean of themes production in the CentOS Artwork Repository.</para>
      <subheading>Usage</subheading>
      <para>The <file>trunk/Identity</file> directory structure organizes most files used to build and implement The CentOS Project Corporate Identity. In that sake, the following work lines are available:</para>
      <table>
        <tableitem>
          <tableterm><strong>Brushes</strong></tableterm>
          <item>
            <para>This work line provides brushes for GIMP. When you prepare the repository, brushes in this location are made available immediatly for you to use in the &ldquo;Brushes&rdquo; panel of GIMP.</para>
            <para>See <xref><xrefnodename>Directories trunk Identity Brushes</xrefnodename></xref>, for more information.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><strong>Fonts</strong></tableterm>
          <item>
            <para>This work line provides the typography information required by all different visual manifestations of The CentOS Project. When you prepare the repository, fonts in this location are made available immediatly for you to use in GIMP and Inkscape.</para>
            <para>See <xref><xrefnodename>Directories trunk Identity Fonts</xrefnodename></xref>, for more information.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><strong>Images</strong></tableterm>
          <item>
            <para>This work line provides output location for final images that don't need to use background images (e.g., brands, icons, illustrations, etc.).</para>
            <para>See <xref><xrefnodename>Directories trunk Identity Images</xrefnodename></xref>, for more information.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><strong>Models</strong></tableterm>
          <item>
            <para>This work line provides design models for final images that don't need to use background images (e.g., brands, icons, illustrations, etc.).</para>
            <para>See <xref><xrefnodename>Directories trunk Identity Models</xrefnodename></xref>, for more information.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><strong>Palettes</strong></tableterm>
          <item>
            <para>This work line provides palettes of colors for GIMP and Inkscape. When you prepare the repository, palettes of colors in this location are made available immediatly for you to use in the &ldquo;Palettes&rdquo; panel of GIMP and Inkscape.</para>
            <para>See <xref><xrefnodename>Directories trunk Identity Palettes</xrefnodename></xref>, for more information.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><strong>Patterns</strong></tableterm>
          <item>
            <para>This work line provides patterns for GIMP. When you prepare the repository, patterns in this location are made available immediatly for you to use in the &ldquo;Patterns&rdquo; panel of GIMP.</para>
            <para>See <xref><xrefnodename>Directories trunk Identity Patterns</xrefnodename></xref>, for more information.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><strong>Themes</strong></tableterm>
          <item>
            <para>This work line provides theme design models and theme artistic motifs for The CentOS Project. If you are interested in creating brand new visual styles for The CentOS Project this is the place for you.</para>
            <para>See <xref><xrefnodename>Directories trunk Identity Themes</xrefnodename></xref>, for more information.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><strong>Webenv</strong></tableterm>
          <item>
            <para>This work line provides the HTML/XHTML and CSS standard definitions used by The CentOS Web visual manifestation. If you are a web developer and plan to improve The CentOS Web visual manifestation, then the files in this location may result very useful to you.</para>
            <para>See <xref><xrefnodename>Directories trunk Identity Webenv</xrefnodename></xref>, for more information.</para>
          </item>
        </tableitem>
      </table>
      <subheading>See also</subheading>
      <para>See <uref><urefurl>http://en.wikipedia.org/Corporate_identity</urefurl></uref> (and related links), for general information on Corporate Identity.</para>
      <para>Specially useful has been, and still is, the book <emph>Corporate Identity</emph> by Wally Olins (1989). This book provides many of the conceptual ideas we've used as base to build The CentOS Artwork Repository.</para>
    </section>
  </node>
  <node>
    <nodename>Directories trunk Identity Brushes</nodename>
    <nodenext>Directories trunk Identity Fonts</nodenext>
    <nodeprev>Directories trunk Identity</nodeprev>
    <nodeup>Directories</nodeup>
    <section>
      <title>The <file>trunk/Identity/Brushes</file> Directory</title>
      <para><indexterm index="cp">Directories trunk Identity Brushes</indexterm></para>
      <subheading>Goals</subheading>
      <para>This section describes how brushes are organized in the repository and how to make them available for you to use in <acronym><acronymword>GIMP</acronymword><acronymdesc>GNU Image Manipulation Program</acronymdesc></acronym>.</para>
      <subheading>Description</subheading>
      <para>A brush is a pixmap or set of pixmaps used for painting through an image manipulation program like GIMP.  Inside the repository, we've organized brushes in <emph>common brushes</emph> and <emph>theme-specific brushes</emph>.  In both cases, brushes are initially created in <file>.xcf</file> format and later exported to any of the brush formats recognized by GIMP (e.g., <file>.gbr</file> or <file>.gih</file>) using the same name of its source file.</para>
      <float name="Brush file format and directory structure">
        <floattype>Figure</floattype>
        <floatpos></floatpos>
        <verbatim xml:space="preserve"><![CDATA[
1. Common brushes       2. Theme-specific brushes
----------------------  -----------------------------------------------------------
trunk/Identity/Brushes  trunk/Identity/Themes/Motifs/THEMENAME/THEMEVERSION/Brushes
|-- Xcf                 |-- Xcf
|   |-- 1.xcf           |   |-- 1.xcf
|   |-- 2.xcf           |   |-- 2.xcf
|   `-- 3.xcf           |   `-- 3.xcf
|-- 1.gbr               |-- 1.gbr
|-- 2.gih               |-- 2.gih
`-- 3.gbr               `-- 3.gbr
]]></verbatim>
        <caption>Brush file format and directory structure.</caption>
      </float>
      <para>In order for both common brushes and theme-specific brushes to be loaded by GIMP, related <file>.gbr</file> and <file>.gih</file> brush files need to be stored under <file>~/.gimp-2.2/brushes</file> directory. This location is out of CentOS Artwork Repository and provides no version control by itself. This way, brushes aren't exported to this location but into the repository directory structure which is versioned. Later, we create symbolic links in <file>~/.gimp-2.2/brushes</file> to connect file brushes inside the repository and, this way, provide the configuration needed by GIMP to use the brush files produced inside the repository.</para>
      <quotation>
        <para><strong>Warning</strong> When brushes are added to or removed from the repository, you need to update your working copy and all information related to brushes inside your workstation (e.g., brush links in <file>~/.gimp-2.2/brushes</file> and the Brushes panel in GIMP).  Otherwise, you may end up with broken links or brushes in the repository that wouldn't be available for you to use in GIMP.</para>
      </quotation>
      <para>Inside the repository, common brushes and theme-specific brushes are created individually in different locations, but they all are linked from one unique location (i.e., <file>~/.gimp-2.2/brushes</file>).  This configuration may provoke brush overlapping if a name convenction is not implemented correctly.  In that sake, file names used for brushes inside the repository must be unique, no matter where they be.</para>
      <para>As file name convenction inside the repository, brushes are named using lowercase letters, numbers, minus characters and dot characters, only.  Additionally, when links are built, we use one suffix for those brushes retrived from <file>trunk/Identity/Brushes</file> and another suffix for those brushes retrivided from theme-specific directories.  Using both the brush file name and the suffix information,  it is possible to build unique names for links under <file>~/.gimp-2.2/brushes</file> directory, scalably.</para>
      <float name="Common brushes path relation">
        <floattype>Figure</floattype>
        <floatpos></floatpos>
        <verbatim xml:space="preserve"><![CDATA[
trunk/Identity/Brushes
|-- 1.gbr (file) <-- ~/.gimp-2.2/brushes/centos-1.gbr (link)
|-- 2.gbr (file) <-- ~/.gimp-2.2/brushes/centos-2.gbr (link)
`-- 3.gbr (file) <-- ~/.gimp-2.2/brushes/centos-3.gbr (link)
]]></verbatim>
        <caption>Common brushes path relation.</caption>
      </float>
      <float name="Theme-specific brushes path relation">
        <floattype>Figure</floattype>
        <floatpos></floatpos>
        <verbatim xml:space="preserve"><![CDATA[
trunk/Identity/Themes/Motifs/THEMENAME/THEMEVERSION/Brushes
|-- 1.gbr (file) <-- ~/.gimp-2.2/brushes/centos-THEMENAME-THEMEVERSION-1.gbr (link)
|-- 2.gbr (file) <-- ~/.gimp-2.2/brushes/centos-THEMENAME-THEMEVERSION-2.gbr (link)
`-- 3.gbr (file) <-- ~/.gimp-2.2/brushes/centos-THEMENAME-THEMEVERSION-3.gbr (link)
]]></verbatim>
        <caption>Theme-specific brushes path relation.</caption>
      </float>
      <para>Brushes produced with GIMP has a description field associated that is shown in the Brushes panel of GIMP.  This description is set when the brush is created as <file>.xcf</file> file and can be updated when it is exported either to <file>.gbr</file> or <file>.gih</file> format. It wouldn't be too useful to have two or more brushes using the same description so, we also make description of brush files unique, too. In that sake, we use the same name schema used to name brush links as description but without including the file extension (e.g., if we have the <file>centos-flame-3.gbr</file> brush, its description would be <code>centos-flame-3</code>).</para>
      <subheading>Usage</subheading>
      <para>The way you use brushes is up to your creativeness. However, the way brushes are made available needs to be standardized. That's the reason of organizing brushes in common brushes and theme-specific brushes.</para>
      <subheading>Common brushes</subheading>
      <para>Common brushes exist to organize brushes that can be used anywhere inside the repository. Inside the repository, common brushes under <file>trunk/Identity/Brushes</file> are mainly used to hold brand information related to The CentOS Project (e.g., symbols, logos, trademarks, etc.).</para>
      <para>Common brushes are always made available under <file>~/.gimp-2.2/brushes</file> directory after preparing the repository (see <xref><xrefnodename>Directories trunk Scripts Functions Prepare</xrefnodename></xref>).</para>
      <subheading>Theme-specific brushes</subheading>
      <para>Theme-specific brushes exist to organize brushes that can be used inside specific artistic motifs only. Inside the repository, theme-specific brushes are stored in a directory named <file>Brushes</file> which is stored in the first directory level under the artistic motif directory structure. Each artistic motif inside the repository has its own <file>Brushes</file> directory and uses it to store brushes that can be considered auxiliars to that artistic motif construction.</para>
      <para>Theme-specific brushes aren't made available under <file>~/.gimp-2.2/brushes</file> directory after preparing the repository. In order to make theme-specific brushes available under <file>~/.gimp-2.2./brushes</file> it is required to activate/deactivate them using the <code>theme</code> functionality of <command>centos-art.sh</command> script. 
<!-- (@pxref{Directories trunk Scripts Functions Theme}). --></para>
      <subheading>See also</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para><uref><urefurl>file:///usr/share/gimp/2.0/help/en/index.html</urefurl><urefdesc>The Gimp Manual</urefdesc></uref>, specifically the section related to <uref><urefurl>file:///usr/share/gimp/2.0/help/en/gimp-concepts-brushes.html</urefurl><urefdesc>Brushes</urefdesc></uref>.</para>
        </item>
      </itemize>
    </section>
  </node>
  <node>
    <nodename>Directories trunk Identity Fonts</nodename>
    <nodenext>Directories trunk Identity Images</nodenext>
    <nodeprev>Directories trunk Identity Brushes</nodeprev>
    <nodeup>Directories</nodeup>
    <section>
      <title>The <file>trunk/Identity/Fonts</file> Directory</title>
      <para><indexterm index="cp">Directories trunk Identity Fonts</indexterm></para>
      <subheading>Goals</subheading>
      <para>This section describes how typographies are organized in the repository and how to make them available for you to use in <acronym><acronymword>GIMP</acronymword><acronymdesc>GNU Image Manipulation Program</acronymdesc></acronym> and Inkscape.</para>
      <subheading>Description</subheading>
      <para>The CentOS Project Corporate Identity is attached to <samp>DejaVu LGC</samp> font-family and <samp>Denmark</samp> font-family.</para>
      <float name="DejaVu LGC font family">
        <floattype>Figure</floattype>
        <floatpos></floatpos>
        <image width="430pt" height="" name="trunk/Identity/Images/Manual/Fonts/dejavu-lgc" extension="jpg"><alttext></alttext></image>
        <caption>DejaVu-LGC font-family.</caption>
      </float>
      <float name="Denmark font family">
        <floattype>Figure</floattype>
        <floatpos></floatpos>
        <image width="430pt" height="" name="trunk/Identity/Images/Manual/Fonts/denmark" extension="jpg"><alttext></alttext></image>
        <caption>Denmark font-family.</caption>
      </float>
      <quotation>
        <para><strong>Caution</strong> The copyright and license of <samp>Denmark</samp> typography aren't very specific and that issue may represent a threat to The CentOS Project Corporate Identity.</para>
      </quotation>
      <para>The <samp>Denmark</samp> typography is used as base to build The CentOS Logo (i.e., the main graphic design that connects/identifies all visual manifestations related to The CentOS Project). If the typography used to build The CentOS Logo is compromised somehow, the whole corporate visual identity it represents would be compromised, as well. To prevent such issues, it would be better for The CentOS Project to move on from <samp>Denmark</samp> typography to another typography (free, preferably) that retain the same visual style of <samp>Denmark</samp>, but intruce a clearer copyright and license notice.</para>
      <subheading>Usage</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>See <xref><xrefnodename>Directories trunk Identity Models Brands</xrefnodename></xref>.</para>
        </item>
      </itemize>
      <subheading>See also</subheading>
    </section>
  </node>
  <node>
    <nodename>Directories trunk Identity Images</nodename>
    <nodenext>Directories trunk Identity Models</nodenext>
    <nodeprev>Directories trunk Identity Fonts</nodeprev>
    <nodeup>Directories</nodeup>
    <section>
      <title>The <file>trunk/Identity/Images</file> Directory</title>
      <para><indexterm index="cp">Directories trunk Identity Images</indexterm></para>
      <subheading>Goals</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>...</para>
        </item>
      </itemize>
      <subheading>Description</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>...</para>
        </item>
      </itemize>
      <subheading>Usage</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>...</para>
        </item>
      </itemize>
      <subheading>See also</subheading>
      <menu>
      </menu>
    </section>
  </node>
  <node>
    <nodename>Directories trunk Identity Models</nodename>
    <nodenext>Directories trunk Identity Models Brands</nodenext>
    <nodeprev>Directories trunk Identity Images</nodeprev>
    <nodeup>Directories</nodeup>
    <section>
      <title>The <file>trunk/Identity/Models</file> Directory</title>
      <para><indexterm index="cp">Directories trunk Identity Models</indexterm></para>
      <subheading>Goals</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>...</para>
        </item>
      </itemize>
      <subheading>Description</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>...</para>
        </item>
      </itemize>
      <subheading>Usage</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>&dots;</para>
        </item>
      </itemize>
      <subheading>See also</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>...</para>
        </item>
      </itemize>
    </section>
  </node>
  <node>
    <nodename>Directories trunk Identity Models Brands</nodename>
    <nodenext>Directories trunk Identity Palettes</nodenext>
    <nodeprev>Directories trunk Identity Models</nodeprev>
    <nodeup>Directories</nodeup>
    <section>
      <title>The <file>trunk/Identity/Models/Brands</file> Directory</title>
      <para><indexterm index="cp">Directories trunk Identity Models Brands</indexterm></para>
      <subheading>Goals</subheading>
      <para>This section describes The CentOS Brand design models.</para>
      <subheading>Description</subheading>
      <para>The CentOS Brand provides the one unique name or trademark that connects the producer with their products. In this case, the producer is The CentOS Project and the products are The CentOS Project visual manifestations.</para>
      <para>The CentOS Brand is the main visual representation of the CentOS project so the typography used in it must be the same always, no matter where it be shown. It also has to be clear enough to dismiss any confussion between similar typefaces (e.g., the number one (1) sometimes is confuesed with the letter <samp>el</samp> (l) or letter <samp>ai</samp> (i)).</para>
      <para>As convenction, the word <samp>CentOS</samp> uses <samp>Denmark</samp> typography as base, both for the word <samp>CentOS</samp> and the phrase <samp>Community Enterprise Operating System</samp>. The phrase size of CentOS logo is half the size in poits the word <samp>CentOS</samp> has and it below <samp>CentOS</samp> word and aligned with it on the left.  The distance between <samp>CentOS</samp> word and phrase <samp>Community Enterprise Operating System</samp> have the size in points the phrase has.</para>
      <float name="The CentOS logo construction">
        <floattype>Figure</floattype>
        <floatpos></floatpos>
        <image width="" height="" name="trunk/Identity/Images/Manual/Brands/Logos/a" extension=""><alttext></alttext></image>
        <caption>The CentOS logo construction</caption>
      </float>
      <para>When the CentOS release brand is built, use <samp>Denmark</samp> typography for the release number. The release number size is two times larger (in height) than default <samp>CentOS</samp> word. The separation between release number and <samp>CentOS</samp> word is twice the size in points of separation between <samp>CentOS</samp> word and phrase <samp>Community Enterprise Operating System</samp>.</para>
      <para>Another component inside CentOS logo is the trademark symbol (TM). This symbol specifies that the CentOS logo must be consider a product brand, even it is not a registered one. The trademark symbol uses DejaVu LGC Sans Regular typography. The trademark symbol is aligned right-top on the outter side of <samp>CentOS</samp> word. The trademark symbol must not exceed haf the distance, in points, between <samp>CentOS</samp> word and the release number on its right.</para>
      <para>It would be very convenient for the CentOS Project and its community to to make a registered trademark (®) of CentOS logo. To make a register trademark of CentOS Logo prevents legal complications in the market place of brands. It grants the consistency, through time, of CentOS project corporate visual identity.</para>
      <quotation>
        <para><strong>Note</strong> The information about trademarks and corporate identity is my personal interpretation of <uref><urefurl>http://en.wikipedia.org/Corporate_identity</urefurl></uref> and <uref><urefurl>http://en.wikipedia.org/Trademark</urefurl></uref> description. If you have practical experiences with these affairs, please serve yourself to improve this section with your reasons.</para>
      </quotation>
      <subheading>Usage</subheading>
      <subheading>See also</subheading>
      <menu>
      </menu>
    </section>
  </node>
  <node>
    <nodename>Directories trunk Identity Palettes</nodename>
    <nodenext>Directories trunk Identity Patterns</nodenext>
    <nodeprev>Directories trunk Identity Models Brands</nodeprev>
    <nodeup>Directories</nodeup>
    <section>
      <title>The <file>trunk/Identity/Palettes</file> Directory</title>
      <para><indexterm index="cp">Directories trunk Identity Palettes</indexterm></para>
      <subheading>Goals</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>...</para>
        </item>
      </itemize>
      <subheading>Description</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>...</para>
        </item>
      </itemize>
      <subheading>Usage</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>...</para>
        </item>
      </itemize>
      <subheading>See also</subheading>
      <menu>
      </menu>
    </section>
  </node>
  <node>
    <nodename>Directories trunk Identity Patterns</nodename>
    <nodenext>Directories trunk Identity Themes</nodenext>
    <nodeprev>Directories trunk Identity Palettes</nodeprev>
    <nodeup>Directories</nodeup>
    <section>
      <title>The <file>trunk/Identity/Patterns</file> Directory</title>
      <para><indexterm index="cp">Directories trunk Identity Patterns</indexterm></para>
      <subheading>Goals</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>...</para>
        </item>
      </itemize>
      <subheading>Description</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>...</para>
        </item>
      </itemize>
      <subheading>Usage</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>...</para>
        </item>
      </itemize>
      <subheading>See also</subheading>
      <menu>
      </menu>
    </section>
  </node>
  <node>
    <nodename>Directories trunk Identity Themes</nodename>
    <nodenext>Directories trunk Identity Themes Models</nodenext>
    <nodeprev>Directories trunk Identity Patterns</nodeprev>
    <nodeup>Directories</nodeup>
    <section>
      <title>The <file>trunk/Identity/Themes</file> Directory</title>
      <para><indexterm index="cp">Directories trunk Identity Themes</indexterm></para>
      <subheading>Goals</subheading>
      <para>The <file>trunk/Identity/Themes/</file> directory exists to organize production of CentOS themes.</para>
      <subheading>Description</subheading>
      <para>Initially, we start working themes on their trunk development line (e.g., <file>trunk/Identity/Themes/Motifs/TreeFlower/</file>), here we organize information that cannot be produced automatically (i.e., background images, concepts, color information, screenshots, etc.).</para>
      <para>Later, when theme trunk development line is considered &ldquo;ready&rdquo; for implementation (e.g.,  all required backgrounds have been designed), we create a branch for it (e.g., <file>branches/Identity/Themes/Motifs/TreeFlower/1/</file>).  Once the branch has been created, we forget that branch and continue working the trunk development line while others (e.g., an artwork quality assurance team) test the new branch for tunning it up.</para>
      <para>Once the branch has been tunned up, and considered &ldquo;ready&rdquo; for release, it is freezed under <file>tags/</file> directory (e.g., <file>tags/Identity/Themes/Motifs/TreeFower/1.0/</file>) for packagers, webmasters, promoters, and anyone who needs images from that CentOS theme the tag was created for.</para>
      <para>Both branches and tags, inside CentOS Artwork Repository, use numerical values to identify themselves under the same location. Branches start at one (i.e., <samp>1</samp>) and increment one unit for each branch created from the same trunk development line.  Tags start at zero (i.e., <samp>0</samp>) and increment one unit for each tag created from the same branch development line.</para>
      <quotation>
        <para><strong>Convenction</strong> Do not freeze trunk development lines using tags directly.  If you think you need to freeze a trunk development line, create a branch for it and then freeze that branch instead.</para>
      </quotation>
      <para>The trunk development line may introduce problems we cannot see immediatly. Certainly, the high changable nature of trunk development line complicates finding and fixing such problems. On the other hand, the branched development lines provide a more predictable area where only fixes/corrections to current content are commited up to repository.</para>
      <para>If others find and fix bugs inside the branched development line, we could merge such changes/experiences back to trunk development line (not visversa) in order for future branches, created from trunk, to benefit.</para>
      <para>Time intervals used to create branches and tags may vary, just as different needs may arrive. For example, consider the release schema of CentOS distribution: one major release every 2 years, security updates every 6 months, support for 7 years long. Each time a CentOS distribution is released, specially if it is a major release, there is a theme need in order to cover CentOS distribution artwork requirements. At this point, is where CentOS Artwork Repository comes up to scene.</para>
      <para>Before releasing a new major release of CentOS distribution we create a branch for one of several theme development lines available inside the CentOS Artwork Repository, perform quality assurance on it, and later, freeze that branch using tags. Once a the theme branch has been frozen (under <file>tags/</file> directory), CentOS Packagers (the persons whom build CentOS distribution) can use that frozen branch as source location to fulfill CentOS distribution artwork needs. The same applies to CentOS Webmasters (the persons whom build CentOS websites), and any other visual manifestation required by the project.</para>
      <subheading>Usage</subheading>
      <para>In this location themes are organized in &ldquo;Models&rdquo; &mdash;to store common information&mdash; and &ldquo;Motifs&rdquo;&mdash;to store unique information.  At rendering time, both motifs and models are combined to produce the final CentOS themes.  CentOS themes can be tagged as &ldquo;Default&rdquo; or &ldquo;Alternative&rdquo;. CentOS themes are maintained by CentOS community.</para>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>See <xref><xrefnodename>Directories trunk Identity Themes Models</xrefnodename></xref>.</para>
        </item>
        <item>
          <para>See <xref><xrefnodename>Directories trunk Identity Themes Motifs</xrefnodename></xref>.</para>
        </item>
      </itemize>
      <subheading>See also</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para><xref><xrefnodename>Directories trunk Identity</xrefnodename></xref>.</para>
        </item>
        <item>
          <para><xref><xrefnodename>Directories trunk</xrefnodename></xref>.</para>
        </item>
      </itemize>
    </section>
  </node>
  <node>
    <nodename>Directories trunk Identity Themes Models</nodename>
    <nodenext>Directories trunk Identity Themes Models Default</nodenext>
    <nodeprev>Directories trunk Identity Themes</nodeprev>
    <nodeup>Directories</nodeup>
    <section>
      <title>The <file>trunk/Identity/Themes/Models</file> Directory</title>
      <para><indexterm index="cp">Directories trunk Identity Themes Models</indexterm></para>
      <subheading>Goals</subheading>
      <para>This section describes design models from The CentOS Themes.</para>
      <subheading>Description</subheading>
      <para>Theme models let you modeling characteristics (e.g., dimensions, translation markers, position of each element on the display area, etc.) common to all themes.  Theme models let you reduce the time needed when propagating artistic motifs to different visual manifestations.</para>
      <para>Theme models serves as a central pool of design templates for themes to use. This way you can produce themes with different artistic motifs but same characteristics.</para>
      <subsubheading>Default Design Model</subsubheading>
      <para>Default Design Models for CentOS Themes provide the common structural information (e.g., image dimensions, translation markers, trademark position, etc.) the <command>centos-art</command> script uses to produce images when no other design model is specified.</para>
      <subsubheading>Alternative Design Models</subsubheading>
      <para>CentOS alternative theme models exist for people how want to use a different visual style on their installations of CentOS distribution. As the visual style is needed for a system already installed components like Anaconda are not required inside alternative themes. Inside alternative themes you find post-installation visual style only (i.e.  Backgrounds, Display Managers, Grub, etc.).  CentOS alternative themes are maintained by CentOS Community.</para>
      <subheading>Usage</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>See <xref><xrefnodename>Directories trunk Identity Themes Models Default</xrefnodename></xref>.</para>
        </item>
      </itemize>
      <subheading>See also</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para><xref><xrefnodename>Directories trunk Identity Themes</xrefnodename></xref>.</para>
        </item>
        <item>
          <para><xref><xrefnodename>Directories trunk Identity</xrefnodename></xref>.</para>
        </item>
        <item>
          <para><xref><xrefnodename>Directories trunk</xrefnodename></xref>.</para>
        </item>
      </itemize>
    </section>
  </node>
  <node>
    <nodename>Directories trunk Identity Themes Models Default</nodename>
    <nodenext>Directories trunk Identity Themes Models Default Concept</nodenext>
    <nodeprev>Directories trunk Identity Themes Models</nodeprev>
    <nodeup>Directories</nodeup>
    <section>
      <title>The <file>trunk/Identity/Themes/Models/Default</file> Directory</title>
      <para><indexterm index="cp">Directories trunk Identity Themes Models Default</indexterm></para>
      <subheading>Goals</subheading>
      <para>This section describes the default design model of The CentOS Themes.</para>
      <subheading>Description</subheading>
      <para>The <file>trunk/Identity/Themes/Models/Default</file> directory implements the concept of <emph>Default Design Model</emph> for The CentOS Themes.  The CentOS Themes Default Design Model provides the common structural information (e.g., image dimensions, translation markers, trademark position, etc.) the <command>centos-art</command> script uses to produce images when no other design model is specified.</para>
      <para>Deisgn models in this directory do use the <emph>CentOS Release Brand</emph>. The CentOS Release Brand is a combination of both The CentOS Type and The CentOS Release Schema used to illustrate the major release of The CentOS Distribution the image produced belongs to.  &mdash; <strong>Removed</strong>(xref:Directories trunk Identity Models Tpl Brands) &mdash;, for more information.</para>
      <para>The CentOS Project maintains near to four different major releases of CentOS Distribution. Each major release of CentOS Distribution has internal differences that make them unique and, at the same time, each CentOS Distribution individually is tagged into the one unique visual manifestation (i.e., Distribution). So, how could we implement the monolithic visual structure in one visual manifestation that has internal difference?</para>
      <para>To answer this question we broke the question in two parts and later combined the resultant answers to build a possible solution.</para>
      <table>
        <tableitem>
          <tableterm><strong>How to remark the internal differences visually?</strong></tableterm>
          <item>
            <para>Merge both The CentOS Project Release Schema into The CentOS Project Trademark to build The CentOS Project Release Trademark.  The CentOS Project Release Trademark remarks two things: first, it remarks the image is from The CentOS Project and second, it remarks which major release of CentOS Distribution does the image belongs to. &mdash; <strong>Removed</strong>(xref:Directories trunk Identity Models Tpl Brands) &mdash;, for more information on how to develop and improve The CentOS Project Brand.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><strong>How to remark the visual resemblance?</strong></tableterm>
          <item>
            <para>Use a common artistic motifs as background for all CentOS Distribution images.  See <xref><xrefnodename>Directories trunk Identity Themes Motifs</xrefnodename></xref>, for more information.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><strong>So, combining answers above, we could conclude that:</strong></tableterm>
          <item>
            <para>In order to implement the CentOS Monolithic Visual Structure on CentOS Distribution visual manifestations, a CentOS Release Trademark and a background information based on one unique artistic motif should be used in all remarkable images The CentOS Distribution visual manifestation is made of.</para>
          </item>
        </tableitem>
      </table>
      <quotation>
        <para><strong>Important</strong> Remarking the CentOS Release Schema inside each major release of CentOS Distribution &mdash;or similar visual manifestations&mdash; takes <emph>high attention</emph> inside The CentOS Project corporate visual identity. It should be very clear for everyone which major release of CentOS Distribution is being used.</para>
      </quotation>
      <subheading>Usage</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>See <xref><xrefnodename>Directories trunk Identity Themes Models Default Distro</xrefnodename></xref>.</para>
        </item>
        <item>
          <para>See <xref><xrefnodename>Directories trunk Identity Themes Models Default Concept</xrefnodename></xref>.</para>
        </item>
      </itemize>
      <subheading>See also</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para><xref><xrefnodename>Directories trunk Identity Themes</xrefnodename></xref></para>
        </item>
        <item>
          <para><xref><xrefnodename>Directories trunk Identity Themes Models</xrefnodename></xref></para>
        </item>
        <item>
          <para><xref><xrefnodename>Directories trunk Identity Themes Motifs</xrefnodename></xref></para>
        </item>
      </itemize>
    </section>
  </node>
  <node>
    <nodename>Directories trunk Identity Themes Models Default Concept</nodename>
    <nodenext>Directories trunk Identity Themes Models Default Distro</nodenext>
    <nodeprev>Directories trunk Identity Themes Models Default</nodeprev>
    <nodeup>Directories</nodeup>
    <section>
      <title>The <file>trunk/Identity/Themes/Models/Default/Concept</file> Directory</title>
      <para><indexterm index="cp">Directories trunk Identity Themes Models Default Concept</indexterm></para>
      <subheading>Goals</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>...</para>
        </item>
      </itemize>
      <subheading>Description</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>...</para>
        </item>
      </itemize>
      <subheading>Usage</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>...</para>
        </item>
      </itemize>
      <subheading>See also</subheading>
      <menu>
      </menu>
    </section>
  </node>
  <node>
    <nodename>Directories trunk Identity Themes Models Default Distro</nodename>
    <nodenext>Directories trunk Identity Themes Models Default Distro 5</nodenext>
    <nodeprev>Directories trunk Identity Themes Models Default Concept</nodeprev>
    <nodeup>Directories</nodeup>
    <section>
      <title>The <file>trunk/Identity/Themes/Models/Default/Distro</file> Directory</title>
      <para><indexterm index="cp">Directories trunk Identity Themes Models Default Distro</indexterm></para>
      <subheading>Goals</subheading>
      <para>This section organizes default design models for different major releases of CentOS Distribution.</para>
      <subheading>Description</subheading>
      <para>In order to better understatand how this visual manifestation is organized, it is necessary to consider what The CentOS Distribution is and how it is released.</para>
      <subsubheading>The CentOS Distribution</subsubheading>
      <para>The CentOS Distribution is an Enterprise-class Linux Distribution derived from sources freely provided to the public by a prominent North American Enterprise Linux vendor. The CentOS Distribution conforms fully with the upstream vendors redistribution policy and aims to be 100% binary compatible. (The CentOS Project mainly changes packages to remove upstream vendor branding and artwork.)</para>
      <para>The CentOS Distribution is developed by a small but growing team of core developers.  In turn the core developers are supported by an active user community including system administrators, network administrators, enterprise users, managers, core Linux contributors and Linux enthusiasts from around the world.</para>
      <subsubheading>The CentOS Distribution Release Schema</subsubheading>
      <para>The upstream vendor has released 4 versions of their <acronym><acronymword>EL</acronymword><acronymdesc>Enterprise Linux</acronymdesc></acronym> product that The CentOS Project rebuilds the freely available SRPMS for.  The upstream vendor releases security updates as required by circumstances. The CentOS Project releases rebuilds of security updates as soon as possible. Usually within 24 hours (our stated goal is with 72 hours, but we are usually much faster).</para>
      <para>The upstream vendor also releases numbered update sets for major versions of their EL product from 2 to 4 times per year. There are new ISOs from the upstream vendor provided for these update sets.  Update sets will be completed as soon as possible after the upstream vendor releases their version &dots; generally within 2 weeks. The CentOS Project follows these conventions as well, so CentOS-3.9 correlates with EL 3 update 9 and CentOS-4.6 correlates with EL 4 update 6, CentOS-5.1 correlates to EL 5 update 1, etc.</para>
      <para>One thing some people have problems understanding is that if you have any CentOS-3 product and update it, you will be updated to the latest CentOS-3.x version.</para>
      <para>The same is true for CentOS-4 and CentOS-5. If you update any CentOS-4 product, you will be updated to the latest CentOS-4.x version, or to the latest CentOS-5.x version if you are updating a CentOS-5 system. This is exactly the same behavior as the upstream product.  Let's assume that the latest EL4 product is update 6. If you install the upstream original EL4 CDs (the ones before any update set) and upgrade via <command>yum</command>, you will have latest update set installed (EL4 update 6 in our example). Since all updates within a major release (CentOS-2, CentOS-3, CentOS-4, CentOS-5) always upgrade to the latest version when updates are performed (thus mimicking upstream behavior), only the latest version is maintained in each main tree on The CentOS Mirrors (<uref><urefurl>http://mirrors.centos.org/</urefurl></uref>).</para>
      <para>There is a CentOS Vault (<uref><urefurl>http://vault.centos.org/</urefurl></uref>) containing old CentOS trees. This vault is a picture of the older tree when it was removed from the main tree, and does not receive updates. It should only be used for reference.</para>
      <para>The CentOS Distribution visual style is controlled by image files. These image files are packaged inside The CentOS Distribution and made visible once such packages are installed and executed. The way to go for changing The CentOS Distribution visual style is changing all those image files to add the desired visual style first and later, repackage them to make them available inside the final iso files of CentOS Distribution.</para>
      <subheading>Usage</subheading>
      <para>Sometimes, between major releases, image files inside packages can be added, removed or just get the name changed. In order to describe such variations, the design models directory structure is organized in the same way the variations are introduced (i.e., through The CentOS Distribution Release Schema).  So, each major release of The CentOS Distribution has its own design model directory structure.</para>
      <para>When a new package/component is added to one or all the major releases of The CentOS Distribution, a design model directory structure for that component needs to be created. Later, it is filled up with related design models. Design models are created for each image file inside the component that need to be rebuilt in order to set the visual style and brand information correctly.</para>
      <para>When a package is removed from one or all major releases of The CentOS Distribution, the design model directory structure releated to that package/component is no longer used.  However, it could be very useful for historical reasons.  Also, someone could feel motivation enough to keep himself documenting it or supporting it for whatever reason.</para>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>See <xref><xrefnodename>Directories trunk Identity Themes Models Default Distro 5</xrefnodename></xref>.</para>
        </item>
      </itemize>
      <subheading>See also</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para><xref><xrefnodename>Directories trunk Identity Themes Models Default</xrefnodename></xref>.</para>
        </item>
        <item>
          <para><xref><xrefnodename>Directories trunk Identity Themes Models</xrefnodename></xref>.</para>
        </item>
        <item>
          <para><xref><xrefnodename>Directories trunk Identity Themes</xrefnodename></xref>.</para>
        </item>
        <item>
          <para><xref><xrefnodename>Directories trunk Identity</xrefnodename></xref>.</para>
        </item>
        <item>
          <para><xref><xrefnodename>Directories trunk</xrefnodename></xref>.</para>
        </item>
      </itemize>
    </section>
  </node>
  <node>
    <nodename>Directories trunk Identity Themes Models Default Distro 5</nodename>
    <nodenext>Directories trunk Identity Themes Models Default Distro 5 Anaconda</nodenext>
    <nodeprev>Directories trunk Identity Themes Models Default Distro</nodeprev>
    <nodeup>Directories</nodeup>
    <section>
      <title>The <file>trunk/Identity/Themes/Models/Default/Distro/5</file> Directory</title>
      <para><indexterm index="cp">Directories trunk Identity Themes Models Default Distro 5</indexterm></para>
      <subheading>Goals</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>...</para>
        </item>
      </itemize>
      <subheading>Description</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>...</para>
        </item>
      </itemize>
      <subheading>Usage</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>See <xref><xrefnodename>Directories trunk Identity Themes Models Default Distro 5 Syslinux</xrefnodename></xref>.</para>
        </item>
        <item>
          <para>See <xref><xrefnodename>Directories trunk Identity Themes Models Default Distro 5 Anaconda</xrefnodename></xref>.</para>
        </item>
        <item>
          <para>See <xref><xrefnodename>Directories trunk Identity Themes Models Default Distro 5 Rhgb</xrefnodename></xref>.</para>
        </item>
        <item>
          <para>See <xref><xrefnodename>Directories trunk Identity Themes Models Default Distro 5 Gdm</xrefnodename></xref>.</para>
        </item>
        <item>
          <para>See <xref><xrefnodename>Directories trunk Identity Themes Models Default Distro 5 Kdm</xrefnodename></xref>.</para>
        </item>
        <item>
          <para>See <xref><xrefnodename>Directories trunk Identity Themes Models Default Distro 5 Grub</xrefnodename></xref>.</para>
        </item>
        <item>
          <para>See <xref><xrefnodename>Directories trunk Identity Themes Models Default Distro 5 Gsplash</xrefnodename></xref>.</para>
        </item>
        <item>
          <para>See <xref><xrefnodename>Directories trunk Identity Themes Models Default Distro 5 Ksplash</xrefnodename></xref>.</para>
        </item>
      </itemize>
      <subheading>See also</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para><xref><xrefnodename>Directories trunk Identity Themes Models Default Distro</xrefnodename></xref>.</para>
        </item>
        <item>
          <para><xref><xrefnodename>Directories trunk Identity Themes Models Default</xrefnodename></xref>.</para>
        </item>
        <item>
          <para><xref><xrefnodename>Directories trunk Identity Themes Models</xrefnodename></xref>.</para>
        </item>
        <item>
          <para><xref><xrefnodename>Directories trunk Identity Themes</xrefnodename></xref>.</para>
        </item>
        <item>
          <para><xref><xrefnodename>Directories trunk Identity</xrefnodename></xref>.</para>
        </item>
        <item>
          <para><xref><xrefnodename>Directories trunk</xrefnodename></xref>.</para>
        </item>
      </itemize>
    </section>
  </node>
  <node>
    <nodename>Directories trunk Identity Themes Models Default Distro 5 Anaconda</nodename>
    <nodenext>Directories trunk Identity Themes Models Default Distro 5 Firstboot</nodenext>
    <nodeprev>Directories trunk Identity Themes Models Default Distro 5</nodeprev>
    <nodeup>Directories</nodeup>
    <section>
      <title>The <file>trunk/Identity/Themes/Models/Default/Distro/5/Anaconda</file> Directory</title>
      <para><indexterm index="cp">Directories trunk Identity Themes Models Default Distro 5 Anaconda</indexterm></para>
      <subheading>Goals</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>...</para>
        </item>
      </itemize>
      <subheading>Description</subheading>
      <subheading>Usage</subheading>
      <subheading>See also</subheading>
      <menu>
      </menu>
    </section>
  </node>
  <node>
    <nodename>Directories trunk Identity Themes Models Default Distro 5 Firstboot</nodename>
    <nodenext>Directories trunk Identity Themes Models Default Distro 5 Gdm</nodenext>
    <nodeprev>Directories trunk Identity Themes Models Default Distro 5 Anaconda</nodeprev>
    <nodeup>Directories</nodeup>
    <section>
      <title>The <file>trunk/Identity/Themes/Models/Default/Distro/5/Firstboot</file> Directory</title>
      <para><indexterm index="cp">Directories trunk Identity Themes Models Default Distro 5 Firstboot</indexterm></para>
      <subheading>Goals</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>...</para>
        </item>
      </itemize>
      <subheading>Description</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>...</para>
        </item>
      </itemize>
      <subheading>Usage</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>...</para>
        </item>
      </itemize>
      <subheading>See also</subheading>
      <menu>
      </menu>
    </section>
  </node>
  <node>
    <nodename>Directories trunk Identity Themes Models Default Distro 5 Gdm</nodename>
    <nodenext>Directories trunk Identity Themes Models Default Distro 5 Grub</nodenext>
    <nodeprev>Directories trunk Identity Themes Models Default Distro 5 Firstboot</nodeprev>
    <nodeup>Directories</nodeup>
    <section>
      <title>The <file>trunk/Identity/Themes/Models/Default/Distro/5/Gdm</file> Directory</title>
      <para><indexterm index="cp">Directories trunk Identity Themes Models Default Distro 5 Gdm</indexterm></para>
      <subheading>Goals</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>...</para>
        </item>
      </itemize>
      <subheading>Description</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>...</para>
        </item>
      </itemize>
      <subheading>Usage</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>...</para>
        </item>
      </itemize>
      <subheading>See also</subheading>
      <menu>
      </menu>
    </section>
  </node>
  <node>
    <nodename>Directories trunk Identity Themes Models Default Distro 5 Grub</nodename>
    <nodenext>Directories trunk Identity Themes Models Default Distro 5 Gsplash</nodenext>
    <nodeprev>Directories trunk Identity Themes Models Default Distro 5 Gdm</nodeprev>
    <nodeup>Directories</nodeup>
    <section>
      <title>The <file>trunk/Identity/Themes/Models/Default/Distro/5/Grub</file> Directory</title>
      <para><indexterm index="cp">Directories trunk Identity Themes Models Default Distro 5 Grub</indexterm></para>
      <subheading>Goals</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>...</para>
        </item>
      </itemize>
      <subheading>Description</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>...</para>
        </item>
      </itemize>
      <subheading>Usage</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>...</para>
        </item>
      </itemize>
      <subheading>See also</subheading>
      <menu>
      </menu>
    </section>
  </node>
  <node>
    <nodename>Directories trunk Identity Themes Models Default Distro 5 Gsplash</nodename>
    <nodenext>Directories trunk Identity Themes Models Default Distro 5 Kdm</nodenext>
    <nodeprev>Directories trunk Identity Themes Models Default Distro 5 Grub</nodeprev>
    <nodeup>Directories</nodeup>
    <section>
      <title>The <file>trunk/Identity/Themes/Models/Default/Distro/5/Gsplash</file> Directory</title>
      <para><indexterm index="cp">Directories trunk Identity Themes Models Default Distro 5 Gsplash</indexterm></para>
      <subheading>Goals</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>...</para>
        </item>
      </itemize>
      <subheading>Description</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>...</para>
        </item>
      </itemize>
      <subheading>Usage</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>...</para>
        </item>
      </itemize>
      <subheading>See also</subheading>
      <menu>
      </menu>
    </section>
  </node>
  <node>
    <nodename>Directories trunk Identity Themes Models Default Distro 5 Kdm</nodename>
    <nodenext>Directories trunk Identity Themes Models Default Distro 5 Ksplash</nodenext>
    <nodeprev>Directories trunk Identity Themes Models Default Distro 5 Gsplash</nodeprev>
    <nodeup>Directories</nodeup>
    <section>
      <title>The <file>trunk/Identity/Themes/Models/Default/Distro/5/Kdm</file> Directory</title>
      <para><indexterm index="cp">Directories trunk Identity Themes Models Default Distro 5 Kdm</indexterm></para>
      <subheading>Goals</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>...</para>
        </item>
      </itemize>
      <subheading>Description</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>...</para>
        </item>
      </itemize>
      <subheading>Usage</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>...</para>
        </item>
      </itemize>
      <subheading>See also</subheading>
      <menu>
      </menu>
    </section>
  </node>
  <node>
    <nodename>Directories trunk Identity Themes Models Default Distro 5 Ksplash</nodename>
    <nodenext>Directories trunk Identity Themes Models Default Distro 5 Rhgb</nodenext>
    <nodeprev>Directories trunk Identity Themes Models Default Distro 5 Kdm</nodeprev>
    <nodeup>Directories</nodeup>
    <section>
      <title>The <file>trunk/Identity/Themes/Models/Default/Distro/5/Ksplash</file> Directory</title>
      <para><indexterm index="cp">Directories trunk Identity Themes Models Default Distro 5 Ksplash</indexterm></para>
      <subheading>Goals</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>...</para>
        </item>
      </itemize>
      <subheading>Description</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>...</para>
        </item>
      </itemize>
      <subheading>Usage</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>...</para>
        </item>
      </itemize>
      <subheading>See also</subheading>
      <menu>
      </menu>
    </section>
  </node>
  <node>
    <nodename>Directories trunk Identity Themes Models Default Distro 5 Rhgb</nodename>
    <nodenext>Directories trunk Identity Themes Models Default Distro 5 Syslinux</nodenext>
    <nodeprev>Directories trunk Identity Themes Models Default Distro 5 Ksplash</nodeprev>
    <nodeup>Directories</nodeup>
    <section>
      <title>The <file>trunk/Identity/Themes/Models/Default/Distro/5/Rhgb</file> Directory</title>
      <para><indexterm index="cp">Directories trunk Identity Themes Models Default Distro 5 Rhgb</indexterm></para>
      <subheading>Goals</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>...</para>
        </item>
      </itemize>
      <subheading>Description</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>...</para>
        </item>
      </itemize>
      <subheading>Usage</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>...</para>
        </item>
      </itemize>
      <subheading>See also</subheading>
      <menu>
      </menu>
    </section>
  </node>
  <node>
    <nodename>Directories trunk Identity Themes Models Default Distro 5 Syslinux</nodename>
    <nodenext>Directories trunk Identity Themes Models Default Posters</nodenext>
    <nodeprev>Directories trunk Identity Themes Models Default Distro 5 Rhgb</nodeprev>
    <nodeup>Directories</nodeup>
    <section>
      <title>The <file>trunk/Identity/Themes/Models/Default/Distro/5/Syslinux</file> Directory</title>
      <para><indexterm index="cp">Directories trunk Identity Themes Models Default Distro 5 Syslinux</indexterm></para>
      <subheading>Goals</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>...</para>
        </item>
      </itemize>
      <subheading>Description</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>...</para>
        </item>
      </itemize>
      <subheading>Usage</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>...</para>
        </item>
      </itemize>
      <subheading>See also</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>...</para>
        </item>
      </itemize>
    </section>
  </node>
  <node>
    <nodename>Directories trunk Identity Themes Models Default Posters</nodename>
    <nodenext>Directories trunk Identity Themes Motifs</nodenext>
    <nodeprev>Directories trunk Identity Themes Models Default Distro 5 Syslinux</nodeprev>
    <nodeup>Directories</nodeup>
    <section>
      <title>The <file>trunk/Identity/Themes/Models/Default/Posters</file> Directory</title>
      <para><indexterm index="cp">Directories trunk Identity Themes Models Default Posters</indexterm></para>
      <subheading>Goals</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>...</para>
        </item>
      </itemize>
      <subheading>Description</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>...</para>
        </item>
      </itemize>
      <subheading>Usage</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>...</para>
        </item>
      </itemize>
      <subheading>See also</subheading>
      <menu>
      </menu>
    </section>
  </node>
  <node>
    <nodename>Directories trunk Identity Themes Motifs</nodename>
    <nodenext>Directories trunk Identity Themes Motifs Flame</nodenext>
    <nodeprev>Directories trunk Identity Themes Models Default Posters</nodeprev>
    <nodeup>Directories</nodeup>
    <section>
      <title>The <file>trunk/Identity/Themes/Motifs</file> Directory</title>
      <para><indexterm index="cp">Directories trunk Identity Themes Motifs</indexterm></para>
      <subheading>Goals</subheading>
      <para>The <file>trunk/Identity/Themes/Motifs</file> directory exists to:</para>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>Organize CentOS themes' artistic motifs.</para>
        </item>
      </itemize>
      <subheading>Description</subheading>
      <para>The artistic motif of theme is a graphic design component that provides the visual style of themes, it is used as pattern to connect all visual manifestations inside one unique theme.</para>
      <para>Artistic motifs are based on conceptual ideas. Conceptual ideas bring the motivation, they are fuel for the engines of human imagination. Good conceptual ideas may produce good motivation to produce almost anything, and art works don't escape from it.</para>
      <table>
        <tableitem>
          <tableterm><samp>TreeFlower</samp></tableterm>
          <item>
            <para>CentOS like trees, has roots, trunk, branches, leaves and flowers. Day by day they work together in freedom, ruled by the laws of nature and open standards, to show the beauty of its existence.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><samp>Modern</samp></tableterm>
          <item>
            <para>Modern, squares and circles flowing up.</para>
          </item>
        </tableitem>
      </table>
      <para>If you have new conceptual ideas for CentOS, then you can say that you want to create a new artistic motif for CentOS. To create a new artistic motif you need to create a directory under <file>Identity/Themes/Motifs/</file> using a name coherent with your conceptual idea. That name will be the name of your artistic motif. If possible, when creating new conceptual ideas for CentOS, think about what CentOS means for you, what does it makes you feel, take your time, think deep, and share; you can improve the idea as time goes on.</para>
      <para>Once you have defined a name for your theme, you need to create the motif structure of your theme. The motif structure is the basic direcotry structure you'll use to work your ideas. Here is where you organize your graphic design projects.</para>
      <para>To add a new motif structure to CentOS Artwork Repository, you need to use the <command>centos-art</command> command line in the <file>Identity/Themes/Motifs/</file> directory as described below:</para>
      <example xml:space="preserve">centos-art add --motif=ThemeName</example>
      <para>The previous command will create the basic structure of themes for you.  The basic structure produced by <command>centos-art</command> command is illustrated in the following figure:</para>
      <example xml:space="preserve">trunk/Identity/Themes/Motifs/$ThemeName/
|-- Backgrounds
|   |-- Img
|   `-- Tpl
|-- Info
|   |-- Img
|   `-- Tpl
|-- Palettes
`-- Screenshots</example>
      <subheading>Usage</subheading>
      <para>When designing artistic motifs for CentOS, consider the following recommendations:</para>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>Give a unique (case-sensitive) name to your Motif. This name is used as value wherever theme variable (<b>$THEME</b>) or translation marker (<b>=THEME=</b>) is.  Optionally, you can add a description about inspiration and concepts behind your work.</para>
        </item>
        <item>
          <para>Use the location <file>trunk/Identity/Themes/Motifs/$THEME/</file> to store your work. If it doesn't exist create it. Note that this require you to have previous commit access in CentOS Artwork Repository.</para>
        </item>
        <item>
          <para>The CentOS Project is using the blue color (<b>#204c8d</b>) as base color for its corporate visual identity. Use such base corporate color information as much as possible in your artistic motif designs.</para>
        </item>
        <item>
          <para>Try to make your design fit one of the theme models.</para>
        </item>
        <item>
          <para>Feel free to make your art enterprise-level and beautiful.</para>
        </item>
        <item>
          <para>Add the following information on your artwork (both in a visible design area and document metadata):</para>
          <itemize>
            <itemfunction>&bullet;</itemfunction>
            <item>
              <para>The name (or logo) of your artistic motif.</para>
            </item>
            <item>
              <para>The copyright sentence: <b>Copyright (C) YEAR YOURNAME</b></para>
            </item>
            <item>
              <para>The license under which the work is released. All CentOS Art works are released under <uref><urefurl>http://creativecommons.org/licenses/by-sa/3.0/</urefurl><urefdesc>Creative Common Share-Alike License 3.0</urefdesc></uref> (<uref><urefurl>http://creativecommons.org/licenses/by-sa/3.0/</urefurl></uref>).</para>
            </item>
          </itemize>
        </item>
      </itemize>
      <subheading>See also</subheading>
      <menu>
        <menuentry>
          <menunode>Directories trunk Identity Themes</menunode>
          <menutitle>Directories trunk Identity Themes</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Directories trunk Identity</menunode>
          <menutitle>Directories trunk Identity</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Directories trunk</menunode>
          <menutitle>Directories trunk</menutitle>
          <menucomment></menucomment>
        </menuentry>
      </menu>
      <para>The <file>Backgrounds/</file> directory is used to organize artistic motif background images and the projects used to build those images.</para>
      <para>Background images are linked (using the <b>import</b> feature of Inkscape) inside almost all theme art works. This structure let you make centralized changes on the visual identity and propagate them quickly to other areas.</para>
      <para>In this configuration you design background images for different screen resolutions based on the theme artistic motif.</para>
      <para>You may create different artistic motifs propositions based on the same conceptual idea. The conceptual idea is what defines a theme. Artistic motifs are interpretations of that idea.</para>
      <para>Inside this directory artistic motifs are organized by name (e.g., TreeFlower, Modern, etc.).</para>
      <para>Each artistic motif directory represents just one unique artistic motif.</para>
      <para>The artistic motif is graphic design used as common pattern to connect all visual manifestations inside one unique theme.  The artistic motif is based on a conceptual idea.  Artistic motifs provide visual style to themes.</para>
      <para>Designing artistic motifs is for anyone interested in creating beautiful themes for CentOS.  When building a theme for CentOS, the first design you need to define is the artistic motif.</para>
      <para>Inside CentOS Artwork Repository, theme visual styles (a.k.a., artistic motifs) and theme visual structures (a.k.a., design models) are two different working lines.  When you design an artistic motif for CentOS you concentrate on its visual style, and eventualy, use the <command>centos-art</command> command line interface to render the visual style, you are currently producing, against an already-made theme model in order to produce the final result.  Final images are stored under <file>Motifs/</file> directory using the model name, and the model directory structure as reference.</para>
      <para>The artistic motif base structure is used by <command>centos-art</command> to produce images automatically. This section describes each directory of CentOS artistic motif base structure.</para>
      <para>The <file>Backgrounds/</file> directory is probably the core component, inside <file>Motifs/</file> directory structure.  Inside <file>Backgrounds/</file> directory you produce background images used by almost all theme models (e.g., Distribution, Websites, Promotion, etc.).  The <file>Backgrounds/</file> directory can contain subdirectories to help you organize the design process.</para>
    </section>
  </node>
  <node>
    <nodename>Directories trunk Identity Themes Motifs Flame</nodename>
    <nodenext>Directories trunk Identity Themes Motifs Modern</nodenext>
    <nodeprev>Directories trunk Identity Themes Motifs</nodeprev>
    <nodeup>Directories</nodeup>
    <section>
      <title>The <file>trunk/Identity/Themes/Motifs/Flame</file> Directory</title>
      <para><indexterm index="cp">Directories trunk Identity Themes Motifs Flame</indexterm></para>
      <subheading>Goals</subheading>
      <para>This section describes the <emph>Flame</emph> artistic motif. This section may be useful for anyone interested in reproducing the <emph>Flame</emph> artistic motif, or in creating new artistic motifs for The CentOS Project corporate visual identity.</para>
      <subheading>Description</subheading>
      <para>The <emph>Flame</emph> artistic motif was built using the flame filter of Gimp 2.2 in CentOS 5.5.</para>
      <para>The flame filter of Gimp can produce stunning, randomly generated fractal patterns. The flame filter of Gimp gives us a great oportunity to reduce the time used to produce new artistic motifs, because of its &ldquo;randomly generated&rdquo; nature. Once the artistic motif be created, it is propagated through all visual manifestations of CentOS Project corporate visual identity using the <file>centos-art.sh</file> script (see <xref><xrefnodename>Directories trunk Scripts</xrefnodename></xref>) inside the CentOS Artwork Repository.</para>
      <para>To set the time intervals between each new visual style production, we could reuse the CentOS distribution major release schema.  I.e., we could produce a new visual style, every two years, based on a new &ldquo;randomly generated&rdquo; flame pattern, and publish the whole corporate visual identity (i.e., distribution stuff, promotion stuff, websites stuff, etc.) with the new major release of CentOS distribution all together at once.</para>
      <para>Producing a new visual style is not one day's task. Once we have defined the artistic motif, we need to propagate it through all visual manifestations of The CentOS Project corporate visual identity. When we say that we could produce one new visual style every two years we really mean: to work two years long in order to propagate a new visual style to all visual manifestations of The CentOS Project corporate visual identity.</para>
      <para>Obviously, in order to propagate one visual style to all different visual manifestations of The CentOS Project corporate visual identity, we need first to know which the visual manifestations are.  To define which visual manifestations are inside The CentOS Project corporate visual identity is one of the goals the CentOS Artwork Repository and this documentation manual are both aimed to satisfy.</para>
      <para>Once we define which the visual manifestation are, it is possible to define how to produce them, and this way, organize the automation process. Such automation process is one of the goals of <file>centos-art.sh</file> script.</para>
      <para>With the combination of both CentOS Artwork Repository and <file>centos-art.sh</file> scripts we define work lines where translators, programmers, and graphic designers work together to distribute and reduce the amount of time employed to produce The CentOS Project monolithic corporate identity.</para>
      <para>From a monolithic corporate visual identity point of view, notice that we are producing a new visual style for the same theme (i.e., <emph>Flame</emph>). It would be another flame design but still a flame design. This idea is very important to be aware of, because we are somehow &ldquo;refreshing&rdquo; the theme, not changing it at all.</para>
      <para>This way, as we are &ldquo;refreshing&rdquo; the theme, we still keep oursleves inside the monolithic conception we are trying to be attached to (i.e., one unique name, and one unique visual style for all visual manifestations).</para>
      <para>Producing artistic motifs is a creative process that may consume long time, specially for people without experienced knowledge on graphic design land. Using &ldquo;randomly generated&rdquo; conception to produce artistic motifs could be, practically, a way for anyone to follow in order to produce maintainable artistic motifs in few steps.</para>
      <para>Due to the &ldquo;randomly generated&rdquo; nature of Flame filter, we find that <emph>Flame</emph> pattern is not always the same when we use <emph>Flame</emph> filter interface.</para>
      <para>Using the same pattern design for each visual manifestation is essential in order to maintain the visual connection among all visual manifestations inside the same theme.  Occasionally, we may introduce pattern variations in opacity, size, or even position but never change the pattern design itself, nor the color information used by images considered part of the same theme.</para>
      <quotation>
        <para><strong>Important</strong> When we design background images, which are considered part of the same theme, it is essential to use the same design pattern always. This is what makes theme images to be visually connected among themeselves, and so, the reason we use to define the word &ldquo;theme&rdquo; as: a set of images visually connected among themeselves.</para>
      </quotation>
      <para>In order for us to reproduce the same flame pattern always, <emph>Flame</emph> filter interface provides the <samp>Save</samp> and <samp>Open</samp> options. The <samp>Save</samp> option brings up a file save dialog that allows you to save the current Flame settings for the plug-in, so that you can recreate them later.  The <samp>Open</samp> option brings up a file selector that allows you to open a previously saved Flame settings file.</para>
      <para>The Flame settings we used in our example are saved in the file named <file>800x600.xcf-flame.def</file>, inside the <file>Backgrounds/Xcf</file> directory structure.</para>
      <subheading>See also</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>See <xref><xrefnodename>Directories trunk Identity Themes Motifs</xrefnodename></xref>.</para>
        </item>
        <item>
          <para>See <xref><xrefnodename>Directories trunk Identity Themes</xrefnodename></xref>.</para>
        </item>
        <item>
          <para>See <xref><xrefnodename>Directories trunk Identity</xrefnodename></xref>.</para>
        </item>
        <item>
          <para>See <xref><xrefnodename>Directories trunk</xrefnodename></xref>.</para>
        </item>
      </itemize>
    </section>
  </node>
  <node>
    <nodename>Directories trunk Identity Themes Motifs Modern</nodename>
    <nodenext>Directories trunk Identity Themes Motifs Pipes</nodenext>
    <nodeprev>Directories trunk Identity Themes Motifs Flame</nodeprev>
    <nodeup>Directories</nodeup>
    <section>
      <title>The <file>trunk/Identity/Themes/Motifs/Modern</file> Directory</title>
      <para><indexterm index="cp">Directories trunk Identity Themes Motifs Modern</indexterm></para>
      <subheading>Goals</subheading>
      <subheading>Description</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>...</para>
        </item>
      </itemize>
      <subheading>Usage</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>...</para>
        </item>
      </itemize>
      <subheading>See also</subheading>
      <menu>
      </menu>
    </section>
  </node>
  <node>
    <nodename>Directories trunk Identity Themes Motifs Pipes</nodename>
    <nodenext>Directories trunk Identity Themes Motifs TreeFlower</nodenext>
    <nodeprev>Directories trunk Identity Themes Motifs Modern</nodeprev>
    <nodeup>Directories</nodeup>
    <section>
      <title>The <file>trunk/Identity/Themes/Motifs/Pipes</file> Directory</title>
      <para><indexterm index="cp">Directories trunk Identity Themes Motifs Pipes</indexterm></para>
      <subheading>Goals</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>...</para>
        </item>
      </itemize>
      <subheading>Description</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>...</para>
        </item>
      </itemize>
      <subheading>Usage</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>...</para>
        </item>
      </itemize>
      <subheading>See also</subheading>
      <menu>
      </menu>
    </section>
  </node>
  <node>
    <nodename>Directories trunk Identity Themes Motifs TreeFlower</nodename>
    <nodenext>Directories trunk Identity Webenv</nodenext>
    <nodeprev>Directories trunk Identity Themes Motifs Pipes</nodeprev>
    <nodeup>Directories</nodeup>
    <section>
      <title>The <file>trunk/Identity/Themes/Motifs/TreeFlower</file> Directory</title>
      <para><indexterm index="cp">Directories trunk Identity Themes Motifs TreeFlower</indexterm></para>
      <subheading>Goals</subheading>
      <subheading>Description</subheading>
      <subheading>Usage</subheading>
      <subheading>See also</subheading>
      <menu>
      </menu>
    </section>
  </node>
  <node>
    <nodename>Directories trunk Identity Webenv</nodename>
    <nodenext>Directories trunk Locales</nodenext>
    <nodeprev>Directories trunk Identity Themes Motifs TreeFlower</nodeprev>
    <nodeup>Directories</nodeup>
    <section>
      <title>The <file>trunk/Identity/Webenv</file> Directory</title>
      <para><indexterm index="cp">Directories trunk Identity Webenv</indexterm></para>
      <subheading>Goals</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>...</para>
        </item>
      </itemize>
      <subheading>Description</subheading>
      <para>The CentOS web environment is formed by a central web application &mdash;to cover base needs (e.g., per-major release information like release notes, lifetime, downloads, documentation, support, security advisories, bugs, etc.)&mdash; and many different free web applications &mdash;to cover specific needs (e.g., wiki, mailing lists, etc.)&mdash;.</para>
      <para>The CentOS web environment is addressed to solve the following issues:</para>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>One unique name and one unique visual style to all web applications used inside the web environment.</para>
        </item>
        <item>
          <para>One-step navigation to web applications inside the environment.</para>
        </item>
        <item>
          <para>High degree of customization to change the visual style of all web applications with few changes (e.g, updating just two or three images plus common style sheet [CSS] definitions).</para>
        </item>
      </itemize>
      <para>The CentOS project is attached to a monolithic corporate visual identity (see <xref><xrefnodename>Directories trunk Identity</xrefnodename></xref>), where all visual manifestations have one unique name and one unique visual style. This way, the CentOS web environment has one unique name (the CentOS brand) and one unique visual style (the CentOS default theme) for all its visual manifestations, the web applications in this case.</para>
      <para>Since a maintainance point of view, achiving the one unique visual style inside CentOS web environment is not a simple task. The CentOS web environment is built upon many different web applications which have different visual styles and different internal ways to customize their own visual styles. For example: MoinMoin, the web application used to support the CentOS wiki (<uref><urefurl>http://wiki.centos.org/</urefurl></uref>) is highly customizable but Mailman (in its 2.x.x serie), the web application used to support the CentOS mailing list, doesn't support<footnote><para>The theme support of Mailman may be introduced in mailman-3.x.x release.</para></footnote> a customization system that separates presentation from logic, similar to that used by MoinMoin.</para>
      <para>This visual style diversity complicates our goal of one unique visual style for all web applications. So, if we want one unique visual style for all web applications used, it is innevitable to modify the web applications in order to implement the CentOS one unique visual style customization in them. Direct modification of upstream applications is not convenient because upstream applications come with their one visual style and administrators take the risk of loosing all customization changes the next time the application be updated (since not all upstream web applications, used in CentOS web environment, separate presentation from logic).</para>
      <para>To solve the &ldquo;one unique visual style&rdquo; issue, installation and actualization of web applications &mdash;used inside CentOS web environment&mdash; need to be independent from upstream web applications development line; in a way that CentOS web environment administrators can install and update web applications freely without risk of loosing the one unique visual style customization changes.</para>
      <para>At the surface of this issue we can see the need of one specific yum repository to store CentOS web environment customized web applications.</para>
      <subsubheading>Design model (without ads)</subsubheading>
      <subsubheading>Design model (with ads)</subsubheading>
      <subsubheading>HTML definitions</subsubheading>
      <subsubheading>Controlling visual style</subsubheading>
      <para>Inside CentOS web environment, the visual style is controlled by the following compenents:</para>
      <table>
        <tableitem>
          <tableterm><strong>Webenv header background</strong></tableterm>
          <item>
            <verbatim xml:space="preserve"><![CDATA[
trunk/Identity/Themes/Motifs/$THEME/Backgrounds/Img/1024x250.png
]]></verbatim>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><strong>CSS definitions</strong></tableterm>
          <item>
            <verbatim xml:space="preserve"><![CDATA[
trunk/Identity/Themes/Models/Default/Promo/Web/CSS/stylesheet.css
]]></verbatim>
          </item>
        </tableitem>
      </table>
      <subsubheading>Producing visual style</subsubheading>
      <para>The visual style of CentOS web environment is defined in the following files:</para>
      <verbatim xml:space="preserve"><![CDATA[
trunk/Identity/Themes/Motifs/$THEME/Backgrounds/Xcf/1024x250.xcf
trunk/Identity/Themes/Motifs/$THEME/Backgrounds/Img/1024x250.png
trunk/Identity/Themes/Motifs/$THEME/Backgrounds/Img/1024x250-bg.png
trunk/Identity/Themes/Motifs/$THEME/Backgrounds/Tpl/1024x250.svg
]]></verbatim>
      <para>As graphic designer you use <file>1024x250.xcf</file> file to produce <file>1024x250-bg.png</file> file. Later, inside <file>1024x250.svg</file> file, you use the <file>1024x250-bg.png</file> file as background layer to draw your vectorial design. When you consider you artwork ready, use the <command>centos-art.sh</command> script, as described below, to produce the visual style controller images of CentOS web environment.</para>
      <verbatim xml:space="preserve"><![CDATA[
centos-art render --entry=trunk/Identity/Themes/Motifs/$THEME/Backgrounds --filter='1024x250'
]]></verbatim>
      <para>Once you have rendered required image files, changing the visual style of CentOS web environment is a matter of replacing old image files with new ones, inside webenv repository file system structure. The visual style changes will take effect the next time customization line of CentOS web applications be packaged, uploded, and installed from [webenv] or [webenv-test] repositories.</para>
      <subsubheading>Navigation</subsubheading>
      <para>Inside CentOS web environment, the one-step navegation between web applications is addressed using the web environment navigation bar. The web environment navigation bar contains links to main applications and is always visible no matter where you are inside the web environment.</para>
      <subsubheading>Development and release cycle</subsubheading>
      <para>The CentOS web environment development and relase cycle is described below:</para>
      <table>
        <tableitem>
          <tableterm><strong>Download</strong></tableterm>
          <item>
            <para>The first action is download the source code of web applications we want to use inside CentOS web environment.</para>
            <quotation>
              <para><strong>Important</strong> The source location from which web application are downloaded is very important. Use SRPMs from CentOS <strong>[base]</strong> and <strong>[updates]</strong> repositories as first choise, and third party repositories (e.g. RPMForge, EPEL, etc.) as last resource.</para>
            </quotation>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><strong>Prepare</strong></tableterm>
          <item>
            <para>Once web application source code has been downloaded, our duty is organize its files inside <samp>webenv</samp> version controlled repository.</para>
            <para>When preparing the structure keep in mind that different web applications have different visual styles, and also different ways to implement it. A convenient way to organize the file system structure would be create one development line for each web application we use inside CentOS web environment. For example, consider the following file system structure:</para>
            <verbatim xml:space="preserve"><![CDATA[
https://projects.centos.org/svn/webenv/trunk/
|-- WebApp1/
|   |-- Sources/
|   |   `-- webapp1-0.0.1/
|   |-- Rpms/
|   |   `-- webapp1-0.0.1.rpm
|   |-- Srpms/
|   |   `-- webapp1-0.0.1.srpm
|   `-- Specs/
|       `-- webapp1-0.0.1.spec
|-- WebApp2/
`-- WebAppN/
]]></verbatim>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><strong>Customize</strong></tableterm>
          <item>
            <para>Once web applications have been organized inside the version controlled repository file system, use subversion to create the CentOS customization development line of web applications source code.  For example, using the above file system structure, you can create the customization development line of <file>webapp1-0.0.1/</file> with the following command:</para>
            <verbatim xml:space="preserve"><![CDATA[
svn cp trunk/WebApp1/Sources/webapp1-0.0.1 trunk/WebApp1/Sources/webapp1-0.0.1-webenv
]]></verbatim>
            <para>The command above creates the following structure:</para>
            <verbatim xml:space="preserve"><![CDATA[
https://projects.centos.org/svn/webenv/trunk/
|-- WebApp1/
|   |-- Sources/
|   |   |-- webapp1-0.0.1/
|   |   `-- webapp1-0.0.1-webenv/
|   |-- Rpms/
|   |   `-- webapp1-0.0.1.rpm
|   |-- Srpms/
|   |   `-- webapp1-0.0.1.srpm
|   `-- Specs/
|       `-- webapp1-0.0.1.spec
|-- WebApp2/
`-- WebAppN/
]]></verbatim>
            <para>In the above structure, the <file>webapp1-0.0.1-webenv/</file> directory is the place where you customize the visual style of <file>webapp1-0.0.1/</file> web application.</para>
            <quotation>
              <para><strong>Tip</strong> Use the <command>diff</command> command of Subversion between CentOS customization and upstream development lines to know what you are changing exactly.</para>
            </quotation>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><strong>Build packages</strong></tableterm>
          <item>
            <para>When web application has been customized, build the web application RPM and SRPM using the source location with <samp>-webenv</samp> prefix.</para>
            <verbatim xml:space="preserve"><![CDATA[
https://projects.centos.org/svn/webenv/trunk/
|-- WebApp1/
|   |-- Sources/
|   |   |-- webapp1-0.0.1/
|   |   `-- webapp1-0.0.1-webenv/
|   |-- Rpms/
|   |   |-- webapp1-0.0.1.rpm
|   |   `-- webapp1-0.0.1-webenv.rpm
|   |-- Srpms/
|   |   |-- webapp1-0.0.1.srpm
|   |   `-- webapp1-0.0.1-webenv.srpm
|   `-- Specs/
|       |-- webapp1-0.0.1.spec
|       `-- webapp1-0.0.1-webenv.spec
|-- WebApp2/
`-- WebAppN/
]]></verbatim>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><strong>Release for testing</strong></tableterm>
          <item>
            <para>When the customized web application has been packaged, make packages available for testing and quality assurance. This can be achives using a [webenv-test] yum repository.</para>
            <quotation>
              <para><strong>Note</strong> The [webenv-test] repository is not shipped inside CentOS distribution default yum configuraiton. In order to use [webenv-test] repository you need to configure it first.</para>
            </quotation>
            <para>If some problem is found to install/update/use the customized version of web application, the problem is notified somewhere (a bugtracker maybe) and the customization face is repated in order to fix the problem. To release the new package add a number after <samp>-webenv</samp> prefix. For example, if some problem is found in <file>webapp1-0.0.1-webenv.rpm</file>, when it be fixed the new package will be named <file>webapp1-0.0.1-webenv-1.rpm</file>. If a problem is found in <file>webapp1-0.0.1-webenv-1.rpm</file>, when it be fixed the new package will be named <file>webapp1-0.0.1-webenv-2.rpm</file>, and so on.</para>
            <para>The &ldquo;customization &mdash; release for testing&rdquo; process is repeated until CentOS quality assurance team considers the package is ready for production.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><strong>Release for production</strong></tableterm>
          <item>
            <para>When customized web application packages are considered ready for production they are moved from [webenv-test] to [webenv] repository. This action is commited by CentOS quality assurance team.</para>
            <quotation>
              <para><strong>Note</strong> The [webenv] repository is not shipped inside CentOS distribution default yum configuraiton. In order to use [webenv] repository you need to configure it first.</para>
            </quotation>
          </item>
        </tableitem>
      </table>
      <subsubheading>The [webenv-test] repository</subsubheading>
      <verbatim xml:space="preserve"><![CDATA[
/etc/yum.repos.d/CentOS-Webenv-test.repo
]]></verbatim>
      <verbatim xml:space="preserve"><![CDATA[
[webenv-test]
name=CentOS-$releasever - Webenv-test
mirrorlist=http://mirrorlist.centos.org/?release=$releasever&arch=$basearch&repo=webenv-test
#baseurl=http://mirror.centos.org/centos/$releasever/webenv-test/$basearch/
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-$releasever
enabled=1
priority=10
]]></verbatim>
      <subsubheading>The [webenv] repository</subsubheading>
      <verbatim xml:space="preserve"><![CDATA[
/etc/yum.repos.d/CentOS-Webenv.repo
]]></verbatim>
      <verbatim xml:space="preserve"><![CDATA[
[webenv]
name=CentOS-$releasever - Webenv
mirrorlist=http://mirrorlist.centos.org/?release=$releasever&arch=$basearch&repo=webenv
#baseurl=http://mirror.centos.org/centos/$releasever/webenv/$basearch/
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-$releasever
enabled=1
priority=10
]]></verbatim>
      <subsubheading>Priority configuration</subsubheading>
      <para>Both [webenv] and [webenv-test] repositories update packages inside CentOS [base] and CentOS [updates] repositories.</para>
      <subheading>Usage</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>...</para>
        </item>
      </itemize>
      <subheading>See also</subheading>
      <menu>
      </menu>
    </section>
  </node>
  <node>
    <nodename>Directories trunk Locales</nodename>
    <nodenext>Directories trunk Manual</nodenext>
    <nodeprev>Directories trunk Identity Webenv</nodeprev>
    <nodeup>Directories</nodeup>
    <section>
      <title>The <file>trunk/Locales</file> Directory</title>
      <para><indexterm index="cp">Directories trunk Locales</indexterm></para>
      <subheading>Goals</subheading>
      <para>The <file>trunk/Locales</file> directory structure provides the localization work line and its main goal is provide the translation messages required to produce content in different languages.</para>
      <subheading>Description</subheading>
      <para>Translation messages inside the repository are stored as portable objects (e.g., .po, .pot) and machine objects (.mo) under <file>trunk/Locales</file> directory structure.</para>
      <para>Translation messages are organized using the directory structure of the component being translated. For example, if we want to provide translation messages for <file>trunk/Manuals/Repository</file>, then the <file>trunk/Locales/Manuals/Repository</file> directory needs to be created.</para>
      <para>Once the locale directory exists for the component we want to provide translation messages for, it is necessary to create the translation files where translation messages are. The translation files follows the concepts of <command>xml2po</command> and GNU <command>gettext</command> tools.</para>
      <para>The basic translation process is as follow: first, translatable strings are extracted from files and a portable object template (.pot) is created or updated with the information. Using the portable object template, a portable object (.po) is created or updated for translator to locale the messages retrived.  Finally, a machine object (.mo) is created from portable object to sotore the translated messages.</para>
      <para>Inside the repository there are two ways to retrive translatable strings from files. The first one is through <command>xml2po</command> command and the second through <command>xgettext</command> command. The <command>xml2po</command> is used to retrive translatable strings from XML files (e.g., Scalable Vector Graphics, DocBook, etc.) and the <command>xgettext</command> command is used to retrive translatable strings from shell scripts files (e.g., the files that make the <command>centos-art.sh</command> command-line interface).</para>
      <para>When translatable strings are retrived from XML files, using the <command>xml2po</command> command, there is no need to create the machine object as we do when translatable strings ar retrived from shell files, using the <command>xgettext</command> command. The <command>xml2po</command> produces a temporal machine object in order to create a translated XML file. Once the translated XML file has been created the machine object is no longer needed. On the other hand, the machine object produced by the <command>xgettext</command> command is required by the system in order for the show shell script localized messages.</para>
      <para>Another difference between <command>xml2po</command> and <command>xgettext</command> we need to be aware of is the directory structure used to store machine objects. In <command>xml2po</command>, the machine object is created in the current working directory as <file>.xml2po.mo</file> and can be safetly removed once the translated XML file has been created. In the case of <command>xgettext</command>, the machine object needs to be stored in the <file>$TEXTDOMAIN/$LOCALE/LL_MESSAGES/$TEXTDOMAIN.mo</file> file in order for the system to interpret it and should not be removed since it is the file that contain the translation messages themselves.</para>
      <para>Automation of localization tasks is achived through the <code>locale</code> functionality of command-line interface.</para>
      <subheading>Usage</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>...</para>
        </item>
      </itemize>
      <subheading>See also</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction><xref><xrefnodename>Directories trunk Scripts Functions Locale</xrefnodename></xref>
      </itemize>
    </section>
  </node>
  <node>
    <nodename>Directories trunk Manual</nodename>
    <nodenext>Directories trunk Scripts</nodenext>
    <nodeprev>Directories trunk Locales</nodeprev>
    <nodeup>Directories</nodeup>
    <section>
      <title>The <file>trunk/Manual</file> Directory</title>
      <para><indexterm index="cp">Directories trunk Manual</indexterm></para>
      <subheading>Goals</subheading>
      <para>This <file>trunk/Manual</file> directory structure provides the documentation work line.  The main goal of documentation work line is describe what each directory inside the CentOS Artwork Repository is for, the conceptual ideas behind them and, if possible, how automation scripts make use of them.</para>
      <subheading>Description</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>...</para>
        </item>
      </itemize>
      <subheading>Usage</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>...</para>
        </item>
      </itemize>
      <subheading>See also</subheading>
      <menu>
      </menu>
    </section>
  </node>
  <node>
    <nodename>Directories trunk Scripts</nodename>
    <nodenext>Directories trunk Scripts Functions</nodenext>
    <nodeprev>Directories trunk Manual</nodeprev>
    <nodeup>Directories</nodeup>
    <section>
      <title>The <file>trunk/Scripts</file> Directory</title>
      <para><indexterm index="cp">Directories trunk Scripts</indexterm></para>
      <subheading>Goals</subheading>
      <para>This section provides the automation work line. The automation work line exists to standardize content production in CentOS Artwork Repository.  There is no need to type several tasks, time after time, if they can be programmed into just one executable script.</para>
      <para>In this section you'll find how to organize and extend the <command>centos-art.sh</command> script, a bash scripts specially designed to automate most frequent tasks in the repository (e.g., image rendition, documenting directory structures, translating content, etc.).  If you can't resist the idea of automating repeatable tasks, then take a look here.</para>
      <subheading>Description</subheading>
      <para>The best way to understand <file>centos-art.sh</file> automation script is studying its source code.  However, as start point, you may prefer to read an introductory resume before diving into the source code details.</para>
      <para>The <file>centos-art.sh</file> script is written in Bash. Most tasks, inside <file>centos-art.sh</file> script, have been organized in many specific functionalities that you can invoke from the <command>centos-art</command> command-line interface.</para>
      <para>When you type the <command>centos-art</command> command in your terminal, the operating system trys to execute that command. In order to execute the command, the operating system needs to know where it is, so the operating system uses the <var>PATH</var> environment variable to look for that command location. If your system was prepared to use CentOS Artwork Repository correctly (see <xref><xrefnodename>Directories trunk Scripts Functions Prepare</xrefnodename></xref>) you should have a symbolic link inside <file>~/bin</file> directory that points to the <file>centos-art.sh</file> script file. As <file>~/bin</file> directory is, by default, inside <var>PATH</var> environment variable, the execution of <command>centos-art</command> command runs the <file>centos-art.sh</file> script.</para>
      <para>When <file>centos-art.sh</file> script is executed, the first it does is initializing global variables (e.g., <command>gettext</command> variables) and global function scripts.  Global function scripts are located inside <file>trunk/Scripts/Functions</file> directory and their file names begin with <samp>cli</samp>. Global function scripts provide common functionalities that can be used anywhere inside <file>centos-art.sh</file> script execution environment.</para>
      <para>Once global variables and function scripts have been loaded, <file>centos-art.sh</file> script executes the <command>cli</command> global function from <file>cli.sh</file> function script to retrive command-line arguments and define some default values that may be used later by specific function scripts (see <xref><xrefnodename>Directories trunk Scripts Functions</xrefnodename></xref>).</para>
      <para>As convenction, the <file>centos-art.sh</file> command-line arguments have the following format:</para>
      <verbatim xml:space="preserve"><![CDATA[
centos-art function path/to/dir --option='value'
]]></verbatim>
      <para>In the above example, <samp>centos-art</samp> is the command you use to invoke <file>centos-art.sh</file> script. The <samp>arg1</samp> is required and represents the functionality you want to perform (e.g., <option>verify</option>, <option>render</option>, <option>locale</option>, <option>manual</option>, etc.). The remaining arguments are modifiers to <option>arg1</option>. The <option>--arg2</option> definition is required and represets, specifically, the action inside the functionality you want to perform.  The <option>--arg3</option> and on, are optional.</para>
      <para>Once command-line arguments have been retrived, the <file>centos-art.sh</file> script loads specific functionalities using the <file>cli_getFunctions.sh</file> function script. Only one specific functionality can be loaded at one script execution I.e., you run <command>centos-art.sh</command> script to run just one functionality.</para>
      <float name="Functionalities initialization">
        <floattype>Figure</floattype>
        <floatpos></floatpos>
        <verbatim xml:space="preserve"><![CDATA[
+----------------------------------------------------------------------+
| [centos@host]$ centos-art function path/to/dir --option='value'      |
+----------------------------------------------------------------------+
| ~/bin/centos-art --> ~/artwork/trunk/Scripts/centos-art.sh           |
+---v--------------------------------------------------------------v---+
    | centos-art.sh                                                |
    +-v--------------------------------------------------------v---+
    . | cli $@                                                 |   .
    . +-v--------------------------------------------------v---+   .
    . . | cli_getFunctions                                 |   .   .
    . . +-v-----------v-----------v-----------v------------+   .   .
    . . . | function1 | function2 | functionN |            .   .   .
    . . . +-----------+-----------+-----------+            .   .   .
    . . ....................................................   .   .
    . ..........................................................   .
    ................................................................
]]></verbatim>
        <caption>Functionalities initialization environment.</caption>
      </float>
      <para>Functionalities are implemented by means of actions.  Once the functionality has been initiazalized, actions initialization take place for that functionality. Actions initialization model is very similar to functions initialization model. But with the difference, that actions are loaded inside function environment, and so, share variables and functions defined inside function environment.</para>
      <float name="Actions initialization">
        <floattype>Figure</floattype>
        <floatpos></floatpos>
        <verbatim xml:space="preserve"><![CDATA[
+----------------------------------------------------------------------+
| cli_getFunctions                                                     |
+---v----------------------------v----v----------------------------v---+
.   | function1                  |    | function2                  |   .
.   +-v------------------------v-+    +-v------------------------v-+   .
.   . | function1_getArguments | .    . | function2_getArguments | .   .
.   . +-v--------------------v-+ .    . +-v--------------------v-+ .   .
.   . . | action 1           | . .    . . | action 1           | . .   .
.   . . | action 2           | . .    . . | action 2           | . .   .
.   . . | action N           | . .    . . | action N           | . .   .
.   . . +--------------------+ . .    . . +--------------------+ . .   .
.   . .......................... .    . .......................... .   .
.   ..............................    ..............................   .
........................................................................
]]></verbatim>
        <caption>Actions initialization environment.</caption>
      </float>
      <subheading>Usage</subheading>
      <para>The <file>centos-art.sh</file> script usage information is described inside each specific function documentation (see <xref><xrefnodename>Directories trunk Scripts Functions</xrefnodename></xref>).</para>
      <subheading>See also</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para><xref><xrefnodename>Directories trunk</xrefnodename></xref></para>
        </item>
      </itemize>
    </section>
  </node>
  <node>
    <nodename>Directories trunk Scripts Functions</nodename>
    <nodenext>Directories trunk Scripts Functions Help</nodenext>
    <nodeprev>Directories trunk Scripts</nodeprev>
    <nodeup>Directories</nodeup>
    <section>
      <title>The <file>trunk/Scripts/Functions</file> Directory</title>
      <para><indexterm index="cp">Directories trunk Scripts Functions</indexterm></para>
      <subheading>Goals</subheading>
      <para>The <file>trunk/Scripts/Functions</file> directory exists to organize <file>centos-art.sh</file> specific functionalities.</para>
      <subheading>Description</subheading>
      <para>The specific functions of <file>centos-art.sh</file> script are designed with the &ldquo;Software Toolbox&rdquo; philosophy (<inforef><inforefnodename>Toolbox introduction</inforefnodename><inforefinfoname>coreutils.info</inforefinfoname></inforef>) in mind: each program &ldquo;should do one thing well&rdquo;.  Inside <file>centos-art.sh</file> script, each specific functionality is considered a program that should do one thing well. Of course, if you find that they still don't do it, feel free to improve them in order for them to do so.</para>
      <para>The specific functions of <file>centos-art.sh</file> script are organized inside specific directories under <file>trunk/Scripts/Functions</file> location. Each specific function directory should be named as the function it represents, with the first letter in uppercase. For example, if the function name is <code>render</code>, the specific function directory for it would be <samp>trunk/Scripts/Functions/Render</samp>.</para>
      <subsubheading>Creating the <code>greet</code> functionality</subsubheading>
      <para>To better understand how to design specific functions for <file>centos-art.sh</file> script, let's create the <code>greet</code> functionality which only goal is to print out different kind of greetings to your screen.  The <code>greet</code> functionality will be set using the follwiing directory structure:</para>
      <verbatim xml:space="preserve"><![CDATA[
trunk/Scripts/Functions/Greet   <-- The source location of greet function.
|-- greet_getArguments.sh       <-- Defines command-line interface.
|-- greet_sayGoodbye.sh         <-- Defines specific action.
|-- greet_sayHello.sh           <-- Defines specific action.
`-- greet.sh                    <-- Defines function initialization.
]]></verbatim>
      <para>The <file>greet.sh</file> file contains the initialization script of <code>greet</code> functionality. It is the first file loaded from function source location by <command>centos-art.sh</command> script when it is executed using the <code>greet</code> functionality as first argument.</para>
      <para>Inside <file>centos-art.sh</file> script, as convenction, each function script has one top commentary, followed by one blank line, and then one function defintion below it only.  The top commentary has the function description, one-line for copyright notice with your personal information,  the license under which the function source code is released &mdash;the <file>centos-art.sh</file> script is released as GPL, so do all its functions&mdash; and the <code>$Id$</code> keyword of Subversion which is later expanded by <command>svn propset</command> command.  In our example, the top comment of <code>greet.sh</code> function script would look like the following:</para>
      <verbatim xml:space="preserve"><![CDATA[
#!/bin/bash
#
# greet.sh -- This function outputs different kind of greetings to
# your screen. Use this function to understand how centos-art.sh
# script specific functionalities work.
#
# Copyright (C) YEAR YOURFULLNAME
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or (at
# your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
# ----------------------------------------------------------------------
# $Id$
# ----------------------------------------------------------------------

function greet {

    # Define command-line interface.
    greet_getArguments

    # Execute action name.
    if [[ $ACTIONNAM =~ "^${FUNCNAM}_[A-Za-z]+$" ]];then
        eval $ACTIONNAM
    else
        cli_printMessage "`gettext "A valid action is required."`" 'AsErrorLine'
        cli_printMessage "${FUNCDIRNAM}" 'AsToKnowMoreLine'
    fi
    
}
]]></verbatim>
      <para>The first definition inside <code>greet</code> function is for variables that will be available along the whole execution environment of <code>greet</code> function. This time we didn't define any variable here so, we continued with definition of command-line interface, through <code>greet_getArguments</code> function.</para>
      <para>The command-line interface of <code>greet</code> functionality defines how to interpret arguments passed from <command>centos-art.sh</command> script command-line.  Inside <command>centos-art.sh</command> script, the interpretation of arguments passed through its command-line takes place by mean of <command>getopt</command> command and is written as the following code example describes:</para>
      <verbatim xml:space="preserve"><![CDATA[
function greet_getArguments {

    # Define short options we want to support.
    local ARGSS=""

    # Define long options we want to support.
    local ARGSL="hello:,bye:,quiet"

    # Redefine ARGUMENTS variable using getopt output.
    cli_doParseArguments

    # Redefine positional parameters using ARGUMENTS variable.
    eval set -- "$ARGUMENTS"

    # Look for options passed through command-line.
    while true; do

        case "$1" in

            --hello )
                ACTIONNAM="${FUNCNAM}_sayHello"
                ACTIONVAL="$2"
                shift 2
                ;;

            --bye )
                ACTIONNAM="${FUNCNAM}_sayGoodbye" 
                ACTIONVAL="$2"
                shift 2
                ;;

            -- )
                # Remove the `--' argument from the list of arguments
                # in order for processing non-option arguments
                # correctly. At this point all option arguments have
                # been processed already but the `--' argument still
                # remains to mark ending of option arguments and
                # begining of non-option arguments. The `--' argument
                # needs to be removed here in order to avoid
                # centos-art.sh script to process it as a path inside
                # the repository, which obviously is not.
                shift 1
                break
                ;;
        esac
    done

    # Redefine ARGUMENTS variable using current positional parameters. 
    cli_doParseArgumentsReDef "$@"

}
]]></verbatim>
      <para>The <code>greet_sayHello</code> and <code>greet_sayGoodbye</code> function definitions are the core of <code>greet</code> specific functionality.  In such function definitions we set what our <code>greet</code> function really does: to output different kinds of greetings.</para>
      <verbatim xml:space="preserve"><![CDATA[
function greet_sayHello {

    cli_printMessage "`gettext "Hello"`, $ACTIONVAL"

}
]]></verbatim>
      <para>The <code>greet_sayHello</code> function definition is stored in <file>greet_sayHello.sh</file> function script.</para>
      <verbatim xml:space="preserve"><![CDATA[
function greet_sayGoodbye {

    cli_printMessage "`gettext "Goodbye"`, $ACTIONVAL"

}
]]></verbatim>
      <para>The <code>greet_sayGoodbye</code> function definition is stored in the <file>greet_sayGoodbye.sh</file> function script.</para>
      <subsubheading>Executing the <code>greet</code> functionality</subsubheading>
      <para>To execute the <code>greet</code> specific functionality we've just created, pass the function name (i.e., <code>greet</code>) as first argument to <file>centos-art.sh</file> script and any of the valid options after it. Some examples are illustrated below:</para>
      <verbatim xml:space="preserve"><![CDATA[
[centos@projects ~]$ centos-art greet --hello='World'
Hello, World
[centos@projects ~]$ centos-art greet --bye='World'
Goodbye, World
[centos@projects ~]$ 
]]></verbatim>
      <para>The word <samp>World</samp> in the examples above can be anything. Likewise, if you need to change the way either the hello or goodbye messages are printed out, you can modifie the functions <code>greet_sayHello</code> and <code>greet_sayGoodbye</code>, respectively.</para>
      <subsubheading>Documenting the <command>greet</command> functionality</subsubheading>
      <para>Now that <code>greet</code> functionality works as we expect, it is time to document it.  To document functionalities inside <command>centos-art.sh</command> script we use the function directory path as argument to the <code>help</code> functionality (see <xref><xrefnodename>Directories trunk Scripts Functions Help</xrefnodename></xref>) of <file>centos-art.sh</file> script, just as the following command illustrates:</para>
      <verbatim xml:space="preserve"><![CDATA[
centos-art help --edit trunk/Scripts/Functions/Greet
]]></verbatim>
      <para>The function documentation helps to understand how the function really works and how it should be used.  Also, when <command>centos-art.sh</command> script ends because an error, the documentation entry related to the functionality being currently executed is used as vehicle to communicate the user what is the correct way of using the functionality.</para>
      <subsubheading>Localizing the <command>greet</command> functionality</subsubheading>
      <para>Now that <code>greet</code> functionality has been documented, it is time to localize its output messages. Localizing specific functionalities of <command>centos-art.sh</command> script takes place as part of <command>centos-art.sh</command> script localization itself which is performed by applying the path <file>trunk/Scripts</file> to the <code>locale</code> functionality of <command>centos-art.sh</command> script.</para>
      <para>As the <code>greet</code> functionality added new translatable strings to the <command>centos-art.sh</command> script, it is required to update the translation messages firstly, to add the new translatable strings from <code>greet</code> functionality to <command>centos-art.sh</command> script translation messages and then, edit the translation messages of <command>centos-art.sh</command> script to localize the new translatable strings that have been added. To achieve this, execute the following two commands:</para>
      <verbatim xml:space="preserve"><![CDATA[
centos-art locale --update trunk/Scripts
centos-art locale --edit trunk/Scripts
]]></verbatim>
      <quotation>
        <para><strong>Warning</strong> To translate output messages in different languages, your system locale information &mdash;as in <env>LANG</env> environment variable&mdash; must be set to that locale you want to produce translated messages for. For example, if you want to produce translated messages for Spanish language, your system locale information must be set to <samp>es_ES.UTF-8</samp>, or similar, before executing the <code>locale</code> functionality of <command>centos-art.sh</command> script.</para>
      </quotation>
      <para>Well, it seems that our example is rather complete by now.</para>
      <subsubheading>Extending the <code>greet</code> functionality</subsubheading>
      <para>In the <code>greet</code> functionality we've described so far, we only use <code>cli_printMessage</code> function in action specific function definitions in order to print messages, but more interesting things can be achieved inside action specific function definitions.  For example, if you pass a directory path as argument, you could use it to retrive a list of files from therein and process them. If the list of files turns too long or you just want to control which files to process, so you could add another argument in the form <option>--filter='regex'</option> and reduce the list of files to process using a regular expression pattern.</para>
      <para>In case you consider to extend the <code>greet</code> functionality to do something different but print out grettings, consider changing the function name from <code>greet</code> to something more appropriate, as well. The name change must be coherent with the actions the new function is designed to perform.</para>
      <para>If you doubt what name is better for your functionality, write to <email><emailaddress>centos-devel@centos.org</emailaddress></email> mailing list, explain what your functionality intends to do and request suggestion about what name would be more appropriate for it. That would be also very convenient for you, in order to evaluate the purposes of your function and what the community thinks about it. It is a way for you to gather ideas that help you to write using the community feeling as base.</para>
      <para>If your function passes the community evaluation, that is a good sign for you to start/keep writing it. However, if it doesn't, it is time for you to rethink what you are doing and ask again until it passes the community evaluation. You can considered you've passed the community evaluation when after proposing your idea, you get a considerable amount of possitve responses for what you are doing, specially if those responses come from community leaders.</para>
      <para>It is very hard to do something useful for a community of people without any point of contact with that community you are trying to do things for.  How could you know you are doing something that is needed if you don't know what the needs are?  So, explore the community needs first, define them, work them out and repeat the process time after time, even when you might think the need has been already satisfied. At that point, surely, you'll find smaller needs that need to be satisfied, as well.</para>
      <subsubheading>Conclusions</subsubheading>
      <para>The <code>greet</code> functionality described in this section may serve as introduction for you to understand how specific functionalities are created inside <file>centos-art.sh</file> script. With some of luck this introduction will also serve you as motivation to create your own specific functionalities for <file>centos-art.sh</file> script.</para>
      <para>By the way, the <code>greet</code> functionality doesn't exist inside <file>centos-art.sh</file> script yet. Would you like to create it?</para>
      <subheading>Usage</subheading>
      <para>The following specific functions of <file>centos-art.sh</file> script, are available for you to use:</para>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>See <xref><xrefnodename>Directories trunk Scripts Functions Prepare</xrefnodename></xref>.</para>
        </item>
        <item>
          <para>See <xref><xrefnodename>Directories trunk Scripts Functions Render</xrefnodename></xref>.</para>
        </item>
        <item>
          <para>See <xref><xrefnodename>Directories trunk Scripts Functions Locale</xrefnodename></xref>.</para>
        </item>
        <item>
          <para>See <xref><xrefnodename>Directories trunk Scripts Functions Help</xrefnodename></xref>.</para>
        </item>
        <item>
          <para>See <xref><xrefnodename>Directories trunk Scripts Functions Path</xrefnodename></xref>.</para>
        </item>
        <item>
          <para>See <xref><xrefnodename>Directories trunk Scripts Functions Tuneup</xrefnodename></xref>.</para>
        </item>
      </itemize>
      <subheading>See also</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para><xref><xrefnodename>Directories trunk Scripts</xrefnodename></xref></para>
        </item>
        <item>
          <para><xref><xrefnodename>Directories trunk</xrefnodename></xref></para>
        </item>
      </itemize>
    </section>
  </node>
  <node>
    <nodename>Directories trunk Scripts Functions Help</nodename>
    <nodenext>Directories trunk Scripts Functions Locale</nodenext>
    <nodeprev>Directories trunk Scripts Functions</nodeprev>
    <nodeup>Directories</nodeup>
    <section>
      <title>The <file>trunk/Scripts/Functions/Help</file> Directory</title>
      <para><indexterm index="cp">Directories trunk Scripts Functions Help</indexterm></para>
      <subheading>Goals</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>...</para>
        </item>
      </itemize>
      <subheading>Description</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>...</para>
        </item>
      </itemize>
      <subheading>Usage</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>...</para>
        </item>
      </itemize>
      <subheading>See also</subheading>
      <menu>
      </menu>
    </section>
  </node>
  <node>
    <nodename>Directories trunk Scripts Functions Locale</nodename>
    <nodenext>Directories trunk Scripts Functions Path</nodenext>
    <nodeprev>Directories trunk Scripts Functions Help</nodeprev>
    <nodeup>Directories</nodeup>
    <section>
      <title>The <file>trunk/Scripts/Functions/Locale</file> Directory</title>
      <para><indexterm index="cp">Directories trunk Scripts Functions Locale</indexterm></para>
      <subheading>Goals</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>...</para>
        </item>
      </itemize>
      <subheading>Description</subheading>
      <para>This command looks for <samp>.sh</samp> files inside Bash directory and extracts translatable strings from files, using <command>xgettext</command> command, in order to create a portable object template (<file>centos-art.sh.pot</file>) file for them.</para>
      <para>With the <file>centos-art.sh.pot</file> file up to date, the <command>centos-art</command> command removes the temporal list of files sotred inside <file>/tmp</file> directory and checks the current language of your user's session to create a portable object file for it, in the location <file>$CLI_LANG/$CLI_LANG.po</file>.</para>
      <para>The <var>CLI_LANG</var> variable discribes the locale language used to output messages inside <command>centos-art</command> command. The locale language used inside <command>centos-art</command> command is taken from the <env>LANG</env> environment variable.  The <var>CLI_LANG</var> variable has the <samp>LL_CC</samp> format, where <samp>LL</samp> is a language code from the ISO-639 standard, and <samp>CC</samp> a country code from the ISO-3166 standard.</para>
      <para>The <env>LANG</env> environment variable is set when you do log in to your system. If you are using a graphical session, change language to your native language and do login. That would set and exoprt the <env>LANG</env> environment variable to the correct value. On the other side, if you are using a text session edit your <file>~/.bash_profile</file> file to set and export the <env>LANG</env> environment variable to your native locale as defines the <command>locale -a</command> command output; do logout, and do login again.</para>
      <para>At this point, the <env>LANG</env> environment variable has the appropriate value you need, in order to translate <command>centos-art.sh</command> messages to your native language (the one set in <env>LANG</env> environment variable).</para>
      <para>With the <file>$CLI_LANG/$CLI_LANG.po</file> file up to date, the <command>centos-art</command> opens it for you to update translation strings. The <command>centos-art</command> command uses the value of <var>EDITOR</var> environment variable to determine your favorite text editor. If no value is defined on <var>EDITOR</var>, the <file>/usr/bin/vim</file> text editor is used as default.</para>
      <para>When you finishd PO file edition and quit text editor, the <command>centos-art</command> command creates the related machine object in the location <file>$CLI_LANG/LC_MESSAGES/$TEXTDOMAIN.mo</file>.</para>
      <para>At this point, all translations you made in the PO file should be available to your language when runing <command>centos-art.sh</command> script.</para>
      <para>In order to make the <command>centos-art.sh</command> internationalization, the <command>centos-art.sh</command> script was modified as described in the <command>gettext</command> info documentation (<command>info gettext</command>).  You can find such modifications in the following files:</para>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para><file>trunk/Scripts/Bash/initFunctions.sh</file></para>
        </item>
        <item>
          <para><file>trunk/Scripts/Bash/Functions/Help/cli_localeMessages.sh</file></para>
        </item>
        <item>
          <para><file>trunk/Scripts/Bash/Functions/Help/cli_localeMessagesStatus.sh</file></para>
        </item>
      </itemize>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>...</para>
        </item>
      </itemize>
      <subheading>Usage</subheading>
      <table>
        <tableitem>
          <tableterm><samp>centos-art locale --edit</samp></tableterm>
          <item>
            <para>Use this command to translate command-line interface output messages in the current system locale you are using (as specified in <env>LANG</env> environment variable).</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><samp>centos-art locale --list</samp></tableterm>
          <item>
            <para>Use this command to see the command-line interface locale report.</para>
          </item>
        </tableitem>
      </table>
      <subheading>See also</subheading>
      <menu>
      </menu>
    </section>
  </node>
  <node>
    <nodename>Directories trunk Scripts Functions Path</nodename>
    <nodenext>Directories trunk Scripts Functions Prepare</nodenext>
    <nodeprev>Directories trunk Scripts Functions Locale</nodeprev>
    <nodeup>Directories</nodeup>
    <section>
      <title>The <file>trunk/Scripts/Functions/Path</file> Directory</title>
      <para><indexterm index="cp">Directories trunk Scripts Functions Path</indexterm></para>
      <subheading>Goals</subheading>
      <para>This section exists to organize files related to <code>path</code> functiontionality.  The <code>path</code> functionality standardizes movement, syncronization, branching, tagging, and general file maintainance inside the repository.</para>
      <subheading>Description</subheading>
      <para><emph>&rdquo;CentOS like trees, has roots, trunk, branches, leaves and flowers.  Day by day they work together in freedom, ruled by the laws of nature and open standards, to show the beauty of its existence.&rdquo;</emph></para>
      <subsubheading>Repository layout</subsubheading>
      <para>The repository layout describes organization of files and directories inside the repository. The repository layout provides the standard backend required for automation scripts to work correctly. If such layout changes unexpectedly, automation scripts may confuse themselves and stop doing what we expect from them to do.</para>
      <para>As convenction, inside CentOS Artwork Repository, we organize files and directories related to CentOS corporate visual identity under three top level directories named: <file>trunk/</file>, <file>branches/</file>, and <file>tags/</file>.</para>
      <para>The <file>trunk/</file> directory (see <xref><xrefnodename>Directories trunk</xrefnodename></xref>) organizes the main development line of CentOS corporate visual identity. Inside <file>trunk/</file> directory structure, the CentOS corporate visual identity concepts are implemented using directories.  There is one directory level for each relevant concept inside the repository. The <file>trunk/</file> directory structure is mainly used to perform development tasks related to CentOS corporate visual identity.</para>
      <para>The <file>branches/</file> directory () oranizes parallel development lines to <file>trunk/</file> directory. The <file>branches/</file> directory is used to set points in time where develpment lines are devided one from another taking separte and idependent lives that share a common past from the point they were devided on. The <file>branches/</file> directory is mainly used to perform quality assurance tasks related to CentOS corporate visual identity.</para>
      <para>The <file>tags/</file> directory (see <xref><xrefnodename>Directories tags</xrefnodename></xref>) organizes parallel frozen lines to <file>branches/</file> directory.  The parallel frozen lines are immutable, nothing change inside them once they has been created.  The <file>tags/</file> directory is mainly used to publish final releases of CentOS corporate visual identity.</para>
      <para>The CentOS Artwork Repository layout is firmly grounded on a Subversion base.  Subversion (<uref><urefurl>http://subversion.tigris.org</urefurl></uref>) is a version control system, which allows you to keep old versions of files and directories (usually source code), keep a log of who, when, and why changes occurred, etc., like CVS, RCS or SCCS.  Subversion keeps a single copy of the master sources.  This copy  is called the source &ldquo;repository&rdquo;; it contains all the information to permit extracting previous versions of those files at any time.</para>
      <subsubheading>Repository name convenctions</subsubheading>
      <para>Repository name convenctions help us to maintain consistency of names inside the repository.</para>
      <para>Repository name convenctions are applied to files and directories inside the repository layout. As convenction, inside the repository layout, file names are all written in lowercase (<samp>01-welcome.png</samp>, <samp>splash.png</samp>, <samp>anaconda_header.png</samp>, etc.) and directory names are all written capitalized (e.g., <samp>Identity</samp>, <samp>Themes</samp>, <samp>Motifs</samp>, <samp>TreeFlower</samp>, etc.).</para>
      <para>Repository name convenctions are implemented inside the <code>cli_getRepoName</code> function of <file>centos-art.sh</file> script. With <code>cli_getRepoName</code> function we reduce the amount of commands and convenctions to remember, concentrating them in just one single place to look for fixes and improvements.</para>
      <subsubheading>Repository work flow</subsubheading>
      <para>Repository work flow describes the steps and time intervals used to produce CentOS corporate visual identity inside CentOS Artwork Repository.</para>
      <para>To illustrate repository work flow let's consider themes' development cycle.</para>
      <para>Initially, we start working themes on their trunk development line (e.g., <file>trunk/Identity/Themes/Motifs/TreeFlower/</file>), here we organize information that cannot be produced automatically (i.e., background images, concepts, color information, screenshots, etc.).</para>
      <para>Later, when theme trunk development line is considered &ldquo;ready&rdquo; for implementation (e.g.,  all required backgrounds have been designed), we create a branch for it (e.g., <file>branches/Identity/Themes/Motifs/TreeFlower/1/</file>).  Once the branch has been created, we forget that branch and continue working the trunk development line while others (e.g., an artwork quality assurance team) test the new branch for tunning it up.</para>
      <para>Once the branch has been tunned up, and considered &ldquo;ready&rdquo; for release, it is freezed under <file>tags/</file> directory (e.g., <file>tags/Identity/Themes/Motifs/TreeFower/1.0/</file>) for packagers, webmasters, promoters, and anyone who needs images from that CentOS theme the tag was created for.</para>
      <para>Both branches and tags, inside CentOS Artwork Repository, use numerical values to identify themselves under the same location. Branches start at one (i.e., <samp>1</samp>) and increment one unit for each branch created from the same trunk development line.  Tags start at zero (i.e., <samp>0</samp>) and increment one unit for each tag created from the same branch development line.</para>
      <quotation>
        <para><strong>Convenction</strong> Do not freeze trunk development lines using tags directly.  If you think you need to freeze a trunk development line, create a branch for it and then freeze that branch instead.</para>
      </quotation>
      <para>The trunk development line may introduce problems we cannot see immediatly. Certainly, the high changable nature of trunk development line complicates finding and fixing such problems. On the other hand, the branched development lines provide a more predictable area where only fixes/corrections to current content are commited up to repository.</para>
      <para>If others find and fix bugs inside the branched development line, we could merge such changes/experiences back to trunk development line (not visversa) in order for future branches, created from trunk, to benefit.</para>
      <para>Time intervals used to create branches and tags may vary, just as different needs may arrive. For example, consider the release schema of CentOS distribution: one major release every 2 years, security updates every 6 months, support for 7 years long. Each time a CentOS distribution is released, specially if it is a major release, there is a theme need in order to cover CentOS distribution artwork requirements. At this point, is where CentOS Artwork Repository comes up to scene.</para>
      <para>Before releasing a new major release of CentOS distribution we create a branch for one of several theme development lines available inside the CentOS Artwork Repository, perform quality assurance on it, and later, freeze that branch using tags. Once a the theme branch has been frozen (under <file>tags/</file> directory), CentOS Packagers (the persons whom build CentOS distribution) can use that frozen branch as source location to fulfill CentOS distribution artwork needs. The same applies to CentOS Webmasters (the persons whom build CentOS websites), and any other visual manifestation required by the project.</para>
      <subsubheading>Parallel directories</subsubheading>
      <para>Inside CentOS Artwork Repository, parallel directories are simple directory entries built from a common parent directory and placed in a location different to that, the common parent directory is placed on. Parallel directories are useful to create branches, tags, translations, documentation, pre-rendering configuration script, and similar directory structures.</para>
      <para>Parallel directories take their structure from one unique parent directory. Inside CentOS Artwork Repository, this unique parent directory is under <file>trunk/Identity</file> location.  The <file>trunk/Identity</file> location must be considered the reference for whatever information you plan to create inside the repository.</para>
      <para>In some circumstances, parallel directories may be created removing uncommon information from their paths. Uncommon path information refers to those directory levels in the path which are not common for other parallel directories.  For example, when rendering <file>trunk/Identity/Themes/Motifs/TreeFlower/Distro</file> directory structure, the <file>centos-art.sh</file> script removes the <file>Motifs/TreeFlower/</file> directory levels from path, in order to build the parallel directory used to retrived translations, and pre-rendering configuration scripts required by <code>render</code> functionality.</para>
      <para>Another example of parallel directory is the documentation structure created by <code>manual</code> functionality. This time, <file>centos-art.sh</file> script uses parallel directory information with uncommon directory levels to build the documentation entry required by Texinfo documentation system, inside the repository.</para>
      <para>Othertimes, parallel directories may add uncommon information to their paths. This is the case we use to create branches and tags. When we create branches and tags, a numerical identifier is added to parallel directory structure path. The place where the numerical identifier is set on is relevant to corporate visual identity structure and should be carefully considered where it will be.</para>
      <para>When one parent directory changes, all their related parallel directories need to be changed too. This is required in order for parallel directories to retain their relation with the parent directory structure.  In the other hand, parallel directories should never be modified under no reason but to satisfy the relation to their parent directory structure.  Liberal change of parallel directories may suppresses the conceptual idea they were initially created for; and certainly, things may stop working the way they should do.</para>
      <subsubheading>Syncronizing path information</subsubheading>
      <para>Parallel directories are very useful to keep repository organized but introduce some complications.  For instance, consider what would happen to functionalities like <code>manual</code> (<samp>trunk Scripts Bash Functions Manual</samp>) that rely on parent directory structures to create documentation entries (using parallel directory structures) if one of those parent directory structures suddenly changes after the documentation entry has been already created for it?</para>
      <para>In such cases, functionalities like <code>manual</code> may confuse themselves if path information is not updated to reflect the relation with its parent directory.  Such functionalities work with parent directory structure as reference; if a parent directory changes, the functionalities dont't even note it because they work with the last parent directory structure available in the repository, no matter what it is.</para>
      <para>In the specific case of documentation (the <code>manual</code> functionality), the problem mentioned above provokes that older parent directories, already documented, remain inside documentation directory structures as long as you get your hands into the documentation directory structure (<file>trunk/Manuals</file>) and change what must be changed to match the new parent directory structure.</para>
      <para>There is no immediate way for <code>manual</code>, and similar functionalities that use parent directories as reference, to know when and how directory movements take place inside the repository. Such information is available only when the file movement itself takes place inside the repository. So, is there, at the moment of moving files, when we need to syncronize parallel directories with their unique parent directory structure.</para>
      <quotation>
        <para><strong>Warning</strong> There is not support for URL reference inside <file>centos-art.sh</file> script.  The <file>centos-art.sh</file> script is designed to work with local files inside the working copy only.</para>
      </quotation>
      <para>As CentOS Artwork Repository is built over a version control system, file movements inside the repository are considered repository changes. In order for these repository changes to be versioned, we need to, firstly, add changes into the version control system, commit them, and later, perform movement actions using version control system commands. This configuration makes possible for everyone to know about changes details inside the repository; and if needed, revert or update them back to a previous revision.</para>
      <para>Finally, once all path information has been corrected, it is time to take care of information inside the files. For instance, considere what would happen if you make a reference to a documentation node, and later the documentation node you refere to is deleted. That would make Texinfo to produce error messages at export time. So, the <file>centos-art.sh</file> script needs to know when such changes happen, in a way they could be noted and handled without producing errors.</para>
      <subsubheading>What is the right place to store it?</subsubheading>
      <para>Occasionly, you may find that new corporate visual identity components need to be added to the repository. If that is your case, the first question you need to ask yourself, before start to create directories blindly all over, is: What is the right place to store it?</para>
      <para>The CentOS Community different free support vains (see: <uref><urefurl>http://wiki.centos.org/GettingHelp</urefurl></uref>) are the best place to find answers to your question, but going there with hands empty is not good idea. It may give the impression you don't really care about. Instead, consider the following suggestions to find your own comprehension and so, make your propositions based on it.</para>
      <para>When we are looking for the correct place to store new files, to bear in mind the corporate visual identity structure used inside the CentOS Artwork Repository (see <xref><xrefnodename>Directories trunk Identity</xrefnodename></xref>) would be probaly the best advice we could offer, the rest is just matter of choosing appropriate names.  To illustrate this desition process let's consider the <file>trunk/Identity/Themes/Motifs/TreeFlower</file> directory as example. It is the trunk development line of <emph>TreeFlower</emph> artistic motif. Artistic motifs are considered part of themes, which in turn are considered part of CentOS corporate visual identity.</para>
      <para>When building parent directory structures, you may find that reaching an acceptable location may take some time, and as it uses to happen most of time; once you've find it, that may be not a definite solution.  There are many concepts that you need to play with, in order to find a result that match the conceptual idea you try to implement in the new directory location. To know which these concepts are, split the location in words and read its documentation entry from less specific to more specific.</para>
      <para>For example, the <file>trunk/Identity/Themes/Motifs/TreeFlower</file> location evolved through several months of contant work and there is no certain it won't change in the future, even it fixes quite well the concept we are trying to implement.  The concepts used in <file>trunk/Identity/Themes/Distro/Motifs/TreeFlower</file> location are described in the following commands, respectively:</para>
      <verbatim xml:space="preserve"><![CDATA[
centos-art manual --read=turnk/
centos-art manual --read=turnk/Identity/
centos-art manual --read=turnk/Identity/Themes/
centos-art manual --read=turnk/Identity/Themes/Motifs/
centos-art manual --read=turnk/Identity/Themes/Motifs/TreeFlower/
]]></verbatim>
      <para>Other location concepts can be found similary as we did above, just change the location we used above by the one you are trying to know concepts for.</para>
      <subheading>Usage</subheading>
      <table>
        <tableitem>
          <tableterm><command>centos-art path --copy='SRC' --to='DST'</command></tableterm>
          <item>
            <para>Copy <option>SRC</option> to <option>DST</option> and schedule <option>DST</option> for addition (with history).  In this command, <file>SRC</file> and <file>DST</file> are both working copy (WC) entries.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><command>centos-art path --delete='SRC'</command></tableterm>
          <item>
            <para>Delete <option>DST</option>. In order for this command to work the file or directory you intend to delete should be under version control first. In this command, <file>SRC</file> is a working copy (WC) entry.</para>
          </item>
        </tableitem>
      </table>
      <subheading>See also</subheading>
      <menu>
        <menuentry>
          <menunode>Directories trunk Scripts</menunode>
          <menutitle>Directories trunk Scripts</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Directories trunk Scripts Functions</menunode>
          <menutitle>Directories trunk Scripts Functions</menutitle>
          <menucomment></menucomment>
        </menuentry>
      </menu>
    </section>
  </node>
  <node>
    <nodename>Directories trunk Scripts Functions Prepare</nodename>
    <nodenext>Directories trunk Scripts Functions Render</nodenext>
    <nodeprev>Directories trunk Scripts Functions Path</nodeprev>
    <nodeup>Directories</nodeup>
    <section>
      <title>The <file>trunk/Scripts/Functions/Prepare</file> Directory</title>
      <para><indexterm index="cp">Directories trunk Scripts Functions Prepare</indexterm></para>
      <subheading>Goals</subheading>
      <para>This section exists to organize files related to <file>centos-art.sh</file> script <samp>prepare</samp> functionality.  The <samp>prepare</samp> functionality of <file>centos-art.sh</file> script helps you to prepare the workstation configuration you are planning to use as host for your working copy of CentOS Artwork Repository.</para>
      <subheading>Description</subheading>
      <para>The first time you download CentOS Artwork Repository you need to configure your workstation in order to use <file>centos-art.sh</file> script.  These preliminar configurations are based mainly on auxiliar RPM packages installation, symbolic links creations, and environment variables definitions.  The <samp>prepare</samp> functionality of <file>centos-art.sh</file> script guides you through this preliminar configuration process.</para>
      <para>If this is the first time you run <file>centos-art.sh</file> script, the appropriate way to use its <samp>prepare</samp> functionality is not using the <file>centos-art.sh</file> script directly, but the absolute path to <command>centos-art.sh</command> script instead (i.e., <file>~/artwork/trunk/Scripts/Bash/centos-art.sh</file>).  This is necessary because <file>centos-art</file> symbolic link, under <file>~/bin/</file> directory, has not been created yet.</para>
      <subsubheading>Packages</subsubheading>
      <para>Installation of auxiliar RPM packages provides the software required to manipulate files inside the repository (e.g., image files, documentation files, translation files, script files, etc.). Most of RPM packages <command>centos-art.sh</command> script uses are shipped with CentOS distribution, and can be installed from CentOS base repository. The only exception is <samp>inkscape</samp>, the package we use to manipulate SVG files.  The <samp>inkscape</samp> package is not inside CentOS distribution so it needs to be installed from third party repositories.</para>
      <quotation>
        <para><strong>Note</strong> Configuration of third party repositories inside CentOS distribution is described in CentOS wiki, specifically in the following URL: <uref><urefurl>http://wiki.centos.org/AdditionalResources/Repositories</urefurl></uref></para>
      </quotation>
      <para>Before installing packages, the <file>centos-art.sh</file> script uses <command>sudo</command> to request root privileges to execute <command>yum</command> installation functionality.  If your user isn't defined as a privileged user&mdash;at least to run <command>yum</command> commands&mdash; inside <file>/etc/sudoers</file> configuration file, you will not be able to perform package installation tasks as set in <file>centos-art.sh</file> script <samp>prepare</samp> functionality.</para>
      <para>Setting sudo privileges to users is an administrative task you have to do by yourself. If you don't have experience with <command>sudo</command> command, please read its man page running the command: <command>man sudo</command>. This reading will be very useful, and with some practice, you will be able to configure your users to have <command>sudo</command> privileges.</para>
      <subsubheading>Links</subsubheading>
      <para>Creation of symbolic links helps us to alternate between different implementations of <file>centos-art.sh</file> script-line (e.g., <file>centos-art.sh</file>, for Bash implementation; <file>centos-art.py</file>, for Python implementation; <file>centos-art.pl</file>, for Perl implementation; and so on for other implementations). The <file>centos-art.sh</file> script-line definition takes place inside your personal binary (<file>~/bin/</file>) directory in order to make the script implementation &mdash;the one that <file>centos-art</file> links to&mdash; available to <var>PATH</var> environment variable.</para>
      <para>Creation of symbolic links helps us to reuse components from repository working copy. For example, color information files maintained inside your working copy must never be duplicated inside program-specific configuration directories that uses them in your workstation (e.g., Gimp, Inkscape, etc.).  Instead, a symbolic link must be created for each one of them, from program-specific configuration directories to files in the working copy.  In this configuration, when someone commits changes to color information files up to central repository, they&mdash;the changes committed&mdash; will be immediatly available to your programs the next time you update your working copy &mdash;the place inside your workstation those color information files are stored&mdash;.</para>
      <para>Creation of symbolic links helps us to make <file>centos-art.sh</file> script functionalities available outside <file>trunk/</file> repository directory structure, but at its same level in repository tree. This is useful if you need to use the &ldquo;render&rdquo; functionality of <command>centos-art.sh</command> under <file>branches/</file> repository directory structure as you usually do inside <file>trunk/</file> repository directory structure. As consequence of this configuration, automation scripts cannot be branched under <file>branches/Scripts</file> directory structure.</para>
      <subsubheading>Environment variables</subsubheading>
      <para>Definition of environemnt variables helps us to set default values to our user session life. The user session environment variable defintion takes place in the user's <file>~/.bash_profile</file> file.  The <samp>prepare</samp> functionality of <file>centos-art.sh</file> script doesn't modify your <file>~/.bash_profile</file> file.</para>
      <para>The <samp>prepare</samp> functionality of <file>centos-art.sh</file> script evaluates the following environment variables:</para>
      <table>
        <tableitem>
          <tableterm><env>EDITOR</env></tableterm>
          <item>
            <para>Default text editor.</para>
            <para>The <file>centos-art.sh</file> script uses default text <env>EDITOR</env> to edit pre-commit subversion messages, translation files, configuration files, script files, and similar text-based files.</para>
            <para>If <env>EDITOR</env> environment variable is not set, <file>centos-art.sh</file> script uses <file>/usr/bin/vim</file> as default text editor. Otherwise, the following values are recognized by <file>centos-art.sh</file> script:</para>
            <itemize>
              <itemfunction>&bullet;</itemfunction>
              <item>
                <para><file>/usr/bin/vim</file></para>
              </item>
              <item>
                <para><file>/usr/bin/emacs</file></para>
              </item>
              <item>
                <para><file>/usr/bin/nano</file></para>
              </item>
            </itemize>     
            <para>If no one of these values is set in <env>EDITOR</env> environment variable, <file>centos-art.sh</file> uses <file>/usr/bin/vim</file> text editor by default.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><env>TEXTDOMAIN</env></tableterm>
          <item>
            <para>Default domain used to retrieve translated messages.  This variable is set in <file>initFunctions.sh</file> and shouldn't be changed.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><env>TEXTDOMAINDIR</env></tableterm>
          <item>
            <para>Default directory used to retrieve translated messages.  This variable is set in <file>initFunctions.sh</file> and shouldn't be changed.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><env>LANG</env></tableterm>
          <item>
            <para>Default locale information.</para>
            <para>This variable is initially set in the configuration process of CentOS distribution installer (i.e., Anaconda), specifically in the <samp>Language</samp> step; or once installed using the <command>system-config-language</command> tool.</para>
            <para>The <file>centos-art.sh</file> script uses the <var>LANG</var> environment variable to know in which language the script messages are printed out.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><env>TZ</env></tableterm>
          <item>
            <para>Default time zone representation.</para>
            <para>This variable is initially set in the configuration process of CentOS distribution installer (i.e., Anaconda), specifically in the <samp>Date and time</samp> step; or once installed using the <command>system-config-date</command> tool.</para>
            <para>The <file>centos-art.sh</file> script doesn't use the <var>TZ</var> environment variable information at all. Instead, this variable is used by the system shell to show the time information according to your phisical location on planet Earth.</para>
            <para>Inside your computer, the time information is firstly set in the BIOS clock (which may need correction), and later in the configuration process of CentOS distribution installer (or later, by any of the related configuration tools inside CentOS distribution).  Generally, setting time information is a straight-forward task and configuration tools available do cover most relevant location. However, if you need a time precision not provided by the configuration tools available inside CentOS distribution then, using <var>TZ</var> variable may be necessary.</para>
            <quotation>
              <para><strong>Convenction</strong> In order to keep changes syncronized between central repository and its working copies: configure both repository server and workstations (i.e., the place where each working copy is set on) to use Coordinated Universal Time (UTC) as base time representation.  Later, correct the time information for your specific location using time zone correction.</para>
            </quotation>
            <para>The format of <var>TZ</var> environment variable is described in <file>tzset(3)</file> manual page.</para>
          </item>
        </tableitem>
      </table>
      <subsubheading>Shell Script Files</subsubheading>
      <para>The <code>shell</code> functionality of <file>centos-art.sh</file> script helps you to maintain bash scripts inside repository. For example, suppose you've created many functionalities for <file>centos-art.sh</file> script, and you want to use a common copyright and license note for consistency in all your script files. If you have a bunch of files, doing this one by one wouldn't be a big deal. In contrast, if the amount of files grows, updating the copyright and license note for all of them would be a task rather tedious. The <code>shell</code> functionality exists to solve maintainance tasks just as the one previously mentioned.</para>
      <para>When you use <code>shell</code> functionality to update copyright inside script files, it is required that your script files contain (at least) the following top commentary structure:</para>
      <verbatim xml:space="preserve"><![CDATA[
 1| #!/bin/bash
 2| #
 3| # doSomething.sh -- The function description goes here.
 4| # 
 5| # Copyright
 6| #
 7| # ...
 8| #
 9| # ----------------------------------------------------------------------
10| # $Id$
11| # ----------------------------------------------------------------------
12|
13| function doSomething {
14|     
15| }
]]></verbatim>
      <para>Relevant lines in the above structure are lines from 5 to 9. Everything else in the file is left immutable.</para>
      <para>When you are updating copyright through <code>shell</code> functionality,  the <file>centos-art.sh</file> script replaces everything in-between line 5 &mdash;the first one matching <samp>^# Copyright .+$</samp> string&mdash; and line 9&mdash;the first long dash separator matching <samp>^# -+$</samp>&mdash; with the content of copyright template instance.</para>
      <quotation>
        <para><strong>Caution</strong> Be sure to add the long dash separator that matches <samp>^# -+$</samp> regular expression <emph>before</emph> the function definition. Otherwise, if the <samp>Copyright</samp> line is present but no long dash separator exists, <file>centos-art.sh</file> will remove anything in-between the <samp>Copyright</samp> line and the end of file. This way you may lost your function definitions entirely.</para>
      </quotation>
      <para>The copyright template instance is created from one copyright template stored in the <file>Config/tpl_forCopyright.sed</file> file.  The template instance is created once, and later removed when no longer needed. At this moment, when template instance is created, the <file>centos-art.sh</file> script takes advantage of automation in order to set copyright full name and date dynamically.</para>
      <para>When you use <code>shell</code> functionality to update copyright, the first thing <file>shell</file> functionality does is requesting copyright information to user, and later, if values were left empty (i.e., no value was typed before pressing <key>RET</key> key), the <file>shell</file> functionality uses its own default values.</para>
      <para>When <code>shell</code> functionality uses its own default values, the final copyright note looks like the following:</para>
      <verbatim xml:space="preserve"><![CDATA[
 1| #!/bin/bash
 2| #
 3| # doSomthing.sh -- The function description goes here.
 4| #
 5| # Copyright (C) 2003, 2010 The CentOS Project
 6| # 
 7| # This program is free software; you can redistribute it and/or modify
 8| # it under the terms of the GNU General Public License as published by
 9| # the Free Software Foundation; either version 2 of the License, or
10| # (at your option) any later version.
11| # 
12| # This program is distributed in the hope that it will be useful, but
13| # WITHOUT ANY WARRANTY; without even the implied warranty of
14| # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
15| # General Public License for more details.
16| #
17| # You should have received a copy of the GNU General Public License
18| # along with this program; if not, write to the Free Software
19| # Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
20| # USA.
21| #
22| # ----------------------------------------------------------------------
23| # $Id$
24| # ----------------------------------------------------------------------
25|
26| function doSomething {
27|
28| }
]]></verbatim>
      <para>Relevant lines in the above structure are lines from 5 to 22.  Pay attention how the copyright line was built, and how the license was added into the top comment where previously was just three dots. Everything else in the file was left immutable.</para>
      <para>To change copyright information (i.e., full name or year information), run the <code>shell</code> functionality over the root directory containing the script files you want to update copyright in and enter the appropriate information when it be requested. You can run the <code>shell</code> functionality as many times as you need to.</para>
      <para>To change copyright license (i.e., the text in-between lines 7 and 20), you need to edit the <file>Config/tpl_forCopyright.sed</file> file, set the appropriate information, and run the <code>shell</code> functionality once again for changes to take effect over the files you specify.</para>
      <quotation>
        <para><strong>Important</strong> The <file>centos-art.sh</file> script is released as:</para>
        <verbatim xml:space="preserve"><![CDATA[
GNU GENERAL PUBLIC LICENSE
Version 2, June 1991

Copyright (C) 1989, 1991 Free Software Foundation, Inc.
                         675 Mass Ave, Cambridge, MA 02139, USA
]]></verbatim>
        <para>Do not change the license information under which <file>centos-art.sh</file> script is released. Instead, if you think a different license must be used, please share your reasons at <email><emailaddress>centos-devel@centos-art.sh</emailaddress></email> mailing list.</para>
        <para>See file <uref><urefurl>file:///home/centos/artwork/trunk/Scripts/COPYING</urefurl><urefdesc>trunk/Scripts/COPYING</urefdesc></uref>, for a complete license description.</para>
      </quotation>
      <subsubheading>SVG Files</subsubheading>
      <para>The <code>svg</code> functionality of <file>centos-art.sh</file> script helps you to maintain scalable vector graphics (SVG) inside repository. For example, suppose you've been working in CentOS default design models under <file>trunk/Identity/Themes/Models/</file>, and you want to set common metadata to all of them, and later remove all unused SVG defintions from <samp>*.svg</samp> files. Doing so file by file may be a tedious task, so the <file>centos-art.sh</file> script provides the <code>svg</code> functionality to aid you maintain such actions.</para>
      <para>The metadata used is defined by Inkscape 0.46 using the SVG standard markup. The <file>centos-art.sh</file> script replaces everything in-between <code>&lt;metadata</code> and <code>&lt;/metadata&gt;</code> tags with a predefined metadata template we've set for this purpose.</para>
      <para>The metadata template was created using the metadata information of a file which, using Inkscape 0.46, all metadata fields were set. This created a complete markup representation of how SVG metadata would look like. Later, we replaced every single static value with a translation marker in the form <samp>=SOMETEXT=</samp>, where <code>SOMETEXT</code> is the name of its main opening tag. Later, we transform the metadata template into a sed replacement set of commads escaping new lines at the end of each line.</para>
      <para>With metadata template in place, the <file>centos-art.sh</file> script uses it to create a metadata template instance for the file being processed currently.  The metadata template instance contains the metadata portion of sed replacement commands with translation markers already traduced.  In this action, instance creation, is where we take advantage of automation and generate metadata values like title, date, keywords, source, identifier, and relation dynamically, based on the file path <file>centos-art.sh</file> script is currently creating metadata information for.</para>
      <para>With metadata template instance in place, the <file>centos-art.sh</file> script uses it to replace real values inside all <samp>.svg</samp> files under the current location you're running the <file>centos-art.sh</file> script on.  Default behaviour is to ask user to enter each metadatum required, one by one. If user leaves metadatum empty, by pressing <key>RET</key> key, <file>centos-art.sh</file> uses its default value.</para>
      <para>Many of the no-longer-used gradients, patterns, and markers (more precisely, those which you edited manually) remain in the corresponding palettes and can be reused for new objects. However if you want to optimize your document, use the <samp>Vacuum Defs</samp> command in <samp>File</samp> menu. It will remove any gradients, patterns, or markers which are not used by anything in the document, making the file smaller.</para>
      <para>If you have one or two couple of files, removing unused definitions using the graphical interface may be enough to you.  In contrast, if you have dozens or even houndreds of scalable vector graphics files to maintain it is not a fun task to use the graphical interface to remove unused definitions editing those files one by one.</para>
      <para>To remove unused definitions from several scalable vector graphics files, the <file>centos-art.sh</file> script uses Inkscape command-line interface, specifically with the <option>--vaccum-defs</option> option.</para>
      <subsubheading>XHTML Files</subsubheading>
      <subheading>Usage</subheading>
      <table>
        <tableitem>
          <tableterm><command>centos-art prepare --packages</command></tableterm>
          <item>
            <para>Verify required packages your workstation needs in order to run the <file>centos-art.sh</file> script correctly.  If there are missing packages, the <file>centos-art.sh</file> script asks you to confirm their installation. When installing packages, the <file>centos-art.sh</file> script uses the <command>yum</command> application in order to achieve the task.</para>
            <para>In case all packages required by <file>centos-art.sh</file> script are already installed in your workstation, the message <samp>The required packages are already installed.</samp> is output for you to know.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><command>centos-art prepare --links</command></tableterm>
          <item>
            <para>Verify required links your workstation needs in order to run the centos-art command correctly.  If any required link is missing, the <command>centos-art.sh</command> script asks you to confirm their installation. To install required links, the <command>centos-art.sh</command> script uses the <command>ln</command> command.</para>
            <para>In case all links required by <file>centos-art.sh</file> script are already created in your workstation, the message <samp>The required links are already installed.</samp> is output for you to know.</para>
            <para>In case a regular file exists with the same name of a required link, the <file>centos-art.sh</file> script outputs the <samp>Already exists as regular file.</samp> message when listing required links that will be installed. Of course, as there is already a regular file where must be a link, no link is created. In such cases the <file>centos-art.sh</file> script will fall into a continue installation request for that missing link.  To end this continue request you can answer <samp>No</samp>, or remove the existent regular file to let <file>centos-art.sh</file> script install the link on its place.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><command>centos-art prepare --environment</command></tableterm>
          <tableterm><command>centos-art prepare --environment --filter='regex'</command></tableterm>
          <item>
            <para>Output a brief description of environment variables used by <file>centos-art.sh</file> script.</para>
            <para>If <samp>--filter</samp> option is provided, output is reduced as defined in the <samp>regex</samp> regular expression value. If <samp>--filter</samp> option is specified but <samp>regex</samp> value is not, the <file>centos-art.sh</file> script outputs information as if <samp>--filter</samp> option had not been provided at all.</para>
          </item>
        </tableitem>
      </table>
      <subheading>See also</subheading>
      <menu>
        <menuentry>
          <menunode>Directories trunk Scripts</menunode>
          <menutitle>Directories trunk Scripts</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Directories trunk Scripts Functions</menunode>
          <menutitle>Directories trunk Scripts Functions</menutitle>
          <menucomment></menucomment>
        </menuentry>
      </menu>
    </section>
  </node>
  <node>
    <nodename>Directories trunk Scripts Functions Render</nodename>
    <nodenext>Directories trunk Scripts Functions Render Config</nodenext>
    <nodeprev>Directories trunk Scripts Functions Prepare</nodeprev>
    <nodeup>Directories</nodeup>
    <section>
      <title>The <file>trunk/Scripts/Functions/Render</file> Directory</title>
      <para><indexterm index="cp">Directories trunk Scripts Functions Render</indexterm>Rendition is the action through we produce content (images specially) inside The CentOS Artwork Repository. In order to produce content through rendition, the directory structure where that content is stored in must be renderable (i.e., the rendition action must be applied to a directory structure considered renderable).  Presently, renderable directories are stored under <file>trunk/Identity/Images</file> and <file>trunk/Identity/Themes/Motifs</file> directories only.</para>
      <para>In order to render content inside renderable directory structures you can use the <code>render</code> functionality of <command>centos-art.sh</command> script.  The <code>render</code> functionality takes one design template (a.k.a., design model) from the template directory related and creates an instance of it in order to apply translation messages, if any. Later, using the translated design template instance, the command renders the final content based on whether the design template instance is a SVG file or XHTML file.  If the design template instace is a SVG file, the final content produced is a PNG image. On the other hand, if the design template instance is a XHTML file, the final content produced is a XHTML file. The rendition flow described so far is known as the <command>centos-art.sh</command> script <emph>base-rendition</emph> flow and take place both in <emph>direct rendition</emph> and <emph>theme rendition</emph>.</para>
      <para>Besides the base-rendition flow, the <command>centos-art</command> provides <emph>post-rendition</emph> and <emph>last-rendition</emph> flows.  The post-rendition flow is applied to files produced as result of base-rendition flow under the same directory structure. For example, you can use post-rendition action to convert the PNG base output into different outputs formats (e.g., JPG, PDF, etc.) before passing to process the next file in the same directory structure.  The last-rendition flow, on the other hand, is applied to all files produced as result of both base-rendition and post-rendition flows in the same directory structure, just before passing to process a different directory structure.  For example, the <file>Preview.png</file> image from Ksplash component is made of three images. In order to build the <file>Preview.png</file> image through <command>centos-art.sh</command> we need to wait for all the three images the <file>Preview.png</file> image is made of to be rendered in order to combine them all together into just one image (i.e., the <file>Preview.png</file> image).  This is something we can't do using post-rendition flow.</para>
      <para>Inside <file>trunk/Identity</file> directory structure, you can find that base-rendition, post-rendition and last-rendition flows can be combined to build <emph>directory-specific</emph> rendition.  The directory-specific rendition exists to process specific renderable directories in very specific ways. Using directory-specific rendition speeds up production of different components like Syslinux, Grub, Gdm, Kdm and Ksplash that require intermediate formats or even several independent files, in order for the final content to be created.</para>
      <subheading>Renderable identity directory structures</subheading>
      <para>Renderable identity directory structures are the starting point of identity rendition. Whenever we want to render a component of CentOS corporate visual identity, we need to point <file>centos-art.sh</file> to a renderable identity directory structure. If such renderable identity directory structure doesn't exist, then it is good time to create it.</para>
      <para>Inside the working copy, one renderable identity directory structures represents one visual manifestation of CentOS corporate visual identity, or said differently, each visual manifestation of CentOS corporate visual identity should have one renderable identity directory structure.</para>
      <para>Inside renderable identity directory structures, <file>centos-art.sh</file> can render both image-based and text-based files. Specification of whether a renderable identity directory structure produces image-based or text-based content is a configuration action that takes place in the pre-rendition configuration script of that renderable identity directory structure.</para>
      <para>Inside renderable identity directory structures, content production is organized in different configurations. A content production configuration is a unique combination of the components that make an identity directory structure renderable. One content production configuration does one thing only (e.g., to produce untranslated images), but it can be extended (e.g., adding translation files) to achieve different needs (e.g., to produce translated images).</para>
      <subsubheading>Design template without translation</subsubheading>
      <para>The design template without translation configuration is based on a renderable identity directory structure with an empty translation directory structure. In this configuration, one design template produces one untranslated file. Both design templates and final untranslated files share the same file name, but they differ one another in file-type and file-extension.</para>
      <para>For example, to produce images without translations (there is no much use in producing text-based files without translations), consider the following configuration:</para>
      <table>
        <tableitem>
          <tableterm><strong>One renderable identity directory structure:</strong></tableterm>
          <item>
            <para>In this example we used <file>Identity/Path/To/Dir</file> as the identity component we want to produce untranslated images for.  Identity components can be either under <file>trunk/</file> or <file>branches/</file> directory structure.</para>
            <para>The identity component (i.e., <file>Identity/Path/To/Dir</file>, in this case) is also the bond component we use to connect the identity directory structures with their respective auxiliar directories (i.e., translation directory structres and pre-rendition configuration structures).  The bond component is the path convenction that <file>centos-art.sh</file> uses to know where to look for related translations, configuration scripts and whatever auxiliar thing a renderable directory structure may need to have.</para>
            <verbatim xml:space="preserve"><![CDATA[
      | The bond component
      |----------------->|
trunk/Identity/Path/To/Dir  <-- Renderable identity directory structure.
|-- Tpl                     <-- Design template directory.
|   `-- file.svg            <-- Design template file.
`-- Img                     <-- Directory used to store final files.
    `-- file.png            <-- Final image-based file produced from
                                design template file.
]]></verbatim>
            <para>Inside design template directory, design template files are based on <acronym><acronymword>SVG</acronymword><acronymdesc>Scalable Vector Graphics</acronymdesc></acronym> and use the extension <code>.svg</code>.  Design template files can be organized using several directory levels to create a simple but extensible configuration, specially if translated images are not required.</para>
            <para>In order for <acronym><acronymword>SVG</acronymword><acronymdesc>Scalable Vector Graphics</acronymdesc></acronym> files to be considered &ldquo;design template&rdquo; files, they should be placed under the design template directory and to have set a <code>CENTOSARTWORK</code> object id inside.</para>
            <para>The <code>CENTOSARTWORK</code> word itself is a convenction name we use to define which object/design area, inside a design template, the <file>centos-art.sh</file> script will use to export as <acronym><acronymword>PNG</acronymword><acronymdesc>Portable Network Graphic</acronymdesc></acronym> image at rendition time. Whithout such object id specification, the <file>centos-art.sh</file> script cannot know what object/design area you (as designer) want to export as <acronym><acronymword>PNG</acronymword><acronymdesc>Portable Network Graphic</acronymdesc></acronym> image file.</para>
            <quotation>
              <para><strong>Note</strong> At rendition time, the content of <file>Img/</file> directory structure is produced by <file>centos-art.sh</file> automatically.</para>
            </quotation>
            <para>When a renderable identity directory structure is configured to produce image-based content, <file>centos-art.sh</file> produces <acronym><acronymword>PNG</acronymword><acronymdesc>Portable Network Graphics</acronymdesc></acronym> files with the <code>.png</code> extension. Once the base image format has been produced, it is possible for <file>centos-art.sh</file> to use it in order to automatically create other image formats that may be needed (&mdash; <strong>Removed</strong>(pxref:trunk Scripts Bash Functions Render Config) &mdash;).</para>
            <para>Inside the working copy, you can find an example of &ldquo;design template without translation&rdquo; configuration at <file>trunk/Identity/Models/</file>.</para>
            <para>See <xref><xrefnodename>Directories trunk Identity</xrefnodename></xref>, for more information.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><strong>One translation directory structure:</strong></tableterm>
          <item>
            <para>In order for an identity entry to be considered an identity renderable directory structure, it should have a translation entry. The content of the translation entry is relevant to determine how to process the identity renderable directory entry.</para>
            <para>If the translation entry is empty (i.e., there is no file inside it), <file>centos-art.sh</file> interprets the identity renderable directory structure as a &ldquo;design templates without translation&rdquo; configuration.</para>
            <verbatim xml:space="preserve"><![CDATA[
                   | The bond component
                   |----------------->|
trunk/Translations/Identity/Path/To/Dir
`-- (empty)
]]></verbatim>
            <para>If the translation entry is not empty, <file>centos-art.sh</file> can interpret the identity renderable directory structure as one of the following configurations: &ldquo;design template with translation (one-to-one)&rdquo; or &ldquo;design template with translation (optimized)&rdquo;. Which one of these configurations is used depends on the value assigned to the matching list (<var>MATCHINGLIST</var>) variable in the pre-rendition configuration script of the renderable identity directory structure we are producing images for.</para>
            <para>If the matching list variable is empty (as it is by default), then &ldquo;design template with translation (one-to-one)&rdquo; configuration is used. In this configuration it is required that both design templates and translation files have the same file names. This way, <emph>one</emph> translation files is applied to <emph>one</emph> design template, to produce <emph>one</emph> translated image.</para>
            <para>If the matching list variable is not empty (because you redefine it in the pre-rendition configuration script), then &ldquo;design template with translation (optimized)&rdquo; configuration is used instead. In this configuration, design templates and translation files don't need to have the same names since such name relationship between them is specified in the matching list properly.</para>
            <para>&mdash; <strong>Removed</strong>(xref:trunk Translations) &mdash;, for more information.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><strong>One pre-rendition configuration script:</strong></tableterm>
          <item>
            <para>In order to make an identity directory structure renderable, a pre-rendition configuration script should exist for it.  The pre-rendition configuration script specifies what type of rendition does <file>centos-art.sh</file> will perform over the identity directory structure and how does it do that.</para>
            <verbatim xml:space="preserve"><![CDATA[
                                           | The bond component
                                           |----------------->|
trunk/Scripts/Bash/Functions/Render/Config/Identity/Path/To/Dir
`-- render.conf.sh
]]></verbatim>
            <para>In this configuration the pre-rendition configuration script (<file>render.conf.sh</file>) would look like the following:</para>
            <verbatim xml:space="preserve"><![CDATA[
function render_loadConfig {

    # Define rendition actions.
    ACTIONS[0]='BASE:renderImage'

}
]]></verbatim>
            <para>Since translation directory structure is empty, <file>centos-art.sh</file> assumes a &ldquo;design template without translation&rdquo; configuration to produce untranslated images.</para>
            <para>To produce untranslated images, <file>centos-art.sh</file> takes one design template and creates one temporal instance from it.  Later, <file>centos-art.sh</file> uses the temporal design template instance as source file to export the final untranslated image. The action of exporting images from <acronym><acronymword>SVG</acronymword><acronymdesc>Scalable Vector Graphics</acronymdesc></acronym> to <acronym><acronymword>PNG</acronymword><acronymdesc>Portable Network Graphics</acronymdesc></acronym> is possible thanks to Inkscape's command-line interface and the <code>CENTOSARTWORK</code> object id we previously set inside design templates.</para>
            <verbatim xml:space="preserve"><![CDATA[
centos-art.sh render --identity=trunk/Identity/Path/To/Dir
-------------------------------------------------
0 | Execute centos-art.sh on renderable identity directory structure.
--v----------------------------------------------
trunk/Identity/Path/To/Dir/Tpl/file.svg
-------------------------------------------------
1 | Create instance from design template.
--v----------------------------------------------
/tmp/centos-art.sh-a07e824a-5953-4c21-90ae-f5e8e9781f5f-file.svg
-------------------------------------------------
2 | Render untranslated image from design template instance.
--v----------------------------------------------
trunk/Identity/NewDir/Img/file.png
-------------------------------------------------
3 | Remove design template instance.
]]></verbatim>
            <para>Finally, when the untranslated image has been created, the temporal design template instance is removed. At this point, <file>centos-art.sh</file> takes the next design template and repeats the whole production flow once again (design template by design template), until all design templates be processed.</para>
            <para>&mdash; <strong>Removed</strong>(xref:trunk Scripts Bash Functions Render Config) &mdash;, for more information.</para>
          </item>
        </tableitem>
      </table>
      <subsubheading>Design template with translation (one-to-one)</subsubheading>
      <para>Producing untranslated images is fine in many cases, but not always. Sometimes it is required to produce images in different languages and that is something that untrasnlated image production cannot achieve. However, if we fill its empty translation entry with translation files (one for each design template) we extend the production flow from untranslated image production to translated image production.</para>
      <para>In order for <file>centos-art.sh</file> to produce images correctly, each design template should have one translation file and each translation file should have one design template.  Otherwise, if there is a missing design template or a missing translation file, <file>centos-art.sh</file> will not produce the final image related to the missing component.</para>
      <para>In order for <file>centos-art.sh</file> to know which is the relation between translation files and design templates the translation directory structure is taken as reference.  For example, the <file>trunk/Translations/Identity/Path/To/Dir/file.sed</file> translation file does match <file>trunk/Identity/Path/To/Dir/Tpl/file.svg</file> design template, but it doesn't match <file>trunk/Identity/Path/To/Dir/File.svg</file> or <file>trunk/Identity/Path/To/Dir/Tpl/File.svg</file> or <file>trunk/Identity/Path/To/Dir/Tpl/SubDir/file.svg</file> design templates.</para>
      <para>The pre-rendition configuration script used to produce untranslated images is the same we use to produce translated images. There is no need to modify it. So, as we are using the same pre-rendition configuration script, we can say that translated image production is somehow an extended/improved version of untranslated image production.</para>
      <quotation>
        <para><strong>Note</strong> If we use no translation file in the translation entry (i.e., an empty directory), <file>centos-art.sh</file> assumes the untranslated image production. If we fill the translation entry with translation files, <file>centos-art.sh</file> assumes the translated image production.</para>
      </quotation>
      <para>To produce final images, <file>centos-art.sh</file> applies one translation file to one design template and produce a translated design template instance. Later, <file>centos-art.sh</file> uses the translated template instance to produce the translated image. Finally, when the translated image has been produced, <file>centos-art.sh</file> removes the translated design template instance. This production flow is repeated for each translation file available in the translatio entry.</para>
      <verbatim xml:space="preserve"><![CDATA[
centos-art.sh render --identity=trunk/Identity/Path/To/Dir
-------------------------------------------------
0 | Execute centos-art.sh on directory structure.
--v----------------------------------------------
trunk/Translations/Identity/Path/To/Dir/file.sed
-------------------------------------------------
1 | Apply translation to design template.
--v----------------------------------------------
trunk/Identity/Path/To/Dir/Tpl/file.svg
-------------------------------------------------
2 | Create design template instance.
--v----------------------------------------------
/tmp/centos-art.sh-a07e824a-5953-4c21-90ae-f5e8e9781f5f-file.svg
-------------------------------------------------
3 | Render PNG image from template instance.
--v----------------------------------------------
trunk/Identity/NewDir/Img/file.png
-------------------------------------------------
4 | Remove design template instance.
]]></verbatim>
      <subsubheading>Design template with translation (optimized)</subsubheading>
      <para>Producing translated images satisfies almost all our production images needs, but there is still a pitfall in them. In order to produce translated images as in the &ldquo;one-to-one&rdquo; configuration describes previously, it is required that one translation file has one design template. That's useful in many cases, but what would happen if we need to apply many different translation files to the same design template?  Should we have to duplicate the same design template file for each translation file, in order to satisfy the &ldquo;one-to-one&rdquo; relation? What if we need to assign translation files to design templates arbitrarily?</para>
      <para>Certenly, that's something the &ldquo;one-to-one&rdquo; configuration cannot handle.  So, that's why we had to &ldquo;optimize&rdquo; it. The optimized configuration consists on using a matching list (<var>MATCHINGLIST</var>) variable that specifies the relationship between translation files and design templates in an arbitrary way. Using such matching list between translation files and design templates let us use as many assignment combinations as translation files and design templates we are working with.</para>
      <para>The <var>MATCHINGLIST</var> variable is set in the pre-rendition configuration script of the component we want to produce images for. By default, the <var>MATCHINGLIST</var> variable is empty which means no matching list is used. Otherwise, if <var>MATCHINGLIST</var> variable has a value different to empty value then, <file>centos-art.sh</file> interprets the matching list in order to know how translation files are applied to design templates.</para>
      <para>For example, consider the following configuration:</para>
      <table>
        <tableitem>
          <tableterm><strong>One entry under <file>trunk/Identity/</file>:</strong></tableterm>
          <item>
            <para>In this configuration we want to produce three images using a paragraph-based style, controlled by <file>paragraph.svg</file> design template; and one image using a list-based style, controlled by <file>list.svg</file> design template.</para>
            <verbatim xml:space="preserve"><![CDATA[
trunk/Identity/Path/To/Dir
|-- Tpl
|   |-- paragraph.svg
|   `-- list.svg
`-- Img
    |-- 01-welcome.png
    |-- 02-donate.png
    |-- 03-docs.png
    `-- 04-support.png
]]></verbatim>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><strong>One entry under <file>trunk/Translations/</file>:</strong></tableterm>
          <item>
            <para>In order to produce translated images we need to have one translation file for each translated image we want to produce. Notice how translation names do match final image file names, but how translation names do not match design template names. When we use matching list there is no need for translation files to match the names of design templates, such name relation is set inside the matching list itself.</para>
            <verbatim xml:space="preserve"><![CDATA[
trunk/Translations/Identity/Path/To/Dir
|-- 01-welcome.sed
|-- 02-donate.sed
|-- 03-docs.sed
`-- 04-support.sed
]]></verbatim>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><strong>One entry under <file>trunk/trunk/Scripts/Bash/Functions/Render/Config/</file>:</strong></tableterm>
          <item>
            <para>In order to produce different translated images using specific design templates, we need to specify the relation between translation files and design templates in a way that <file>centos-art.sh</file> could know exactly what translation file to apply to what design template. This relation between translation files and design templates is set using the matching list <var>MATCHINGLIST</var> variable inside the pre-rendition configuration script of the component we want to produce images for.</para>
            <verbatim xml:space="preserve"><![CDATA[
trunk/Scripts/Bash/Functions/Render/Config/Identity/Path/To/Dir
`-- render.conf.sh
]]></verbatim>
            <para>In this configuration the pre-rendition configuration script (<file>render.conf.sh</file>) would look like the following:</para>
            <verbatim xml:space="preserve"><![CDATA[
function render_loadConfig {

    # Define rendition actions.
    ACTIONS[0]='BASE:renderImage'

    # Define matching list.
    MATCHINGLIST="\
    paragraph.svg:\
        01-welcome.sed\
        02-donate.sed\
        04-support.sed
    list.svg:\
        03-docs.sed
    "

}
]]></verbatim>
            <para>As result, <file>centos-art.sh</file> will produce <file>01-welcome.png</file>, <file>02-donate.png</file> and <file>04-support.png</file> using the paragraph-based design template, but <file>03-docs.png</file> using the list-based design template.</para>
          </item>
        </tableitem>
      </table>
      <subsubheading>Design template with translation (optimized+flexibility)</subsubheading>
      <para>In the production models we've seen so far, there are design templates to produce untranslated images and translation files which combiend with design templates produce translated images. That may seems like all our needs are covered, doesn't it? Well, it <emph>almost</emph> does.</para>
      <para>Generally, we use design templates to define how final images will look like. Generally, each renderable directory structure has one <file>Tpl/</file> directory where we organize design templates for that identity component. So, we can say that there is only one unique design template definition for each identity component; or what is the same, said differently, identity components can be produced in one way only, the way its own design template directory specifies.  This is not enough for theme production. It is a limitation, indeed.</para>
      <para>Initially, to create one theme, we created one renderable directory structure for each theme component. When we found ourselves with many themes, and components inside them, it was obvious that the same design model was duplicated inside each theme. As design models were independently one another, if we changed one theme's design model, that change was useless to other themes. So, in order to reuse design model changes, we unified design models into one common directory structure.</para>
      <para>With design models unified in a common structure, another problem rose up. As design models also had the visual style of theme components, there was no difference between themes, so there was no apparent need to have an independent theme directory structure for each different theme.  So, it was also needed to separate visual styles from design models.</para>
      <para>At this point there are two independent worklines: one directory structure to store design models (the final image characteristics [i.e., dimensions, translation markers, etc.]) and one directory structure to store visual styles (the final image visual style [i.e., the image look and feel]).  So, it is possible to handle both different design models and different visual styles independtly one another and later create combinations among them using <file>centos-art.sh</file>.</para>
      <para>For example, consider the following configuration:</para>
      <table>
        <tableitem>
          <tableterm><strong>One entry under <file>trunk/Identity/Themes/Models/</file>:</strong></tableterm>
          <item>
            <para>The design model entry exists to organize design model files (similar to design templates). Both design models and design templates are very similar; they both should have the <code>CENTOSARTWORK</code> export id present to identify the exportation area, translation marks, etc. However, design models do use dynamic backgrounds inclusion while design templates don't.</para>
            <verbatim xml:space="preserve"><![CDATA[
                        THEMEMODEL | | The bond component
                             |<----| |--------------------->|
trunk/Identity/Themes/Models/Default/Distro/Anaconda/Progress/
|-- paragraph.svg
`-- list.svg
]]></verbatim>
            <para>Inisde design models, dynamic backgrounds are required in order for different artistic motifs to reuse common design models. Firstly, in order to create dynamic backgrounds inside design models, we import a bitmap to cover design model's background and later, update design model's path information to replace fixed values to dynamic values.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><strong>One entry under <file>trunk/Identity/Themes/Motifs/</file>:</strong></tableterm>
          <item>
            <para>The artistic motif entry defines the visual style we want to produce images for, only. Final images (i.e., those built from combining both design models and artistic motif backrounds) are not stored here, but under branches directory structure. In the artistic motif entry, we only define those images that cannot be produced automatically by <file>centos-art.sh</file> (e.g., Backgrounds, Color information, Screenshots, etc.).</para>
            <verbatim xml:space="preserve"><![CDATA[
                  Artistic motif name | | Artistic motif backgrounds
                             |<-------| |-------->|
trunk/Identity/Themes/Motifs/TreeFlower/Backgrounds/
|-- Img
|   |-- Png
|   |   |-- 510x300.png
|   |   `-- 510x300-final.png
|   `-- Jpg
|       |-- 510x300.jpg
|       `-- 510x300-final.jpg
|-- Tpl
|   `-- 510x300.svg
`-- Xcf
    `-- 510x300.xcf
]]></verbatim>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><strong>One entry under <file>trunk/Translations/</file>:</strong></tableterm>
          <item>
            <para>The translation entry specifies, by means of translation files, the language-specific information we want to produce image for. When we create the translation entry we don't use the name of neither design model nor artistic motif, just the design model component we want to produce images for.</para>
            <verbatim xml:space="preserve"><![CDATA[
                                   | The bond component
                                   |--------------------->|
trunk/Translations/Identity/Themes/Distro/Anaconda/Progress/
`-- 5
    |-- en
    |   |-- 01-welcome.sed
    |   |-- 02-donate.sed
    |   `-- 03-docs.sed
    `-- es
        |-- 01-welcome.sed
        |-- 02-donate.sed
        `-- 03-docs.sed
]]></verbatim>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><strong>One entry under <file>trunk/Scripts/Bash/Functions/Render/Config/</file>:</strong></tableterm>
          <item>
            <para>There is one pre-rendition configuration script for each theme component. So, each time a theme component is rendered, its pre-rendition configuration script is evaluated to teach <file>centos-art.sh</file> how to render the component.</para>
            <verbatim xml:space="preserve"><![CDATA[
trunk/Scripts/Bash/Functions/Render/Config/Identity/Themes/Distro/Anaconda/Progress/
`-- render.conf.sh
]]></verbatim>
            <para>In this configuration the pre-rendition configuration script (<file>render.conf.sh</file>) would look like the following:</para>
            <verbatim xml:space="preserve"><![CDATA[
function render_loadConfig {

    # Define rendition actions.
    ACTIONS[0]='BASE:renderImage'

    # Define matching list.
    MATCHINGLIST="\
    paragraph.svg:\
        01-welcome.sed\
        02-donate.sed
    list.svg:\
        03-docs.sed
        "

    # Deifne theme model.
    THEMEMODEL='Default'

}
]]></verbatim>
          </item>
        </tableitem>
      </table>
      <para>The production flow of &ldquo;optimize+flexibility&rdquo; configuration&dots;</para>
      <subheading>Renderable translation directory structures</subheading>
      <para>Translation directory structures are auxiliar structures of renderable identity directory structures. There is one translation directory structure for each renderable identity directory structure.  Inside translation directory structures we organize translation files used by renderable identity directory structures that produce translated images. Renderable identity directory structures that produce untranslated images don't use translation files, but they do use a translation directory structure, an empty translation directory structure, to be precise.</para>
      <para>In order to aliviate production of translation file, we made translation directory structures renderable adding a template (<file>Tpl/</file>) directory structure to handle common content inside translation files.  This way, we work on translation templates and later use <file>centos-art.sh</file> to produce specific translation files (based on translation templates) for different information (e.g., languages, release numbers, architectures, etc.).</para>
      <para>If for some reason, translation files get far from translation templates and translation templates become incovenient to produce such translation files then, care should be taken to avoid replacing the content of translation files with the content of translation templates when <file>centos-art.sh</file> is executed to produce translation files from translation templates.</para>
      <para>Inside renderable translation directory structures, <file>centos-art.sh</file> can produce text-based files only.</para>
      <subheading>Copying renderable directory structures</subheading>
      <para>A renderable layout is formed by design models, design images, pre-rendition configuration scripts and translations files. This way, when we say to duplicate rendition stuff we are saying to duplicate these four directory structures (i.e., design models, design images, pre-rendition configuration scripts, and related translations files).</para>
      <para>When we duplicate directories, inside `trunk/Identity' directory structure, we need to be aware of renderable layout described above and the source location used to perform the duplication action.  The source location is relevant to centos-art.sh script in order to determine the required auxiliar information inside directory structures that need to be copied too (otherwise we may end up with orphan directory structures unable to be rendered, due the absence of required information).</para>
      <para>In order for a renderable directory structure to be valid, the new directory structure copied should match the following conditions:</para>
      <enumerate first="1">
        <item>
          <para>To have a unique directory structure under <file>trunk/Identity</file>, organized by any one of the above organizational designs above.</para>
        </item>
        <item>
          <para>To have a unique directory structure under <file>trunk/Translations</file> to store translation files.</para>
        </item>
        <item>
          <para>To have a unique directory structure under <file>trunk/Scripts/Bash/Functions/Render/Config</file> to set pre-rendition configuration script.</para>
        </item>
      </enumerate>
      <para>As convenction, the <code>render_doCopy</code> function uses <file>trunk/Identity</file> directory structure as source location.  Once the <file>trunk/Identity</file> directory structure has been specified and verified, the related path information is built from it and copied automatically to the new location specified by <var>FLAG_TO</var> variable.</para>
      <para>Design templates + No translation:</para>
      <para>Command: - centos-art render &ndash;copy=trunk/Identity/Path/To/Dir &ndash;to=trunk/Identity/NewPath/To/Dir</para>
      <para>Sources: - trunk/Identity/Path/To/Dir - trunk/Translations/Identity/Path/To/Dir - trunk/Scripts/Bash/Functions/Render/Config/Identity/Path/To/Dir</para>
      <para>Targets: - trunk/Identity/NewPath/To/Dir - trunk/Translations/Identity/NewPath/To/Dir - trunk/Scripts/Bash/Functions/Render/Config/Identity/NewPath/To/Dir</para>
      <para>Renderable layout 2:</para>
      <para>Command: - centos-art render &ndash;copy=trunk/Identity/Themes/Motifs/TreeFlower \                     &ndash;to=trunk/Identity/Themes/Motifs/NewPath/To/Dir</para>
      <para>Sources: - trunk/Identity/Themes/Motifs/TreeFlower - trunk/Translations/Identity/Themes - trunk/Translations/Identity/Themes/Motifs/TreeFlower - trunk/Scripts/Bash/Functions/Render/Config/Identity/Themes - trunk/Scripts/Bash/Functions/Render/Config/Identity/Themes/Motifs/TreeFlower</para>
      <para>Targets: - trunk/Identity/Themes/Motifs/NewPath/To/Dir - trunk/Translations/Identity/Themes - trunk/Translations/Identity/Themes/Motifs/NewPath/To/Dir - trunk/Scripts/Bash/Functions/Render/Config/Identity/Themes - trunk/Scripts/Bash/Functions/Render/Config/Identity/Themes/Motifs/NewPath/To/Dir</para>
      <para>Notice that design models are not included in source or target locations. This is intentional. In &ldquo;Renderable layout 2&rdquo;, design models live by their own, they just exist, they are there, available for any artistic motif to use. By default `Themes/Models/Default' design model directory structure is used, but other design models directory structures (under Themes/Models/) can be created and used changing the value of THEMEMODEL variable inside the pre-rendition configuration script of the artistic motif source location you want to produce.</para>
      <para>Notice how translations and pre-rendition configuration scripts may both be equal in source and target. This is because such structures are common to all artistic motifs (the default values to use when no specific values are provided).</para>
      <para>- The common directory structures are not copied or deleted. We cannot   copy a directory structure to itself.</para>
      <para>- The common directory structures represent the default value to use   when no specific translations and/or pre-rendition configuration   script are provided inside source location.</para>
      <para>- The specific directory structures, if present, are both copiable and   removable. This is, when you perform a copy or delete action from   source, that source specific auxiliar directories are transfered in   the copy action to a new location (that specified by FLAG_TO   variable).</para>
      <para>- When translations and/or pre-rendition configuration scripts are   found inside the source directory structure, the centos-art.sh   script loads common auxiliar directories first and later specific   auxiliar directories.  This way, identity rendition of source   locations can be customized idividually over the base of common   default values.</para>
      <para>- The specific auxiliar directories are optional.</para>
      <para>- The common auxiliar directories should be present always. This is,   in order to provide the information required by render functionality   (i.e., to make it functional in the more basic level of its   existence).</para>
      <para>Notice how the duplication process is done from `trunk/Identity' on, not the oposite. If you try to duplicate a translation structure (or similar auxiliar directory structures like pre-rendition configuration scripts), the `trunk/Identity' for that translation is not created. This limitation is impossed by the fact that many `trunk/Identity' directory structures may reuse/share the same translation directory structure. We cannot delete one translation (or similar) directory structures while a related `trunk/Identity/' directory structure is still in need of it.</para>
      <para>The `render_doCopy' functionality does duplicate directory structures directly involved in rendition process only. Once such directories have been duplicated, the functionality stops thereat.</para>
      <subheading>Usage</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>...</para>
        </item>
      </itemize>
      <subheading>See also</subheading>
      <menu>
        <menuentry>
          <menunode>Directories trunk Scripts Functions Render Config</menunode>
          <menutitle>Directories trunk Scripts Functions Render Config</menutitle>
          <menucomment></menucomment>
        </menuentry>
      </menu>
    </section>
  </node>
  <node>
    <nodename>Directories trunk Scripts Functions Render Config</nodename>
    <nodenext>Directories trunk Scripts Functions Tuneup</nodenext>
    <nodeprev>Directories trunk Scripts Functions Render</nodeprev>
    <nodeup>Directories</nodeup>
    <section>
      <title>The <file>trunk/Scripts/Functions/Render/Config</file> Directory</title>
      <para><indexterm index="cp">Directories trunk Scripts Functions Render Config</indexterm></para>
      <subheading>Goals</subheading>
      <para>The <file>trunk/Scripts/Bash/Config</file> directory exists to oraganize pre-rendering configuration scripts.</para>
      <subheading>Description</subheading>
      <para>Pre-rendering configuration scripts let you customize the way <command>centos-art.sh</command> script renders identity and translation repository entries.  Pre-rendering configuration scripts are <file>render.conf.sh</file> files with <command>render_loadConfig</command> function definition inside.</para>
      <para>There is one <file>render.conf.sh</file> file for each pre-rendering configuration entry. Pre-rendering configuration entries can be based both on identity and translation repository entires.  Pre-rendering configuration entries are required for each identity entry, but not for translation entries.</para>
      <subsubheading>The <file>render.conf.sh</file> identity model</subsubheading>
      <para>Inside CentOS Artwork Repository, we consider identity entries to all directories under <file>trunk/Identity</file> directory. Identity entries can be image-based or text-based. When you render image-based identity entries you need to use image-based pre-rendering configuration scripts. Likewise, when you render text-based identity entries you need to use text-based pre-rendering configuration scripts.</para>
      <para>Inside identity pre-rendering configuration scripts, image-based pre-rendering configuration scripts look like the following:</para>
      <verbatim xml:space="preserve"><![CDATA[
#!/bin/bash

function render_loadConfig {

    # Define rendering actions.
    ACTIONS[0]='BASE:renderImage'
    ACTIONS[1]='POST:renderFormats: tif xpm pdf ppm'

}
]]></verbatim>
      <para>Inside identity pre-rendering configuration scripts, text-based pre-rendering configuration scripts look like the following:</para>
      <verbatim xml:space="preserve"><![CDATA[
#!/bin/bash

function render_loadConfig {

    # Define rendering actions.
    ACTIONS[0]='BASE:renderText'
    ACTIONS[1]='POST:formatText: --width=70 --uniform-spacing'

}
]]></verbatim>
      <para>When using identity pre-rendering configuration scripts, you can extend both image-based and text-based pre-rendering configuration scripts using image-based and text-based post-rendering actions, respectively.</para>
      <subsubheading>The <file>render.conf.sh</file> translation model</subsubheading>
      <para>Translation pre-rendering configuration scripts take precedence before default translation rendering action. Translation pre-rendering actions are useful when default translation rendering action do not fit itself to translation entry rendering requirements.</para>
      <subsubheading>The <file>render.conf.sh</file> rendering actions</subsubheading>
      <para>Inside both image-based and text-based identity pre-rendering configuration scripts, we use the <samp>ACTIONS</samp> array variable to define the way <command>centos-art.sh</command> script performs identity rendering.  Identity rendering is organized by one <samp>BASE</samp> action, and optional <samp>POST</samp> and <samp>LAST</samp> rendering actions.</para>
      <para>The <samp>BASE</samp> action specifies what kind of rendering does the <command>centos-art.sh</command> script will perform with the files related to the pre-rendering configuration script. The <samp>BASE</samp> action is required. Possible values to <samp>BASE</samp> action are either <samp>renderImage</samp> or <samp>renderText</samp> only.</para>
      <para>To specify the <samp>BASE</samp> action you need to set the <samp>BASE:</samp> string followed by one of the possible values. For example, if you want to render images, consider the following definition of <samp>BASE</samp> action:</para>
      <verbatim xml:space="preserve"><![CDATA[
ACTIONS[0]='BASE:renderImage'
]]></verbatim>
      <para>Only one <samp>BASE</samp> action must be specified. If more than one <samp>BASE</samp> action is specified, the last one is used. If no <samp>BASE</samp> action is specified at all, an error is triggered and the <command>centos-art.sh</command> script ends its execution.</para>
      <para>The <samp>POST</samp> action specifies which action to apply for each file rendered (at the rendering time). This action is optional. You can set many different <samp>POST</samp> actions to apply many different actions over the same already rendered file. Possible values to <samp>POST</samp> action are <samp>renderFormats</samp>, <samp>renderSyslinux</samp>, <samp>renderGrub</samp>, etc.</para>
      <para>To specify the <samp>POST</samp> action, you need to use set the <samp>POST:</samp> followed by the function name of the action you want to perform.  The exact form depends on your needs. For example, consider the following example to produce <samp>xpm</samp>, <samp>jpg</samp>, and <samp>tif</samp> images, based on already rendered <samp>png</samp> image, and also organize the produced files in directories named as their own extensions:</para>
      <verbatim xml:space="preserve"><![CDATA[
ACTIONS[0]='BASE:renderImage'
ACTIONS[1]='POST:renderFormats: xpm jpg tif'
ACTIONS[2]='POST:groupByFormat: png xpm jpg tif'
]]></verbatim>
      <para>In the previous example, file organization takes place at the moment of rendering, just after producing the <samp>png</samp> base file and before going to the next file in the list of files to render. If you don't want to organized the produced files in directories named as their own extensions, just remove the <samp>POST:groupByFormat</samp> action line:</para>
      <verbatim xml:space="preserve"><![CDATA[
ACTIONS[0]='BASE:renderImage'
ACTIONS[1]='POST:renderFormats: xpm jpg tif'
]]></verbatim>
      <para>The <samp>LAST</samp> action specifies which actions to apply once the last file in the list of files to process has been rendered. The <samp>LAST</samp> action is optional. Possible values for <samp>LAST</samp> actions may be <samp>groupByFormat</samp>, <samp>renderGdmTgz</samp>, etc.</para>
      <quotation>
        <para><strong>Note</strong> &mdash; <strong>Removed</strong>(xref:trunk Scripts Bash Functions Render) &mdash;, to know more about possible values for <samp>BASE</samp>, <samp>POST</samp> and <samp>LAST</samp> action definitions.</para>
      </quotation>
      <para>To specify the <samp>LAST</samp> action, you need to set the <samp>LAST:</samp> string followed by the function name of the action you want to perform.  For example, consider the following example if you want to render all files first and organize them later:</para>
      <verbatim xml:space="preserve"><![CDATA[
ACTIONS[0]='BASE:renderImage'
ACTIONS[1]='POST:renderFormats: xpm jpg tif'
ACTIONS[2]='LAST:groupByformat: png xpm jpg tif'
]]></verbatim>
      <subheading>Usage</subheading>
      <para>Use the following commands to administer both identity and translation pre-rendering configuration scripts:</para>
      <table>
        <tableitem>
          <tableterm><samp>centos-art config --create='path/to/dir/'</samp></tableterm>
          <item>
            <para>Use this command to create <samp>path/to/dir</samp> related pre-rendering configuration script.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><samp>centos-art config --edit='path/to/dir/'</samp></tableterm>
          <item>
            <para>Use this command to edit <samp>path/to/dir</samp> related pre-rendering configuration script.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><samp>centos-art config --read='path/to/dir/'</samp></tableterm>
          <item>
            <para>Use this command to read <samp>path/to/dir</samp> related pre-rendering configuration script.</para>
          </item>
        </tableitem>
        <tableitem>
          <tableterm><samp>centos-art config --remove='path/to/dir/'</samp></tableterm>
          <item>
            <para>Use this command to remove <samp>path/to/dir</samp> related pre-rendering configuration script.</para>
          </item>
        </tableitem>
      </table>
      <para>In the commands above, <samp>path/to/dir</samp> refers to one renderable directory path under <file>trunk/Identity</file> or <file>trunk/Translations</file> structures only.</para>
      <subheading>See also</subheading>
      <menu>
        <menuentry>
          <menunode>Directories trunk Scripts</menunode>
          <menutitle>Directories trunk Scripts</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Directories trunk Scripts Functions</menunode>
          <menutitle>Directories trunk Scripts Functions</menutitle>
          <menucomment></menucomment>
        </menuentry>
        <menuentry>
          <menunode>Directories trunk Scripts Functions Render</menunode>
          <menutitle>Directories trunk Scripts Functions Render</menutitle>
          <menucomment></menucomment>
        </menuentry>
      </menu>
    </section>
  </node>
  <node>
    <nodename>Directories trunk Scripts Functions Tuneup</nodename>
    <nodeprev>Directories trunk Scripts Functions Render Config</nodeprev>
    <nodeup>Directories</nodeup>
    <section>
      <title>The <file>trunk/Scripts/Functions/Tuneup</file> Directory</title>
      <para><indexterm index="cp">Directories trunk Scripts Functions Tuneup</indexterm></para>
      <subheading>Goals</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>...</para>
        </item>
      </itemize>
      <subheading>Description</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>...</para>
        </item>
      </itemize>
      <subheading>Usage</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>...</para>
        </item>
      </itemize>
      <subheading>See also</subheading>
      <itemize>
        <itemfunction>&bullet;</itemfunction>
        <item>
          <para>...</para>
        </item>
      </itemize>
<!--  The End of the Document - -->
    </section>
  </node>
  <node>
    <nodename>Index</nodename>
    <nodenext>List of Figures</nodenext>
    <nodeprev>Directories</nodeprev>
    <nodeup>Top</nodeup>
    <unnumbered>
      <title>Index</title>
      <printindex>cp</printindex>
    </unnumbered>
  </node>
  <node>
    <nodename>List of Figures</nodename>
    <nodeprev>Index</nodeprev>
    <nodeup>Top</nodeup>
    <unnumbered>
      <title>List of Figures</title>
      <listoffloats type="Figure"></listoffloats>
    </unnumbered>
  </node>
</texinfo>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-indent-step:1
sgml-indent-data:nil
End:
-->
