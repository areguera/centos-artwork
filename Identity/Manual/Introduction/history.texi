This section records noteworthy changes of CentOS Artwork Repository
through time.

@subheading 2008

The CentOS Artwork Repository started at CentOS Developers mailing
list (@email{centos-devel@@centos.org}) during a discussion about how
to automate the slide images of Anaconda. In such discussion, Ralph
Angenendt rose up his hand to ask: Do you have something to show? 

To answer the question, Alain Reguera Delgado posted a bash script to
produce slide images in different languages ---together with the
proposition of creating a Subversion centralized repository where
translations and image production could be distributed inside The
CentOS Community---.

Karanbirn Sighn considered the idea intresting and provides the
infrastructure to support the effort. This way both the CentOS Artwork
SIG and the CentOS Artwork Repository were created.

@itemize
@item @url{https://projects.centos.org/svn/artwork/}
@item @url{https://projects.centos.org/trac/artwork/}
@end itemize

Once the CentOS Artwork Repository was available, Alain Reguera
Delagdo uploaded the bash script for rendering Anaconda slides and
Ralph Angenendt documented the script very well.

Once the rendition script and its documentation were available online,
translators started to download working copies of CentOS Artwork
Repository to produce slide images in their own languages.

@subheading 2009

The rendition script is designed to take one SVG file, apply one SED
file with replacement command inside to produce one SVG translated
instance that is used to produce one translated PNG image by means of
Inkscape program.  The rendition script was named @command{render.sh}
and it is copied to each directory structure that requires such
process to produce images. 

Furthermore, functionalies are centralized in a common placed and
linked from different directory structures. There is no need to have
the same code in different directory structures if can have it in just
one place and then create links to it.

Start to implement concepts about corporate identity. As referece it
is used Wikipedia (@url{http://en.wikipedia.org/Corporate_identity})
and the book @emph{Corporate Identity} by Wally Olins (1989). The main
goal of @command{render.sh} becomes to: automate production of a
monolithic corporate visual identity structure based on The CentOS
Mission and The CentOS Release Schema. 

Around March, Alain Reguera Delgado is out of Internet for an
undefined amount of time, but continues developing the idea of CentOS
Artwork Repository and the rendition script off-line. 

Most of the work I propose from this time on is my own responsability.
I keep myself thinking to be part of the CentOS Artwork SIG and in
that sake, I use the personal pronoun @emph{we} to refer what I do as
part of the group hoping someday to share this work with you again and
improve it together.

The CentOS Artwork Repository documentation starts to take form in
@LaTeX{} format.

@subheading 2010

The @command{render.sh} is removed from the repository directory
structures and the @command{centos-art.sh} script is used instead. The
@command{centos-art.sh} is created to be a command-line interface that
automate most frequent tasks inside the repository and can be called
anywhere inside the repository or outside it; whenever it points to a
directory structure inside the repository. At the very first moments
of using @command{centos-art.sh} command-line, it used to have the
following using form:

@verbatim
centos-art function --action=path/to/dir
@end verbatim

Inside the rendition script, functionalities started to get identified
and separated one another. For example, when images are rendered,
there is no need to load manual functionality. There are now common
functionalities and specific functionalities. Common functionalities
are loaded when the script is initiated and are available to specific
functionalities.

Start using @command{getopt} to handle command-line options. 

The repository directory structure is optimized to continue
implementing corporate identity concepts and the @command{centos-art}
command-line.

@subheading 2011

The `trunk/Translation' directory structure is removed. The
`trunk/Locales' directory structure is used instead to store locale
information. 

The `.sed' translation files are no longer used, scalable vector
graphics are used instead.  Translation messages take place by means
of xml2po and gettext. With xml2po translatable strings are retrived
from `.svg' files and stored inside gettext `.pot' and `.po' files for
translators to edit. Finally, xml2po is used again to build the
temporal design model translated instance which the final `.png' image
is built from.

Inside @command{centos-art.sh}, update command-line arguments and
options parsing. Keep using @command{getopt} to parse options passed
in the command-line, but change the way @command{centos-art.sh} is
called from. The following form is used:

@verbatim
centos-art function path/to/dir --options
@end verbatim

Start using verbs to name the @command{centos-art.sh} functionalities.

Organize @command{centos-art.sh} functionalities in ``administrative''
functions and ``productive'' functions.  Administrative functions
cover actions like: copying, deleting and renaming directory
structures. Also, preparing your workstation for using
@command{centos-art} command-line, make backups of the distribution
theme currently installed,  installing themes created inside The
CentOS Artwork repository and restoring themes from backup.  On the
other hand, productive functions cover actions like: content
rendition, content localization, content documentation and content
maintainance.
